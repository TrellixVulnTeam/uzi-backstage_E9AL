{"version":3,"file":"index-d159831b.esm.js","sources":["../../src/components/SystemDiagramCard/SystemDiagramCard.tsx"],"sourcesContent":["/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  RELATION_DEPENDS_ON,\n  RELATION_PROVIDES_API,\n  RELATION_PART_OF,\n  stringifyEntityRef,\n  ENTITY_DEFAULT_NAMESPACE,\n  parseEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  catalogApiRef,\n  entityRouteRef,\n  getEntityRelations,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\nimport {\n  DependencyGraph,\n  DependencyGraphTypes,\n  InfoCard,\n  Progress,\n  useApi,\n  ResponseErrorPanel,\n  Link,\n  useRouteRef,\n} from '@backstage/core';\nimport { Box, makeStyles, Typography } from '@material-ui/core';\nimport ZoomOutMap from '@material-ui/icons/ZoomOutMap';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport { BackstageTheme } from '@backstage/theme';\n\nconst useStyles = makeStyles((theme: BackstageTheme) => ({\n  domainNode: {\n    fill: theme.palette.primary.main,\n    stroke: theme.palette.border,\n  },\n  systemNode: {\n    fill: 'coral',\n    stroke: theme.palette.border,\n  },\n  componentNode: {\n    fill: 'yellowgreen',\n    stroke: theme.palette.border,\n  },\n  apiNode: {\n    fill: theme.palette.gold,\n    stroke: theme.palette.border,\n  },\n  resourceNode: {\n    fill: 'grey',\n    stroke: theme.palette.border,\n  },\n}));\n\n// Simplifies the diagram output by hiding the default namespace and kind\nfunction readableEntityName(\n  ref:\n    | Entity\n    | {\n        kind: string;\n        namespace?: string;\n        name: string;\n      },\n): string {\n  return stringifyEntityRef(ref)\n    .toLocaleLowerCase('en-US')\n    .replace(`:${ENTITY_DEFAULT_NAMESPACE}/`, ':')\n    .split(':')[1];\n}\n\nfunction RenderNode(props: DependencyGraphTypes.RenderNodeProps<any>) {\n  const classes = useStyles();\n  const catalogEntityRoute = useRouteRef(entityRouteRef);\n  const kind = props.node.kind || 'Component';\n  const ref = parseEntityRef(props.node.id);\n  let nodeClass = classes.componentNode;\n\n  switch (kind) {\n    case 'Domain':\n      nodeClass = classes.domainNode;\n      break;\n    case 'System':\n      nodeClass = classes.systemNode;\n      break;\n    case 'Component':\n      nodeClass = classes.componentNode;\n      break;\n    case 'API':\n      nodeClass = classes.apiNode;\n      break;\n    case 'Resource':\n      nodeClass = classes.resourceNode;\n      break;\n    default:\n      nodeClass = classes.componentNode;\n  }\n\n  return (\n    <g>\n      <rect width={200} height={100} rx={20} className={nodeClass} />\n      <Link\n        to={catalogEntityRoute({\n          kind: kind,\n          namespace: ref.namespace,\n          name: ref.name,\n        })}\n      >\n        <text\n          x={100}\n          y={45}\n          textAnchor=\"middle\"\n          alignmentBaseline=\"baseline\"\n          style={{ fontWeight: 'bold' }}\n        >\n          {props.node.name}\n        </text>\n      </Link>\n\n      <text x={100} y={65} textAnchor=\"middle\" alignmentBaseline=\"hanging\">\n        {props.node.kind}\n      </text>\n    </g>\n  );\n}\n\n/**\n * Dynamically generates a diagram of a system, its assigned entities,\n * and relationships of those entities.\n */\nexport function SystemDiagramCard() {\n  const { entity } = useEntity();\n  const currentSystemName = entity.metadata.name;\n  const currentSystemNode = stringifyEntityRef(entity);\n  const systemNodes = new Array<{ id: string; kind: string; name: string }>();\n  const systemEdges = new Array<{ from: string; to: string; label: string }>();\n\n  const catalogApi = useApi(catalogApiRef);\n  const { loading, error, value: catalogResponse } = useAsync(() => {\n    return catalogApi.getEntities({\n      filter: {\n        kind: ['Component', 'API', 'Resource', 'System', 'Domain'],\n        'spec.system': [\n          currentSystemName,\n          `${ENTITY_DEFAULT_NAMESPACE}/${currentSystemName}`,\n        ],\n      },\n    });\n  }, [catalogApi, currentSystemName]);\n\n  // pick out the system itself\n  systemNodes.push({\n    id: currentSystemNode,\n    kind: 'System',\n    name: readableEntityName(entity),\n  });\n\n  // check if the system has an assigned domain\n  // even if the domain object doesn't exist in the catalog, display it in the map\n  const catalogItemDomain = getEntityRelations(entity, RELATION_PART_OF, {\n    kind: 'Domain',\n  });\n  catalogItemDomain.forEach(foundDomain =>\n    systemNodes.push({\n      id: stringifyEntityRef(foundDomain),\n      kind: foundDomain.kind,\n      name: readableEntityName(foundDomain),\n    }),\n  );\n  catalogItemDomain.forEach(foundDomain =>\n    systemEdges.push({\n      from: currentSystemNode,\n      to: stringifyEntityRef(foundDomain),\n      label: 'part of',\n    }),\n  );\n\n  if (catalogResponse && catalogResponse.items) {\n    for (const catalogItem of catalogResponse.items) {\n      systemNodes.push({\n        id: stringifyEntityRef(catalogItem),\n        kind: catalogItem.kind,\n        name: readableEntityName(catalogItem),\n      });\n\n      // Check relations of the entity assigned to this system to see\n      // if it relates to other entities.\n      // Note those relations may, or may not, be explicitly\n      // assigned to the system.\n      const catalogItemRelations_partOf = getEntityRelations(\n        catalogItem,\n        RELATION_PART_OF,\n      );\n      catalogItemRelations_partOf.forEach(foundRelation =>\n        systemEdges.push({\n          from: stringifyEntityRef(catalogItem),\n          to: stringifyEntityRef(foundRelation),\n          label: 'part of',\n        }),\n      );\n\n      const catalogItemRelations_providesApi = getEntityRelations(\n        catalogItem,\n        RELATION_PROVIDES_API,\n      );\n      catalogItemRelations_providesApi.forEach(foundRelation =>\n        systemEdges.push({\n          from: stringifyEntityRef(catalogItem),\n          to: stringifyEntityRef(foundRelation),\n          label: 'provides',\n        }),\n      );\n\n      const catalogItemRelations_dependsOn = getEntityRelations(\n        catalogItem,\n        RELATION_DEPENDS_ON,\n      );\n      catalogItemRelations_dependsOn.forEach(foundRelation =>\n        systemEdges.push({\n          from: stringifyEntityRef(catalogItem),\n          to: stringifyEntityRef(foundRelation),\n          label: 'depends on',\n        }),\n      );\n    }\n  }\n\n  if (loading) {\n    return <Progress />;\n  } else if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n\n  return (\n    <InfoCard title=\"System Diagram\">\n      <DependencyGraph\n        nodes={systemNodes}\n        edges={systemEdges}\n        nodeMargin={10}\n        direction={DependencyGraphTypes.Direction.BOTTOM_TOP}\n        renderNode={RenderNode}\n      />\n      <Box m={1} />\n      <Typography\n        variant=\"caption\"\n        style={{ display: 'block', textAlign: 'right' }}\n      >\n        <ZoomOutMap style={{ verticalAlign: 'bottom' }} /> Use pinch &amp; zoom\n        to move around the diagram.\n      </Typography>\n    </InfoCard>\n  );\n}\n"],"names":[],"mappings":"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"}