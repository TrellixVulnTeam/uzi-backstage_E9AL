import { stringifyEntityRef, ENTITY_DEFAULT_NAMESPACE, RELATION_PART_OF, RELATION_PROVIDES_API, RELATION_DEPENDS_ON, parseEntityRef } from '@backstage/catalog-model';
import { useApi, Progress, ResponseErrorPanel, InfoCard, DependencyGraph, DependencyGraphTypes, useRouteRef, Link } from '@backstage/core';
import { useEntity, catalogApiRef, getEntityRelations, entityRouteRef } from '@backstage/plugin-catalog-react';
import { makeStyles, Box, Typography } from '@material-ui/core';
import React from 'react';
import { useAsync } from 'react-use';
import ZoomOutMap from '@material-ui/icons/ZoomOutMap';

const useStyles = makeStyles((theme) => ({
  domainNode: {
    fill: theme.palette.primary.main,
    stroke: theme.palette.border
  },
  systemNode: {
    fill: "coral",
    stroke: theme.palette.border
  },
  componentNode: {
    fill: "yellowgreen",
    stroke: theme.palette.border
  },
  apiNode: {
    fill: theme.palette.gold,
    stroke: theme.palette.border
  },
  resourceNode: {
    fill: "grey",
    stroke: theme.palette.border
  }
}));
function readableEntityName(ref) {
  return stringifyEntityRef(ref).toLocaleLowerCase("en-US").replace(`:${ENTITY_DEFAULT_NAMESPACE}/`, ":").split(":")[1];
}
function RenderNode(props) {
  const classes = useStyles();
  const catalogEntityRoute = useRouteRef(entityRouteRef);
  const kind = props.node.kind || "Component";
  const ref = parseEntityRef(props.node.id);
  let nodeClass = classes.componentNode;
  switch (kind) {
    case "Domain":
      nodeClass = classes.domainNode;
      break;
    case "System":
      nodeClass = classes.systemNode;
      break;
    case "Component":
      nodeClass = classes.componentNode;
      break;
    case "API":
      nodeClass = classes.apiNode;
      break;
    case "Resource":
      nodeClass = classes.resourceNode;
      break;
    default:
      nodeClass = classes.componentNode;
  }
  return /* @__PURE__ */ React.createElement("g", null, /* @__PURE__ */ React.createElement("rect", {
    width: 200,
    height: 100,
    rx: 20,
    className: nodeClass
  }), /* @__PURE__ */ React.createElement(Link, {
    to: catalogEntityRoute({
      kind,
      namespace: ref.namespace,
      name: ref.name
    })
  }, /* @__PURE__ */ React.createElement("text", {
    x: 100,
    y: 45,
    textAnchor: "middle",
    alignmentBaseline: "baseline",
    style: {fontWeight: "bold"}
  }, props.node.name)), /* @__PURE__ */ React.createElement("text", {
    x: 100,
    y: 65,
    textAnchor: "middle",
    alignmentBaseline: "hanging"
  }, props.node.kind));
}
function SystemDiagramCard() {
  const {entity} = useEntity();
  const currentSystemName = entity.metadata.name;
  const currentSystemNode = stringifyEntityRef(entity);
  const systemNodes = new Array();
  const systemEdges = new Array();
  const catalogApi = useApi(catalogApiRef);
  const {loading, error, value: catalogResponse} = useAsync(() => {
    return catalogApi.getEntities({
      filter: {
        kind: ["Component", "API", "Resource", "System", "Domain"],
        "spec.system": [
          currentSystemName,
          `${ENTITY_DEFAULT_NAMESPACE}/${currentSystemName}`
        ]
      }
    });
  }, [catalogApi, currentSystemName]);
  systemNodes.push({
    id: currentSystemNode,
    kind: "System",
    name: readableEntityName(entity)
  });
  const catalogItemDomain = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "Domain"
  });
  catalogItemDomain.forEach((foundDomain) => systemNodes.push({
    id: stringifyEntityRef(foundDomain),
    kind: foundDomain.kind,
    name: readableEntityName(foundDomain)
  }));
  catalogItemDomain.forEach((foundDomain) => systemEdges.push({
    from: currentSystemNode,
    to: stringifyEntityRef(foundDomain),
    label: "part of"
  }));
  if (catalogResponse && catalogResponse.items) {
    for (const catalogItem of catalogResponse.items) {
      systemNodes.push({
        id: stringifyEntityRef(catalogItem),
        kind: catalogItem.kind,
        name: readableEntityName(catalogItem)
      });
      const catalogItemRelations_partOf = getEntityRelations(catalogItem, RELATION_PART_OF);
      catalogItemRelations_partOf.forEach((foundRelation) => systemEdges.push({
        from: stringifyEntityRef(catalogItem),
        to: stringifyEntityRef(foundRelation),
        label: "part of"
      }));
      const catalogItemRelations_providesApi = getEntityRelations(catalogItem, RELATION_PROVIDES_API);
      catalogItemRelations_providesApi.forEach((foundRelation) => systemEdges.push({
        from: stringifyEntityRef(catalogItem),
        to: stringifyEntityRef(foundRelation),
        label: "provides"
      }));
      const catalogItemRelations_dependsOn = getEntityRelations(catalogItem, RELATION_DEPENDS_ON);
      catalogItemRelations_dependsOn.forEach((foundRelation) => systemEdges.push({
        from: stringifyEntityRef(catalogItem),
        to: stringifyEntityRef(foundRelation),
        label: "depends on"
      }));
    }
  }
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, {
      error
    });
  }
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "System Diagram"
  }, /* @__PURE__ */ React.createElement(DependencyGraph, {
    nodes: systemNodes,
    edges: systemEdges,
    nodeMargin: 10,
    direction: DependencyGraphTypes.Direction.BOTTOM_TOP,
    renderNode: RenderNode
  }), /* @__PURE__ */ React.createElement(Box, {
    m: 1
  }), /* @__PURE__ */ React.createElement(Typography, {
    variant: "caption",
    style: {display: "block", textAlign: "right"}
  }, /* @__PURE__ */ React.createElement(ZoomOutMap, {
    style: {verticalAlign: "bottom"}
  }), " Use pinch & zoom to move around the diagram."));
}

export { SystemDiagramCard };
//# sourceMappingURL=index-d159831b.esm.js.map
