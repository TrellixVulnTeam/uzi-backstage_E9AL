{"version":3,"file":"index.esm.js","sources":["../src/api/JenkinsApi.ts","../src/plugin.ts","../src/components/BuildsPage/lib/Status/JenkinsRunStatus.tsx","../src/components/useBuilds.ts","../src/constants.ts","../src/components/useProjectSlugFromEntity.ts","../src/components/Cards/Cards.tsx","../src/components/useAsyncPolling.ts","../src/components/useBuildWithSteps.ts","../src/components/BuildWithStepsPage/BuildWithStepsPage.tsx","../src/components/BuildsPage/lib/CITable/CITable.tsx","../src/components/Router.tsx"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef, DiscoveryApi } from '@backstage/core';\nimport { CITableBuildInfo } from '../components/BuildsPage/lib/CITable';\n\nconst jenkins = require('jenkins');\n\nexport const jenkinsApiRef = createApiRef<JenkinsApi>({\n  id: 'plugin.jenkins.service',\n  description: 'Used by the Jenkins plugin to make requests',\n});\n\nconst DEFAULT_PROXY_PATH = '/jenkins/api';\n\ntype Options = {\n  discoveryApi: DiscoveryApi;\n  /**\n   * Path to use for requests via the proxy, defaults to /jenkins/api\n   */\n  proxyPath?: string;\n};\n\nexport class JenkinsApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly proxyPath: string;\n\n  constructor(options: Options) {\n    this.discoveryApi = options.discoveryApi;\n    this.proxyPath = options.proxyPath ?? DEFAULT_PROXY_PATH;\n  }\n\n  private async getClient() {\n    const proxyUrl = await this.discoveryApi.getBaseUrl('proxy');\n    return jenkins({ baseUrl: proxyUrl + this.proxyPath, promisify: true });\n  }\n\n  async retry(buildName: string) {\n    const client = await this.getClient();\n    // looks like the current SDK only supports triggering a new build\n    // can't see any support for replay (re-running the specific build with the same SCM info)\n    return await client.job.build(buildName);\n  }\n\n  async getLastBuild(jobName: string) {\n    const client = await this.getClient();\n    const job = await client.job.get(jobName);\n\n    const lastBuild = await client.build.get(jobName, job.lastBuild.number);\n    return lastBuild;\n  }\n\n  extractScmDetailsFromJob(jobDetails: any): any | undefined {\n    const scmInfo = jobDetails.actions\n      .filter(\n        (action: any) =>\n          action._class === 'jenkins.scm.api.metadata.ObjectMetadataAction',\n      )\n      .map((action: any) => {\n        return {\n          url: action?.objectUrl,\n          // https://javadoc.jenkins.io/plugin/scm-api/jenkins/scm/api/metadata/ObjectMetadataAction.html\n          // branch name for regular builds, pull request title on pull requests\n          displayName: action?.objectDisplayName,\n        };\n      })\n      .pop();\n\n    if (!scmInfo) {\n      return undefined;\n    }\n\n    const author = jobDetails.actions\n      .filter(\n        (action: any) =>\n          action._class ===\n          'jenkins.scm.api.metadata.ContributorMetadataAction',\n      )\n      .map((action: any) => {\n        return action.contributorDisplayName;\n      })\n      .pop();\n\n    if (author) {\n      scmInfo.author = author;\n    }\n\n    return scmInfo;\n  }\n\n  async getJob(jobName: string) {\n    const client = await this.getClient();\n    return client.job.get({\n      name: jobName,\n      depth: 1,\n    });\n  }\n\n  async getFolder(folderName: string) {\n    const client = await this.getClient();\n    const folder = await client.job.get({\n      name: folderName,\n      // Filter only be the information we need, instead of loading all fields.\n      // Limit to only show the latest build for each job and only load 50 jobs\n      // at all.\n      // Whitespaces are only included for readablity here and stripped out\n      // before sending to Jenkins\n      tree: `jobs[\n               actions[*],\n               builds[\n                number,\n                url,\n                fullDisplayName,\n                building,\n                result,\n                actions[\n                  *[\n                    *[\n                      *[\n                        *\n                      ]\n                    ]\n                  ]\n                ]\n              ]{0,1},\n              jobs{0,1},\n              name\n            ]{0,50}\n            `.replace(/\\s/g, ''),\n    });\n    const results = [];\n\n    for (const jobDetails of folder.jobs) {\n      const jobScmInfo = this.extractScmDetailsFromJob(jobDetails);\n      if (jobDetails?.jobs) {\n        // skipping folders inside folders for now\n      } else {\n        for (const buildDetails of jobDetails.builds) {\n          const ciTable = this.mapJenkinsBuildToCITable(\n            buildDetails,\n            jobScmInfo,\n          );\n          results.push(ciTable);\n        }\n      }\n    }\n    return results;\n  }\n\n  private getTestReport(\n    jenkinsResult: any,\n  ): {\n    total: number;\n    passed: number;\n    skipped: number;\n    failed: number;\n    testUrl: string;\n  } {\n    return jenkinsResult.actions\n      .filter(\n        (action: any) =>\n          action._class === 'hudson.tasks.junit.TestResultAction',\n      )\n      .map((action: any) => {\n        return {\n          total: action.totalCount,\n          passed: action.totalCount - action.failCount - action.skipCount,\n          skipped: action.skipCount,\n          failed: action.failCount,\n          testUrl: `${jenkinsResult.url}${action.urlName}/`,\n        };\n      })\n      .pop();\n  }\n\n  mapJenkinsBuildToCITable(\n    jenkinsResult: any,\n    jobScmInfo?: any,\n  ): CITableBuildInfo {\n    const source =\n      jenkinsResult.actions\n        .filter(\n          (action: any) =>\n            action._class === 'hudson.plugins.git.util.BuildData',\n        )\n        .map((action: any) => {\n          const [first]: any = Object.values(action.buildsByBranchName);\n          const branch = first.revision.branch[0];\n          return {\n            branchName: branch.name,\n            commit: {\n              hash: branch.SHA1.substring(0, 8),\n            },\n          };\n        })\n        .pop() || {};\n\n    if (jobScmInfo) {\n      source.url = jobScmInfo?.url;\n      source.displayName = jobScmInfo?.displayName;\n      source.author = jobScmInfo?.author;\n    }\n\n    const path = new URL(jenkinsResult.url).pathname;\n\n    return {\n      id: path,\n      buildNumber: jenkinsResult.number,\n      buildUrl: jenkinsResult.url,\n      buildName: jenkinsResult.fullDisplayName,\n      status: jenkinsResult.building ? 'running' : jenkinsResult.result,\n      onRestartClick: () => {\n        // TODO: this won't handle non root context path, need a better way to get the job name\n        const { jobName } = this.extractJobDetailsFromBuildName(path);\n        return this.retry(jobName);\n      },\n      source: source,\n      tests: this.getTestReport(jenkinsResult),\n    };\n  }\n\n  async getBuild(buildName: string) {\n    const client = await this.getClient();\n    const { jobName, buildNumber } = this.extractJobDetailsFromBuildName(\n      buildName,\n    );\n    const buildResult = await client.build.get(jobName, buildNumber);\n    return buildResult;\n  }\n\n  extractJobDetailsFromBuildName(buildName: string) {\n    const trimmedBuild = buildName.replace(/\\/job/g, '').replace(/\\/$/, '');\n\n    const split = trimmedBuild.split('/');\n    const buildNumber = parseInt(split[split.length - 1], 10);\n    const jobName = trimmedBuild.slice(\n      0,\n      trimmedBuild.length - buildNumber.toString(10).length - 1,\n    );\n\n    return {\n      jobName,\n      buildNumber,\n    };\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createApiFactory,\n  createComponentExtension,\n  createPlugin,\n  createRoutableExtension,\n  createRouteRef,\n  discoveryApiRef,\n} from '@backstage/core';\nimport { JenkinsApi, jenkinsApiRef } from './api';\n\nexport const rootRouteRef = createRouteRef({\n  path: '',\n  title: 'Jenkins',\n});\n\nexport const buildRouteRef = createRouteRef({\n  path: 'run/:branch/:buildNumber',\n  params: ['branch', 'buildNumber'],\n  title: 'Jenkins run',\n});\n\nexport const jenkinsPlugin = createPlugin({\n  id: 'jenkins',\n  apis: [\n    createApiFactory({\n      api: jenkinsApiRef,\n      deps: { discoveryApi: discoveryApiRef },\n      factory: ({ discoveryApi }) => new JenkinsApi({ discoveryApi }),\n    }),\n  ],\n  routes: {\n    entityContent: rootRouteRef,\n  },\n});\n\nexport const EntityJenkinsContent = jenkinsPlugin.provide(\n  createRoutableExtension({\n    component: () => import('./components/Router').then(m => m.Router),\n    mountPoint: rootRouteRef,\n  }),\n);\nexport const EntityLatestJenkinsRunCard = jenkinsPlugin.provide(\n  createComponentExtension({\n    component: {\n      lazy: () => import('./components/Cards').then(m => m.LatestRunCard),\n    },\n  }),\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StatusPending,\n  StatusRunning,\n  StatusOK,\n  StatusWarning,\n  StatusAborted,\n  StatusError,\n} from '@backstage/core';\nimport React from 'react';\n\nexport const JenkinsRunStatus = ({\n  status,\n}: {\n  status: string | undefined;\n}) => {\n  if (status === undefined) return null;\n  switch (status.toLocaleLowerCase('en-US')) {\n    case 'queued':\n    case 'scheduled':\n      return (\n        <>\n          <StatusPending /> Queued\n        </>\n      );\n    case 'running':\n      return (\n        <>\n          <StatusRunning /> In progress\n        </>\n      );\n    case 'unstable':\n      return (\n        <>\n          <StatusWarning /> Unstable\n        </>\n      );\n    case 'failure':\n      return (\n        <>\n          <StatusError /> Failed\n        </>\n      );\n    case 'success':\n      return (\n        <>\n          <StatusOK /> Completed\n        </>\n      );\n    case 'aborted':\n      return (\n        <>\n          <StatusAborted /> Aborted\n        </>\n      );\n    default:\n      return (\n        <>\n          <StatusWarning /> {status}\n        </>\n      );\n  }\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { errorApiRef, useApi } from '@backstage/core';\nimport { useState } from 'react';\nimport { useAsyncRetry } from 'react-use';\nimport { jenkinsApiRef } from '../api';\n\nexport enum ErrorType {\n  CONNECTION_ERROR,\n  NOT_FOUND,\n}\n\nexport function useBuilds(projectName: string, branch?: string) {\n  const api = useApi(jenkinsApiRef);\n  const errorApi = useApi(errorApiRef);\n\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n  const [error, setError] = useState<{\n    message: string;\n    errorType: ErrorType;\n  }>();\n\n  const restartBuild = async (buildName: string) => {\n    try {\n      await api.retry(buildName);\n    } catch (e) {\n      errorApi.post(e);\n    }\n  };\n\n  const { loading, value: builds, retry } = useAsyncRetry(async () => {\n    try {\n      let build;\n      if (branch) {\n        build = await api.getLastBuild(`${projectName}/${branch}`);\n      } else {\n        build = await api.getFolder(`${projectName}`);\n      }\n\n      const size = Array.isArray(build) ? build?.[0].build_num! : 1;\n      setTotal(size);\n\n      return build || [];\n    } catch (e) {\n      const errorType = e.notFound\n        ? ErrorType.NOT_FOUND\n        : ErrorType.CONNECTION_ERROR;\n      setError({ message: e.message, errorType });\n      throw e;\n    }\n  }, [api, errorApi, projectName, branch]);\n\n  return [\n    {\n      page,\n      pageSize,\n      loading,\n      builds,\n      projectName,\n      total,\n      error,\n    },\n    {\n      builds,\n      setPage,\n      setPageSize,\n      restartBuild,\n      retry,\n    },\n  ] as const;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const JENKINS_ANNOTATION = 'jenkins.io/github-folder';\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { JENKINS_ANNOTATION } from '../constants';\n\nexport const useProjectSlugFromEntity = () => {\n  const { entity } = useEntity();\n\n  return entity.metadata.annotations?.[JENKINS_ANNOTATION] ?? '';\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InfoCard,\n  InfoCardVariants,\n  StructuredMetadataTable,\n  WarningPanel,\n} from '@backstage/core';\nimport { LinearProgress, Link, makeStyles, Theme } from '@material-ui/core';\nimport ExternalLinkIcon from '@material-ui/icons/Launch';\nimport { DateTime, Duration } from 'luxon';\nimport React from 'react';\nimport { JenkinsRunStatus } from '../BuildsPage/lib/Status';\nimport { ErrorType, useBuilds } from '../useBuilds';\nimport { useProjectSlugFromEntity } from '../useProjectSlugFromEntity';\n\nconst useStyles = makeStyles<Theme>({\n  externalLinkIcon: {\n    fontSize: 'inherit',\n    verticalAlign: 'bottom',\n  },\n});\n\nconst WidgetContent = ({\n  loading,\n  latestRun,\n}: {\n  loading?: boolean;\n  latestRun: any;\n  branch: string;\n}) => {\n  const classes = useStyles();\n  if (loading || !latestRun) return <LinearProgress />;\n  const displayDate = DateTime.fromMillis(latestRun.timestamp).toRelative();\n  const displayDuration =\n    (latestRun.building ? 'Running for ' : '') +\n    DateTime.local()\n      .minus(Duration.fromMillis(latestRun.duration))\n      .toRelative({ locale: 'en' })\n      ?.replace(' ago', '');\n\n  return (\n    <StructuredMetadataTable\n      metadata={{\n        status: (\n          <>\n            <JenkinsRunStatus\n              status={latestRun.building ? 'running' : latestRun.result}\n            />\n          </>\n        ),\n        build: latestRun.fullDisplayName,\n        'latest run': displayDate,\n        duration: displayDuration,\n        link: (\n          <Link href={latestRun.url} target=\"_blank\">\n            See more on Jenkins{' '}\n            <ExternalLinkIcon className={classes.externalLinkIcon} />\n          </Link>\n        ),\n      }}\n    />\n  );\n};\n\nconst JenkinsApiErrorPanel = ({\n  message,\n  errorType,\n}: {\n  message: string;\n  errorType: ErrorType;\n}) => {\n  let title = undefined;\n  if (errorType === ErrorType.CONNECTION_ERROR) {\n    title = \"Can't connect to Jenkins\";\n  } else if (errorType === ErrorType.NOT_FOUND) {\n    title = \"Can't find Jenkins project\";\n  }\n\n  return <WarningPanel severity=\"error\" title={title} message={message} />;\n};\n\nexport const LatestRunCard = ({\n  branch = 'master',\n  variant,\n}: {\n  branch: string;\n  variant?: InfoCardVariants;\n}) => {\n  const projectName = useProjectSlugFromEntity();\n  const [{ builds, loading, error }] = useBuilds(projectName, branch);\n  const latestRun = builds ?? {};\n  return (\n    <InfoCard title={`Latest ${branch} build`} variant={variant}>\n      {!error ? (\n        <WidgetContent\n          loading={loading}\n          branch={branch}\n          latestRun={latestRun}\n        />\n      ) : (\n        <JenkinsApiErrorPanel\n          message={error.message}\n          errorType={error.errorType}\n        />\n      )}\n    </InfoCard>\n  );\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useRef } from 'react';\n\nexport const useAsyncPolling = (\n  pollingFn: () => Promise<any>,\n  interval: number,\n) => {\n  const isPolling = useRef<boolean>(false);\n  const startPolling = async () => {\n    if (isPolling.current === true) return;\n    isPolling.current = true;\n\n    while (isPolling.current === true) {\n      await pollingFn();\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  };\n\n  const stopPolling = () => {\n    isPolling.current = false;\n  };\n  return { startPolling, stopPolling };\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { errorApiRef, useApi } from '@backstage/core';\nimport { useCallback } from 'react';\nimport { useAsyncRetry } from 'react-use';\nimport { jenkinsApiRef } from '../api';\nimport { useAsyncPolling } from './useAsyncPolling';\n\nconst INTERVAL_AMOUNT = 1500;\nexport function useBuildWithSteps(buildName: string) {\n  const api = useApi(jenkinsApiRef);\n  const errorApi = useApi(errorApiRef);\n\n  const getBuildWithSteps = useCallback(async () => {\n    try {\n      const build = await api.getBuild(buildName);\n\n      const { jobName } = api.extractJobDetailsFromBuildName(buildName);\n      const job = await api.getJob(jobName);\n      const jobInfo = api.extractScmDetailsFromJob(job);\n\n      return Promise.resolve(api.mapJenkinsBuildToCITable(build, jobInfo));\n    } catch (e) {\n      errorApi.post(e);\n      return Promise.reject(e);\n    }\n  }, [buildName, api, errorApi]);\n\n  const restartBuild = async () => {\n    try {\n      await api.retry(buildName);\n    } catch (e) {\n      errorApi.post(e);\n    }\n  };\n\n  const { loading, value, retry } = useAsyncRetry(() => getBuildWithSteps(), [\n    getBuildWithSteps,\n  ]);\n\n  const { startPolling, stopPolling } = useAsyncPolling(\n    getBuildWithSteps,\n    INTERVAL_AMOUNT,\n  );\n\n  return [\n    { loading, value, retry },\n    {\n      restartBuild,\n      getBuildWithSteps,\n      startPolling,\n      stopPolling,\n    },\n  ] as const;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Breadcrumbs, Content, Link, useRouteRefParams } from '@backstage/core';\nimport {\n  Box,\n  Link as MaterialLink,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExternalLinkIcon from '@material-ui/icons/Launch';\nimport React from 'react';\nimport { buildRouteRef } from '../../plugin';\nimport { JenkinsRunStatus } from '../BuildsPage/lib/Status';\nimport { useBuildWithSteps } from '../useBuildWithSteps';\nimport { useProjectSlugFromEntity } from '../useProjectSlugFromEntity';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 720,\n  },\n  table: {\n    padding: theme.spacing(1),\n  },\n  externalLinkIcon: {\n    fontSize: 'inherit',\n    verticalAlign: 'bottom',\n  },\n}));\n\nconst BuildWithStepsView = () => {\n  const projectName = useProjectSlugFromEntity();\n  const { branch, buildNumber } = useRouteRefParams(buildRouteRef);\n  const classes = useStyles();\n  const buildPath = `${projectName}/${branch}/${buildNumber}`;\n  const [{ value }] = useBuildWithSteps(buildPath);\n\n  return (\n    <div className={classes.root}>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link to=\"../../..\">Projects</Link>\n        <Typography>Run</Typography>\n      </Breadcrumbs>\n      <Box m={2} />\n      <TableContainer component={Paper} className={classes.table}>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Branch</Typography>\n              </TableCell>\n              <TableCell>{value?.source?.branchName}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Message</Typography>\n              </TableCell>\n              <TableCell>{value?.source?.displayName}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Commit ID</Typography>\n              </TableCell>\n              <TableCell>{value?.source?.commit?.hash}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Status</Typography>\n              </TableCell>\n              <TableCell>\n                <JenkinsRunStatus status={value?.status} />\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Author</Typography>\n              </TableCell>\n              <TableCell>{value?.source?.author}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Jenkins</Typography>\n              </TableCell>\n              <TableCell>\n                <MaterialLink target=\"_blank\" href={value?.buildUrl}>\n                  View on Jenkins{' '}\n                  <ExternalLinkIcon className={classes.externalLinkIcon} />\n                </MaterialLink>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>GitHub</Typography>\n              </TableCell>\n              <TableCell>\n                <MaterialLink target=\"_blank\" href={value?.source.url}>\n                  View on GitHub{' '}\n                  <ExternalLinkIcon className={classes.externalLinkIcon} />\n                </MaterialLink>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\nconst Page = () => (\n  <Content>\n    <BuildWithStepsView />\n  </Content>\n);\n\nexport default Page;\nexport { BuildWithStepsView as BuildWithSteps };\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport { Box, IconButton, Link, Typography, Tooltip } from '@material-ui/core';\nimport RetryIcon from '@material-ui/icons/Replay';\nimport JenkinsLogo from '../../../../assets/JenkinsLogo.svg';\nimport { generatePath, Link as RouterLink } from 'react-router-dom';\nimport { Table, TableColumn } from '@backstage/core';\nimport { JenkinsRunStatus } from '../Status';\nimport { useBuilds } from '../../../useBuilds';\nimport { useProjectSlugFromEntity } from '../../../useProjectSlugFromEntity';\nimport { buildRouteRef } from '../../../../plugin';\n\nexport type CITableBuildInfo = {\n  id: string;\n  buildName: string;\n  buildNumber: number;\n  buildUrl: string;\n  source: {\n    branchName: string;\n    url: string;\n    displayName: string;\n    author?: string;\n    commit: {\n      hash: string;\n    };\n  };\n  status: string;\n  tests?: {\n    total: number;\n    passed: number;\n    skipped: number;\n    failed: number;\n    testUrl: string;\n  };\n  onRestartClick: () => void;\n};\n\nconst FailCount = ({ count }: { count: number }): JSX.Element | null => {\n  if (count !== 0) {\n    return <>{count} failed</>;\n  }\n  return null;\n};\n\nconst SkippedCount = ({ count }: { count: number }): JSX.Element | null => {\n  if (count !== 0) {\n    return <>{count} skipped</>;\n  }\n  return null;\n};\n\nconst FailSkippedWidget = ({\n  skipped,\n  failed,\n}: {\n  skipped: number;\n  failed: number;\n}): JSX.Element | null => {\n  if (skipped === 0 && failed === 0) {\n    return null;\n  }\n\n  if (skipped !== 0 && failed !== 0) {\n    return (\n      <>\n        {' '}\n        (<FailCount count={failed} />, <SkippedCount count={skipped} />)\n      </>\n    );\n  }\n\n  if (failed !== 0) {\n    return (\n      <>\n        {' '}\n        (<FailCount count={failed} />)\n      </>\n    );\n  }\n\n  if (skipped !== 0) {\n    return (\n      <>\n        {' '}\n        (<SkippedCount count={skipped} />)\n      </>\n    );\n  }\n\n  return null;\n};\n\nconst generatedColumns: TableColumn[] = [\n  {\n    title: 'Build',\n    field: 'buildName',\n    highlight: true,\n    render: (row: Partial<CITableBuildInfo>) => {\n      if (!row.source?.branchName || !row.buildNumber) {\n        return <>{row.buildName}</>;\n      }\n\n      return (\n        <Link\n          component={RouterLink}\n          to={generatePath(buildRouteRef.path, {\n            branch: row.source.branchName,\n            buildNumber: row.buildNumber.toString(),\n          })}\n        >\n          {row.buildName}\n        </Link>\n      );\n    },\n  },\n  {\n    title: 'Source',\n    field: 'source.branchName',\n    render: (row: Partial<CITableBuildInfo>) => (\n      <>\n        <p>\n          <Link href={row.source?.url || ''} target=\"_blank\">\n            {row.source?.branchName}\n          </Link>\n        </p>\n        <p>{row.source?.commit?.hash}</p>\n      </>\n    ),\n  },\n  {\n    title: 'Status',\n    field: 'status',\n    render: (row: Partial<CITableBuildInfo>) => {\n      return (\n        <Box display=\"flex\" alignItems=\"center\">\n          <JenkinsRunStatus status={row.status} />\n        </Box>\n      );\n    },\n  },\n  {\n    title: 'Tests',\n    sorting: false,\n    render: (row: Partial<CITableBuildInfo>) => {\n      return (\n        <>\n          <p>\n            {row.tests && (\n              <Link href={row.tests.testUrl || ''} target=\"_blank\">\n                {row.tests.passed} / {row.tests.total} passed\n                <FailSkippedWidget\n                  skipped={row.tests.skipped}\n                  failed={row.tests.failed}\n                />\n              </Link>\n            )}\n\n            {!row.tests && 'n/a'}\n          </p>\n        </>\n      );\n    },\n  },\n  {\n    title: 'Actions',\n    sorting: false,\n    render: (row: Partial<CITableBuildInfo>) => (\n      <Tooltip title=\"Rerun build\">\n        <IconButton onClick={row.onRestartClick}>\n          <RetryIcon />\n        </IconButton>\n      </Tooltip>\n    ),\n    width: '10%',\n  },\n];\n\ntype Props = {\n  loading: boolean;\n  retry: () => void;\n  builds: CITableBuildInfo[];\n  projectName: string;\n  page: number;\n  onChangePage: (page: number) => void;\n  total: number;\n  pageSize: number;\n  onChangePageSize: (pageSize: number) => void;\n};\n\nexport const CITableView = ({\n  projectName,\n  loading,\n  pageSize,\n  page,\n  retry,\n  builds,\n  onChangePage,\n  onChangePageSize,\n  total,\n}: Props) => {\n  return (\n    <Table\n      isLoading={loading}\n      options={{ paging: true, pageSize, padding: 'dense' }}\n      totalCount={total}\n      page={page}\n      actions={[\n        {\n          icon: () => <RetryIcon />,\n          tooltip: 'Refresh Data',\n          isFreeAction: true,\n          onClick: () => retry(),\n        },\n      ]}\n      data={builds ?? []}\n      onChangePage={onChangePage}\n      onChangeRowsPerPage={onChangePageSize}\n      title={\n        <Box display=\"flex\" alignItems=\"center\">\n          <img src={JenkinsLogo} alt=\"Jenkins logo\" height=\"50px\" />\n          <Box mr={2} />\n          <Typography variant=\"h6\">Project: {projectName}</Typography>\n        </Box>\n      }\n      columns={generatedColumns}\n    />\n  );\n};\n\nexport const CITable = () => {\n  const projectName = useProjectSlugFromEntity();\n\n  const [tableProps, { setPage, retry, setPageSize }] = useBuilds(projectName);\n\n  return (\n    <CITableView\n      {...tableProps}\n      retry={retry}\n      onChangePageSize={setPageSize}\n      onChangePage={setPage}\n    />\n  );\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport { Route, Routes } from 'react-router';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { buildRouteRef, rootRouteRef } from '../plugin';\nimport { DetailedViewPage } from './BuildWithStepsPage/';\nimport { JENKINS_ANNOTATION } from '../constants';\nimport { Entity } from '@backstage/catalog-model';\nimport { MissingAnnotationEmptyState } from '@backstage/core';\nimport { CITable } from './BuildsPage/lib/CITable';\n\nexport const isJenkinsAvailable = (entity: Entity) =>\n  Boolean(entity.metadata.annotations?.[JENKINS_ANNOTATION]);\n\ntype Props = {\n  /** @deprecated The entity is now grabbed from context instead */\n  entity?: Entity;\n};\n\nexport const Router = (_props: Props) => {\n  const { entity } = useEntity();\n\n  if (!isJenkinsAvailable(entity)) {\n    return <MissingAnnotationEmptyState annotation={JENKINS_ANNOTATION} />;\n  }\n\n  return (\n    <Routes>\n      <Route path={`/${rootRouteRef.path}`} element={<CITable />} />\n      <Route path={`/${buildRouteRef.path}`} element={<DetailedViewPage />} />\n    </Routes>\n  );\n};\n"],"names":["useStyles","makeStyles","Link","MaterialLink","RouterLink","Table","DetailedViewPage"],"mappings":"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"}