'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendCommon = require('@backstage/backend-common');
var express = require('express');
var Router = require('express-promise-router');
var fs = require('fs-extra');
var path = require('path');
var configLoader = require('@backstage/config-loader');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var Router__default = /*#__PURE__*/_interopDefaultLegacy(Router);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

async function injectConfig(options) {
  const {staticDir, logger, appConfigs} = options;
  const files = await fs__default['default'].readdir(staticDir);
  const jsFiles = files.filter((file) => file.endsWith(".js"));
  const escapedData = JSON.stringify(appConfigs).replace(/("|'|\\)/g, "\\$1");
  const injected = `/*__APP_INJECTED_CONFIG_MARKER__*/"${escapedData}"/*__INJECTED_END__*/`;
  for (const jsFile of jsFiles) {
    const path$1 = path.resolve(staticDir, jsFile);
    const content = await fs__default['default'].readFile(path$1, "utf8");
    if (content.includes("__APP_INJECTED_RUNTIME_CONFIG__")) {
      logger.info(`Injecting env config into ${jsFile}`);
      const newContent = content.replace('"__APP_INJECTED_RUNTIME_CONFIG__"', injected);
      await fs__default['default'].writeFile(path$1, newContent, "utf8");
      return;
    } else if (content.includes("__APP_INJECTED_CONFIG_MARKER__")) {
      logger.info(`Replacing injected env config in ${jsFile}`);
      const newContent = content.replace(/\/\*__APP_INJECTED_CONFIG_MARKER__\*\/.*\/\*__INJECTED_END__\*\//, injected);
      await fs__default['default'].writeFile(path$1, newContent, "utf8");
      return;
    }
  }
  logger.info("Env config not injected");
}
async function readConfigs(options) {
  const {env, appDistDir, config} = options;
  const appConfigs = configLoader.readEnvConfig(env);
  const schemaPath = path.resolve(appDistDir, ".config-schema.json");
  if (await fs__default['default'].pathExists(schemaPath)) {
    const serializedSchema = await fs__default['default'].readJson(schemaPath);
    try {
      const schema = await configLoader.loadConfigSchema({serialized: serializedSchema});
      const frontendConfigs = await schema.process([{data: config.get(), context: "app"}], {visibility: ["frontend"]});
      appConfigs.push(...frontendConfigs);
    } catch (error) {
      throw new Error(`Invalid app bundle schema. If this error is unexpected you need to run \`yarn build\` in the app. If that doesn't help you should make sure your config schema is correct and rebuild the app bundle again. Caused by the following schema error, ${error}`);
    }
  }
  return appConfigs;
}

async function createRouter(options) {
  const {config, logger, appPackageName, staticFallbackHandler} = options;
  const appDistDir = backendCommon.resolvePackagePath(appPackageName, "dist");
  const staticDir = path.resolve(appDistDir, "static");
  if (!await fs__default['default'].pathExists(staticDir)) {
    logger.warn(`Can't serve static app content from ${staticDir}, directory doesn't exist`);
    return Router__default['default']();
  }
  logger.info(`Serving static app content from ${appDistDir}`);
  if (!options.disableConfigInjection) {
    const appConfigs = await readConfigs({
      config,
      appDistDir,
      env: process.env
    });
    await injectConfig({appConfigs, logger, staticDir});
  }
  const router = Router__default['default']();
  const staticRouter = Router__default['default']();
  staticRouter.use(express__default['default'].static(path.resolve(appDistDir, "static")));
  if (staticFallbackHandler) {
    staticRouter.use(staticFallbackHandler);
  }
  staticRouter.use(backendCommon.notFoundHandler());
  router.use("/static", staticRouter);
  router.use(express__default['default'].static(appDistDir, {
    setHeaders: (res, path) => {
      if (express__default['default'].static.mime.lookup(path) === "text/html") {
        res.setHeader("Cache-Control", "no-store, max-age=0");
      }
    }
  }));
  router.get("/*", (_req, res) => {
    res.sendFile(path.resolve(appDistDir, "index.html"), {
      headers: {
        "cache-control": "no-store, max-age=0"
      }
    });
  });
  return router;
}

exports.createRouter = createRouter;
//# sourceMappingURL=index.cjs.js.map
