var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useState, useCallback } from 'react';
import createUseContext from 'constate';
var useExpandedState = function (_a) {
    var numberOfElements = _a.numberOfElements, _b = _a.numberOfExpandedElement, initialNumberOfExpandedElement = _b === void 0 ? 0 : _b;
    var _c = useState(false), expanded = _c[0], setExpanded = _c[1];
    var _d = useState(initialNumberOfExpandedElement), numberOfExpanded = _d[0], setNumberOfExpanded = _d[1];
    var _e = useState({
        label: '',
        itemName: '',
        state: false,
        scroll: false,
    }), clickedItem = _e[0], setClickedItem = _e[1];
    var _f = useState(false), scrollToView = _f[0], setScrollToView = _f[1];
    var clickItem = useCallback(function (_a) {
        var label = _a.label, rest = __rest(_a, ["label"]);
        if (label) {
            setClickedItem(__assign({ label: label }, rest));
        }
    }, []);
    return {
        expanded: expanded,
        setExpanded: setExpanded,
        numberOfElements: numberOfElements,
        numberOfExpanded: numberOfExpanded,
        setNumberOfExpanded: setNumberOfExpanded,
        clickedItem: clickedItem,
        setClickedItem: clickItem,
        scrollToView: scrollToView,
        setScrollToView: setScrollToView,
    };
};
export var useExpandedContext = createUseContext(useExpandedState);
//# sourceMappingURL=useExpandedState.js.map