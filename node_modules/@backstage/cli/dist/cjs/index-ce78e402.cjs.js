'use strict';

var program = require('commander');
var chalk = require('chalk');
var fs = require('fs-extra');
var cliCommon = require('@backstage/cli-common');
var package_json = require('@backstage/config/package.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var program__default = /*#__PURE__*/_interopDefaultLegacy(program);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

class CustomError extends Error {
  get name() {
    return this.constructor.name;
  }
}
class ExitCodeError extends CustomError {
  constructor(code, command) {
    if (command) {
      super(`Command '${command}' exited with code ${code}`);
    } else {
      super(`Child exited with code ${code}`);
    }
    this.code = code;
  }
}
function exitWithError(error) {
  if (error instanceof ExitCodeError) {
    process.stderr.write(`
${chalk__default['default'].red(error.message)}

`);
    process.exit(error.code);
  } else {
    process.stderr.write(`
${chalk__default['default'].red(`${error}`)}

`);
    process.exit(1);
  }
}
class NotFoundError extends CustomError {
}

const paths = cliCommon.findPaths(__dirname);

var version = "0.8.1";

var version$1 = "0.6.12";

var version$2 = "0.7.10";

var version$3 = "0.1.15";

var version$4 = "0.1.12";

var version$5 = "0.2.7";

const packageVersions = {
  "@backstage/backend-common": version,
  "@backstage/cli": version$1,
  "@backstage/config": package_json.version,
  "@backstage/core": version$2,
  "@backstage/dev-utils": version$3,
  "@backstage/test-utils": version$4,
  "@backstage/theme": version$5
};
function findVersion() {
  const pkgContent = fs__default['default'].readFileSync(paths.resolveOwn("package.json"), "utf8");
  return JSON.parse(pkgContent).version;
}
const version$6 = findVersion();
const isDev = fs__default['default'].pathExistsSync(paths.resolveOwn("src"));

function registerCommands(program) {
  const configOption = [
    "--config <path>",
    "Config files to load instead of app-config.yaml",
    (opt, opts) => [...opts, opt],
    Array()
  ];
  program.command("app:build").description("Build an app for a production release").option("--stats", "Write bundle stats to output directory").option("--lax", "Do not require environment variables to be set").option(...configOption).action(lazy(() => Promise.resolve().then(function () { return require('./build-88659183.cjs.js'); }).then((m) => m.default)));
  program.command("app:serve").description("Serve an app for local development").option("--check", "Enable type checking and linting").option(...configOption).action(lazy(() => Promise.resolve().then(function () { return require('./serve-91df4e51.cjs.js'); }).then((m) => m.default)));
  program.command("backend:build").description("Build a backend plugin").action(lazy(() => Promise.resolve().then(function () { return require('./build-983f421b.cjs.js'); }).then((m) => m.default)));
  program.command("backend:bundle").description("Bundle the backend into a deployment archive").option("--build-dependencies", "Build all local package dependencies before bundling the backend").action(lazy(() => Promise.resolve().then(function () { return require('./bundle-df1da40b.cjs.js'); }).then((m) => m.default)));
  program.command("backend:build-image").allowUnknownOption(true).helpOption(", --backstage-cli-help").option("--build", "Build packages before packing them into the image").description("Bundles the package into a docker image. All extra args are forwarded to `docker image build`.").action(lazy(() => Promise.resolve().then(function () { return require('./buildImage-bb48c928.cjs.js'); }).then((m) => m.default)));
  program.command("backend:dev").description("Start local development server with HMR for the backend").option("--check", "Enable type checking and linting").option("--inspect", "Enable debugger").option(...configOption).action(lazy(() => Promise.resolve().then(function () { return require('./dev-6fe19e5a.cjs.js'); }).then((m) => m.default)));
  program.command("create-plugin").option("--backend", "Create plugin with the backend dependencies as default").description("Creates a new plugin in the current repository").option("--scope <scope>", "npm scope").option("--npm-registry <URL>", "npm registry URL").option("--no-private", "Public npm package").action(lazy(() => Promise.resolve().then(function () { return require('./createPlugin-7f711933.cjs.js'); }).then((m) => m.default)));
  program.command("remove-plugin").description("Removes plugin in the current repository").action(lazy(() => Promise.resolve().then(function () { return require('./removePlugin-13cb3506.cjs.js'); }).then((m) => m.default)));
  program.command("plugin:build").description("Build a plugin").action(lazy(() => Promise.resolve().then(function () { return require('./build-a0c22a85.cjs.js'); }).then((m) => m.default)));
  program.command("plugin:serve").description("Serves the dev/ folder of a plugin").option("--check", "Enable type checking and linting").option(...configOption).action(lazy(() => Promise.resolve().then(function () { return require('./serve-c2e6c464.cjs.js'); }).then((m) => m.default)));
  program.command("plugin:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing plugin with the creation template").action(lazy(() => Promise.resolve().then(function () { return require('./diff-5a4ed3e7.cjs.js'); }).then((m) => m.default)));
  program.command("build").description("Build a package for publishing").option("--outputs <formats>", "List of formats to output [types,cjs,esm]").action(lazy(() => Promise.resolve().then(function () { return require('./build-db924a74.cjs.js'); }).then((m) => m.default)));
  program.command("lint").option("--format <format>", "Lint report output format", "eslint-formatter-friendly").option("--fix", "Attempt to automatically fix violations").description("Lint a package").action(lazy(() => Promise.resolve().then(function () { return require('./lint-f92dec1f.cjs.js'); }).then((m) => m.default)));
  program.command("test").allowUnknownOption(true).helpOption(", --backstage-cli-help").description("Run tests, forwarding args to Jest, defaulting to watch mode").action(lazy(() => Promise.resolve().then(function () { return require('./testCommand-28915798.cjs.js'); }).then((m) => m.default)));
  program.command("config:docs").option("--package <name>", "Only include the schema that applies to the given package").description("Browse the configuration reference documentation").action(lazy(() => Promise.resolve().then(function () { return require('./docs-7ce6294f.cjs.js'); }).then((m) => m.default)));
  program.command("config:print").option("--package <name>", "Only load config schema that applies to the given package").option("--lax", "Do not require environment variables to be set").option("--frontend", "Print only the frontend configuration").option("--with-secrets", "Include secrets in the printed configuration").option("--format <format>", "Format to print the configuration in, either json or yaml [yaml]").option(...configOption).description("Print the app configuration for the current package").action(lazy(() => Promise.resolve().then(function () { return require('./print-4d680b52.cjs.js'); }).then((m) => m.default)));
  program.command("config:check").option("--package <name>", "Only load config schema that applies to the given package").option("--lax", "Do not require environment variables to be set").option(...configOption).description("Validate that the given configuration loads and matches schema").action(lazy(() => Promise.resolve().then(function () { return require('./validate-2eb9807a.cjs.js'); }).then((m) => m.default)));
  program.command("config:schema").option("--package <name>", "Only output config schema that applies to the given package").option("--format <format>", "Format to print the schema in, either json or yaml [yaml]").description("Print configuration schema").action(lazy(() => Promise.resolve().then(function () { return require('./schema-401b3d95.cjs.js'); }).then((m) => m.default)));
  program.command("versions:bump").description("Bump Backstage packages to the latest versions").action(lazy(() => Promise.resolve().then(function () { return require('./bump-49d4f056.cjs.js'); }).then((m) => m.default)));
  program.command("versions:check").option("--fix", "Fix any auto-fixable versioning problems").description("Check Backstage package versioning").action(lazy(() => Promise.resolve().then(function () { return require('./lint-e7ba3595.cjs.js'); }).then(function (n) { return n.lint; }).then((m) => m.default)));
  program.command("prepack").description("Prepares a package for packaging before publishing").action(lazy(() => Promise.resolve().then(function () { return require('./pack-b17823db.cjs.js'); }).then((m) => m.pre)));
  program.command("postpack").description("Restores the changes made by the prepack command").action(lazy(() => Promise.resolve().then(function () { return require('./pack-b17823db.cjs.js'); }).then((m) => m.post)));
  program.command("clean").description("Delete cache directories").action(lazy(() => Promise.resolve().then(function () { return require('./clean-188de87e.cjs.js'); }).then((m) => m.default)));
  program.command("build-workspace <workspace-dir> ...<packages>").description("Builds a temporary dist workspace from the provided packages").action(lazy(() => Promise.resolve().then(function () { return require('./buildWorkspace-db42b727.cjs.js'); }).then((m) => m.default)));
  program.command("create-github-app <github-org>", {hidden: true}).description("Create new GitHub App in your organization. This command is experimental and may change in the future.").action(lazy(() => Promise.resolve().then(function () { return require('./index-854ac424.cjs.js'); }).then((m) => m.default)));
}
function lazy(getActionFunc) {
  return async (...args) => {
    try {
      const actionFunc = await getActionFunc();
      await actionFunc(...args);
      process.exit(0);
    } catch (error) {
      exitWithError(error);
    }
  };
}

const main = (argv) => {
  program__default['default'].name("backstage-cli").version(version$6);
  registerCommands(program__default['default']);
  program__default['default'].on("command:*", () => {
    console.log();
    console.log(chalk__default['default'].red(`Invalid command: ${program__default['default'].args.join(" ")}`));
    console.log();
    program__default['default'].outputHelp();
    process.exit(1);
  });
  program__default['default'].parse(argv);
};
process.on("unhandledRejection", (rejection) => {
  if (rejection instanceof Error) {
    exitWithError(rejection);
  } else {
    exitWithError(new Error(`Unknown rejection: '${rejection}'`));
  }
});
main(process.argv);

exports.ExitCodeError = ExitCodeError;
exports.NotFoundError = NotFoundError;
exports.packageVersions = packageVersions;
exports.paths = paths;
exports.version = version$6;
//# sourceMappingURL=index-ce78e402.cjs.js.map
