/// <reference types="react" />
import { CatalogApi } from '@backstage/catalog-client';
export { CatalogApi } from '@backstage/catalog-client';
import { ApiRef, LinkProps, TableColumn, RouteRef } from '@backstage/core';
import { Entity, EntityName, SystemEntity, ComponentEntity } from '@backstage/catalog-model';
import React, { ReactNode, Context } from 'react';

declare const catalogApiRef: ApiRef<CatalogApi>;

declare type EntityProviderProps = {
    entity: Entity;
    children: ReactNode;
};
declare const EntityProvider: ({ entity, children }: EntityProviderProps) => JSX.Element;

declare type EntityRefLinkProps = {
    entityRef: Entity | EntityName;
    defaultKind?: string;
    children?: React.ReactNode;
} & Omit<LinkProps, 'to'>;
declare const EntityRefLink: React.ForwardRefExoticComponent<Pick<EntityRefLinkProps, "replace" | "media" | "hidden" | "dir" | "slot" | "style" | "title" | "color" | "underline" | "children" | "key" | "id" | "display" | "translate" | "prefix" | "classes" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "draggable" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "component" | "variant" | "innerRef" | "download" | "href" | "hrefLang" | "ping" | "rel" | "target" | "type" | "referrerPolicy" | "noWrap" | "gutterBottom" | "paragraph" | "align" | "variantMapping" | "state" | "TypographyClasses" | "entityRef" | "defaultKind"> & React.RefAttributes<any>>;

declare type EntityRefLinksProps = {
    entityRefs: (Entity | EntityName)[];
    defaultKind?: string;
} & Omit<LinkProps, 'to'>;
declare const EntityRefLinks: ({ entityRefs, defaultKind, ...linkProps }: EntityRefLinksProps) => JSX.Element;

declare function formatEntityRefTitle(entityRef: Entity | EntityName, opts?: {
    defaultKind?: string;
}): string;

declare function createEntityRefColumn<T extends Entity>({ defaultKind, }: {
    defaultKind?: string;
}): TableColumn<T>;
declare function createEntityRelationColumn<T extends Entity>({ title, relation, defaultKind, filter: entityFilter, }: {
    title: string;
    relation: string;
    defaultKind?: string;
    filter?: {
        kind: string;
    };
}): TableColumn<T>;
declare function createOwnerColumn<T extends Entity>(): TableColumn<T>;
declare function createDomainColumn<T extends Entity>(): TableColumn<T>;
declare function createSystemColumn<T extends Entity>(): TableColumn<T>;
declare function createMetadataDescriptionColumn<T extends Entity>(): TableColumn<T>;
declare function createSpecLifecycleColumn<T extends Entity>(): TableColumn<T>;
declare function createSpecTypeColumn<T extends Entity>(): TableColumn<T>;

declare const columnFactories_createEntityRefColumn: typeof createEntityRefColumn;
declare const columnFactories_createEntityRelationColumn: typeof createEntityRelationColumn;
declare const columnFactories_createOwnerColumn: typeof createOwnerColumn;
declare const columnFactories_createDomainColumn: typeof createDomainColumn;
declare const columnFactories_createSystemColumn: typeof createSystemColumn;
declare const columnFactories_createMetadataDescriptionColumn: typeof createMetadataDescriptionColumn;
declare const columnFactories_createSpecLifecycleColumn: typeof createSpecLifecycleColumn;
declare const columnFactories_createSpecTypeColumn: typeof createSpecTypeColumn;
declare namespace columnFactories {
  export {
    columnFactories_createEntityRefColumn as createEntityRefColumn,
    columnFactories_createEntityRelationColumn as createEntityRelationColumn,
    columnFactories_createOwnerColumn as createOwnerColumn,
    columnFactories_createDomainColumn as createDomainColumn,
    columnFactories_createSystemColumn as createSystemColumn,
    columnFactories_createMetadataDescriptionColumn as createMetadataDescriptionColumn,
    columnFactories_createSpecLifecycleColumn as createSpecLifecycleColumn,
    columnFactories_createSpecTypeColumn as createSpecTypeColumn,
  };
}

declare type Props<T extends Entity> = {
    title: string;
    variant?: 'gridItem';
    entities: T[];
    emptyContent?: ReactNode;
    columns: TableColumn<T>[];
};
declare function EntityTable<T extends Entity>({ entities, title, emptyContent, variant, columns, }: Props<T>): JSX.Element;
declare namespace EntityTable {
    var columns: typeof columnFactories;
    var systemEntityColumns: TableColumn<SystemEntity>[];
    var componentEntityColumns: TableColumn<ComponentEntity>[];
}

declare type EntityLoadingStatus = {
    entity?: Entity;
    loading: boolean;
    error?: Error;
};
declare const EntityContext: Context<EntityLoadingStatus>;
declare const useEntityFromUrl: () => EntityLoadingStatus;
/**
 * Grab the current entity from the context and its current loading state.
 */
declare function useEntity<T extends Entity = Entity>(): {
    entity: T;
    loading: boolean;
    error: Error | undefined;
};

/**
 * Grabs entity kind, namespace, and name from the location
 */
declare const useEntityCompoundName: () => {
    kind: string;
    namespace: string;
    name: string;
};

declare function useRelatedEntities(entity: Entity, { type, kind }: {
    type?: string;
    kind?: string;
}): {
    entities: Entity[] | undefined;
    loading: boolean;
    error: Error | undefined;
};

declare const useStarredEntities: () => {
    starredEntities: Set<string>;
    toggleStarredEntity: (entity: Entity) => void;
    isStarredEntity: (entity: Entity) => boolean;
};

declare const rootRoute: RouteRef<undefined>;
declare const catalogRouteRef: RouteRef<undefined>;
declare const entityRoute: RouteRef<{
    name: string;
    kind: string;
    namespace: string;
}>;
declare const entityRouteRef: RouteRef<{
    name: string;
    kind: string;
    namespace: string;
}>;
declare function entityRouteParams(entity: Entity): {
    readonly kind: string;
    readonly namespace: string;
    readonly name: string;
};

/**
 * Get the related entity references.
 */
declare function getEntityRelations(entity: Entity | undefined, relationType: string, filter?: {
    kind: string;
}): EntityName[];

/**
 * Get the related entity references.
 */
declare function isOwnerOf(owner: Entity, owned: Entity): boolean;

export { EntityContext, EntityProvider, EntityRefLink, EntityRefLinks, EntityTable, catalogApiRef, catalogRouteRef, entityRoute, entityRouteParams, entityRouteRef, formatEntityRefTitle, getEntityRelations, isOwnerOf, rootRoute, useEntity, useEntityCompoundName, useEntityFromUrl, useRelatedEntities, useStarredEntities };
