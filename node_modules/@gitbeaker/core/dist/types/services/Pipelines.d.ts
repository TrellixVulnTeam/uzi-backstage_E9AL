import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
export declare type PipelineStatus = 'created' | 'waiting_for_resource' | 'preparing' | 'pending' | 'running' | 'failed' | 'success' | 'canceled' | 'skipped' | 'manual' | 'scheduled';
export interface PipelineBase {
    id: number;
    sha: string;
    ref: string;
    status: PipelineStatus;
}
export interface PipelineSchemaDefault extends PipelineBase {
    created_at: Date;
    updated_at: Date;
    web_url: string;
}
export interface PipelineSchemaCamelized extends PipelineBase {
    createdAt: Date;
    updatedAt: Date;
    webUrl: string;
}
export declare type PipelineSchema = PipelineSchemaDefault | PipelineSchemaCamelized;
export declare class Pipelines extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    create(projectId: string | number, ref: string, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    delete(projectId: string | number, pipelineId: number, options?: Sudo): Promise<Record<string, unknown>>;
    show(projectId: string | number, pipelineId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    retry(projectId: string | number, pipelineId: number, options?: Sudo): Promise<Record<string, unknown>>;
    cancel(projectId: string | number, pipelineId: number, options?: Sudo): Promise<Record<string, unknown>>;
    allVariables(projectId: string | number, pipelineId: number, options?: PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
}
