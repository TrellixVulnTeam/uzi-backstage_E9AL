/// <reference types="react" />
import { Entity, EntityName } from '@backstage/catalog-model';
import { IconComponent, TableColumn, BackstagePlugin, RouteRef, ExternalRouteRef } from '@backstage/core';
import { TabProps } from '@material-ui/core';
import React, { PropsWithChildren, ReactNode } from 'react';

declare type AboutCardProps = {
    /** @deprecated The entity is now grabbed from context instead */
    entity?: Entity;
    variant?: 'gridItem';
};
declare function AboutCard({ variant }: AboutCardProps): JSX.Element;

declare type SubRoute = {
    path: string;
    title: string;
    children: JSX.Element;
    if?: (entity: Entity) => boolean;
    tabProps?: TabProps<React.ElementType, {
        component?: React.ElementType;
    }>;
};
declare type ExtraContextMenuItem = {
    title: string;
    Icon: IconComponent;
    onClick: () => void;
};
declare type EntityLayoutProps = {
    UNSTABLE_extraContextMenuItems?: ExtraContextMenuItem[];
    children?: React.ReactNode;
};
/**
 * EntityLayout is a compound component, which allows you to define a layout for
 * entities using a sub-navigation mechanism.
 *
 * Consists of two parts: EntityLayout and EntityLayout.Route
 *
 * @example
 * ```jsx
 * <EntityLayout>
 *   <EntityLayout.Route path="/example" title="Example tab">
 *     <div>This is rendered under /example/anything-here route</div>
 *   </EntityLayout.Route>
 * </EntityLayout>
 * ```
 */
declare const EntityLayout: {
    ({ UNSTABLE_extraContextMenuItems, children, }: EntityLayoutProps): JSX.Element;
    Route: (props: SubRoute) => null;
};

declare type ExtraContextMenuItem$1 = {
    title: string;
    Icon: IconComponent;
    onClick: () => void;
};
declare type EntityPageLayoutProps = {
    UNSTABLE_extraContextMenuItems?: ExtraContextMenuItem$1[];
    children?: React.ReactNode;
};
declare const EntityPageLayout: {
    ({ children, UNSTABLE_extraContextMenuItems, }: EntityPageLayoutProps): JSX.Element;
    Content: (_props: {
        path: string;
        title: string;
        element: JSX.Element;
    }) => null;
};

declare type EntityRow = {
    entity: Entity;
    resolved: {
        name: string;
        partOfSystemRelationTitle?: string;
        partOfSystemRelations: EntityName[];
        ownedByRelationsTitle?: string;
        ownedByRelations: EntityName[];
    };
};

declare function createNameColumn(): TableColumn<EntityRow>;
declare function createSystemColumn(): TableColumn<EntityRow>;
declare function createOwnerColumn(): TableColumn<EntityRow>;
declare function createSpecTypeColumn(): TableColumn<EntityRow>;
declare function createSpecLifecycleColumn(): TableColumn<EntityRow>;
declare function createMetadataDescriptionColumn(): TableColumn<EntityRow>;
declare function createTagsColumn(): TableColumn<EntityRow>;

declare const columnFactories_createNameColumn: typeof createNameColumn;
declare const columnFactories_createSystemColumn: typeof createSystemColumn;
declare const columnFactories_createOwnerColumn: typeof createOwnerColumn;
declare const columnFactories_createSpecTypeColumn: typeof createSpecTypeColumn;
declare const columnFactories_createSpecLifecycleColumn: typeof createSpecLifecycleColumn;
declare const columnFactories_createMetadataDescriptionColumn: typeof createMetadataDescriptionColumn;
declare const columnFactories_createTagsColumn: typeof createTagsColumn;
declare namespace columnFactories {
  export {
    columnFactories_createNameColumn as createNameColumn,
    columnFactories_createSystemColumn as createSystemColumn,
    columnFactories_createOwnerColumn as createOwnerColumn,
    columnFactories_createSpecTypeColumn as createSpecTypeColumn,
    columnFactories_createSpecLifecycleColumn as createSpecLifecycleColumn,
    columnFactories_createMetadataDescriptionColumn as createMetadataDescriptionColumn,
    columnFactories_createTagsColumn as createTagsColumn,
  };
}

declare type CatalogTableProps = {
    entities: Entity[];
    titlePreamble: string;
    loading: boolean;
    error?: any;
    view?: string;
    columns?: TableColumn<EntityRow>[];
};
declare const CatalogTable: {
    ({ entities, loading, error, titlePreamble, view, columns, }: CatalogTableProps): JSX.Element;
    columns: typeof columnFactories;
};

declare const EntitySwitch: {
    ({ children }: PropsWithChildren<{}>): JSX.Element | null;
    Case: (_: {
        if?: ((entity: Entity) => boolean) | undefined;
        children: ReactNode;
    }) => null;
};

declare function isKind(kind: string): (entity: Entity) => boolean;
declare function isComponentType(type: string): (entity: Entity) => boolean;
declare function isNamespace(namespace: string): (entity: Entity) => boolean;

declare const Router: ({ EntityPage, }: {
    EntityPage?: React.ComponentType<{}> | undefined;
}) => JSX.Element;

/**
 * Dynamically generates a diagram of a system, its assigned entities,
 * and relationships of those entities.
 */
declare function SystemDiagramCard(): JSX.Element;

declare type Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
declare type ColumnBreakpoints = Record<Breakpoint, number>;

declare type CatalogPageProps = {
    initiallySelectedFilter?: string;
    columns?: TableColumn<EntityRow>[];
};

declare const catalogPlugin: BackstagePlugin<{
    catalogIndex: RouteRef<undefined>;
    catalogEntity: RouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
}, {
    createComponent: ExternalRouteRef<undefined, true>;
}>;
declare const CatalogIndexPage: (props: CatalogPageProps) => JSX.Element;
declare const CatalogEntityPage: () => JSX.Element;
declare const EntityAboutCard: typeof AboutCard;
declare const EntityLinksCard: ({ cols, variant }: {
    entity?: Entity | undefined;
    cols?: number | ColumnBreakpoints | undefined;
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityHasSystemsCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityHasComponentsCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityHasSubcomponentsCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityHasResourcesCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityDependsOnComponentsCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntityDependsOnResourcesCard: ({ variant }: {
    variant?: "gridItem" | undefined;
}) => JSX.Element;
declare const EntitySystemDiagramCard: typeof SystemDiagramCard;

declare const isOrphan: (entity: Entity) => boolean;
/**
 * Displays a warning alert if the entity is marked as orphan with the ability to delete said entity.
 */
declare const EntityOrphanWarning: () => JSX.Element;

export { AboutCard, CatalogEntityPage, CatalogIndexPage, CatalogTable, EntityAboutCard, EntityDependsOnComponentsCard, EntityDependsOnResourcesCard, EntityHasComponentsCard, EntityHasResourcesCard, EntityHasSubcomponentsCard, EntityHasSystemsCard, EntityLayout, EntityLinksCard, EntityOrphanWarning, EntityPageLayout, EntitySwitch, EntitySystemDiagramCard, Router, catalogPlugin, isComponentType, isKind, isNamespace, isOrphan, catalogPlugin as plugin };
