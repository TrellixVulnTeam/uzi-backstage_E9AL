'use strict';

var index = require('./index-ce78e402.cjs.js');
var configLoader = require('@backstage/config-loader');
var config = require('@backstage/config');

async function loadCliConfig(options) {
  const configPaths = options.args.map((arg) => index.paths.resolveTarget(arg));
  const {Project} = require("@lerna/project");
  const project = new Project(index.paths.targetDir);
  const packages = await project.getPackages();
  const localPackageNames = options.fromPackage ? findPackages(packages, options.fromPackage) : packages.map((p) => p.name);
  const schema = await configLoader.loadConfigSchema({
    dependencies: localPackageNames
  });
  const appConfigs = await configLoader.loadConfig({
    experimentalEnvFunc: options.mockEnv ? async (name) => process.env[name] || "x" : void 0,
    configRoot: index.paths.targetRoot,
    configPaths
  });
  process.stderr.write(`Loaded config from ${appConfigs.map((c) => c.context).join(", ")}
`);
  try {
    const frontendAppConfigs = schema.process(appConfigs, {
      visibility: ["frontend"]
    });
    const frontendConfig = config.ConfigReader.fromConfigs(frontendAppConfigs);
    return {
      schema,
      appConfigs,
      frontendConfig,
      frontendAppConfigs
    };
  } catch (error) {
    const maybeSchemaError = error;
    if (maybeSchemaError.messages) {
      const messages = maybeSchemaError.messages.join("\n  ");
      throw new Error(`Configuration does not match schema

  ${messages}`);
    }
    throw error;
  }
}
function findPackages(packages, fromPackage) {
  const {PackageGraph} = require("@lerna/package-graph");
  const graph = new PackageGraph(packages);
  const targets = new Set();
  const searchNames = [fromPackage];
  while (searchNames.length) {
    const name = searchNames.pop();
    if (targets.has(name)) {
      continue;
    }
    const node = graph.get(name);
    if (!node) {
      throw new Error(`Package '${name}' not found`);
    }
    targets.add(name);
    if (name !== "@backstage/cli") {
      searchNames.push(...node.localDependencies.keys());
    }
  }
  return Array.from(targets);
}

exports.loadCliConfig = loadCliConfig;
//# sourceMappingURL=config-3e44dd06.cjs.js.map
