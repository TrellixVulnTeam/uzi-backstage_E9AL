'use strict';

require('commander');
var chalk = require('chalk');
var index = require('./index-ce78e402.cjs.js');
var fs = require('fs-extra');
require('@backstage/cli-common');
require('@backstage/config/package.json');
var webpack = require('webpack');
var path = require('path');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('react-dev-utils/ModuleScopePlugin');
require('start-server-webpack-plugin');
require('webpack-node-externals');
require('terser-webpack-plugin');
var parallel = require('./parallel-a4714c72.cjs.js');
var config = require('./config-ead78a79.cjs.js');
require('mini-css-extract-plugin');
require('./svgrTemplate-2d0d15cf.cjs.js');
require('child_process');
require('util');
require('./run-646af88e.cjs.js');
var yn = require('yn');
var FileSizeReporter = require('react-dev-utils/FileSizeReporter');
var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
require('webpack-dev-server');
require('react-dev-utils/openBrowser');
require('@backstage/config-loader');
require('@backstage/config');
var config$1 = require('./config-3e44dd06.cjs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var webpack__default = /*#__PURE__*/_interopDefaultLegacy(webpack);
var yn__default = /*#__PURE__*/_interopDefaultLegacy(yn);
var formatWebpackMessages__default = /*#__PURE__*/_interopDefaultLegacy(formatWebpackMessages);

const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;
async function buildBundle(options) {
  const {statsJsonEnabled, schema: configSchema} = options;
  const paths = config.resolveBundlingPaths(options);
  const config$1 = await config.createConfig(paths, {
    ...options,
    checksEnabled: false,
    isDev: false,
    baseUrl: config.resolveBaseUrl(options.frontendConfig)
  });
  const compiler = webpack__default['default'](config$1);
  const isCi = yn__default['default'](process.env.CI, {default: false});
  const previousFileSizes = await FileSizeReporter.measureFileSizesBeforeBuild(paths.targetDist);
  await fs__default['default'].emptyDir(paths.targetDist);
  if (paths.targetPublic) {
    await fs__default['default'].copy(paths.targetPublic, paths.targetDist, {
      dereference: true,
      filter: (file) => file !== paths.targetHtml
    });
  }
  if (configSchema) {
    await fs__default['default'].writeJson(path.resolve(paths.targetDist, ".config-schema.json"), configSchema.serialize(), {spaces: 2});
  }
  const {stats} = await build(compiler, isCi).catch((error) => {
    console.log(chalk__default['default'].red("Failed to compile.\n"));
    throw new Error(`Failed to compile.
${error.message || error}`);
  });
  if (statsJsonEnabled) {
    await require("bfj").write(path.resolve(paths.targetDist, "bundle-stats.json"), stats.toJson());
  }
  FileSizeReporter.printFileSizesAfterBuild(stats, previousFileSizes, paths.targetDist, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);
}
async function build(compiler, isCi) {
  const stats = await new Promise((resolve, reject) => {
    compiler.run((err, buildStats) => {
      if (err) {
        if (err.message) {
          const {errors: errors2} = formatWebpackMessages__default['default']({
            errors: [err.message],
            warnings: new Array()
          });
          throw new Error(errors2[0]);
        } else {
          reject(err);
        }
      } else {
        resolve(buildStats);
      }
    });
  });
  const {errors, warnings} = formatWebpackMessages__default['default'](stats.toJson({all: false, warnings: true, errors: true}));
  if (errors.length) {
    throw new Error(errors[0]);
  }
  if (isCi && warnings.length) {
    console.log(chalk__default['default'].yellow("\nTreating warnings as errors because process.env.CI = true.\n"));
    throw new Error(warnings.join("\n\n"));
  }
  return {stats};
}

var build$1 = async (cmd) => {
  const {name} = await fs__default['default'].readJson(index.paths.resolveTarget("package.json"));
  await buildBundle({
    entry: "src/index",
    parallel: parallel.parseParallel(process.env[parallel.PARALLEL_ENV_VAR]),
    statsJsonEnabled: cmd.stats,
    ...await config$1.loadCliConfig({
      args: cmd.config,
      fromPackage: name,
      mockEnv: cmd.lax
    })
  });
};

exports.default = build$1;
//# sourceMappingURL=build-88659183.cjs.js.map
