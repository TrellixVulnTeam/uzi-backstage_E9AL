import { createApiRef, useApi, Progress, EmptyState, Table, Link, useQueryParamState, Page, Header, Content, Lifecycle, createRouteRef, createPlugin, createApiFactory, discoveryApiRef, createRoutableExtension, useRouteRef, SidebarSearchField } from '@backstage/core';
import { ENTITY_DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import qs from 'qs';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { Paper, makeStyles as makeStyles$1, IconButton as IconButton$1, Typography, Card, CardHeader, Button, Divider, CardContent, Select, MenuItem, List, ListItem, Checkbox, ListItemText, Grid } from '@material-ui/core';
import React, { useState, useEffect, useCallback } from 'react';
import { useAsync, useDebounce } from 'react-use';
import { makeStyles } from '@material-ui/core/styles';
import InputBase from '@material-ui/core/InputBase';
import IconButton from '@material-ui/core/IconButton';
import SearchIcon from '@material-ui/icons/Search';
import ClearButton from '@material-ui/icons/Clear';
import { Alert } from '@material-ui/lab';
import FilterListIcon from '@material-ui/icons/FilterList';
import { useNavigate } from 'react-router-dom';

const searchApiRef = createApiRef({
  id: "plugin.search.queryservice",
  description: "Used to make requests against the search API"
});
class SearchClient {
  constructor(options) {
    this.catalogApi = options.catalogApi;
    this.discoveryApi = options.discoveryApi;
  }
  async entities() {
    const entities = await this.catalogApi.getEntities();
    return entities.items.map((entity) => {
      var _a, _b, _c, _d, _e;
      return {
        name: entity.metadata.name,
        description: entity.metadata.description,
        owner: typeof ((_a = entity.spec) == null ? void 0 : _a.owner) === "string" ? (_b = entity.spec) == null ? void 0 : _b.owner : void 0,
        kind: entity.kind,
        lifecycle: typeof ((_c = entity.spec) == null ? void 0 : _c.lifecycle) === "string" ? (_d = entity.spec) == null ? void 0 : _d.lifecycle : void 0,
        url: `/catalog/${((_e = entity.metadata.namespace) == null ? void 0 : _e.toLowerCase()) || ENTITY_DEFAULT_NAMESPACE}/${entity.kind.toLowerCase()}/${entity.metadata.name}`
      };
    });
  }
  getSearchResult() {
    return this.entities();
  }
  async _alphaPerformSearch(query) {
    const queryString = qs.stringify(query);
    const url = `${await this.discoveryApi.getBaseUrl("search/query")}?${queryString}`;
    const response = await fetch(url);
    return response.json();
  }
}

const useStyles = makeStyles(() => ({
  root: {
    display: "flex",
    alignItems: "center"
  },
  input: {
    flex: 1
  }
}));
const SearchBar = ({
  searchQuery,
  handleSearch,
  handleClearSearchBar
}) => {
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(Paper, {
    component: "form",
    onSubmit: (e) => handleSearch(e),
    className: classes.root
  }, /* @__PURE__ */ React.createElement(IconButton, {
    disabled: true,
    type: "submit",
    "aria-label": "search"
  }, /* @__PURE__ */ React.createElement(SearchIcon, null)), /* @__PURE__ */ React.createElement(InputBase, {
    className: classes.input,
    placeholder: "Search in Backstage",
    value: searchQuery,
    onChange: (e) => handleSearch(e),
    inputProps: {"aria-label": "search backstage"}
  }), /* @__PURE__ */ React.createElement(IconButton, {
    "aria-label": "search",
    onClick: () => handleClearSearchBar()
  }, /* @__PURE__ */ React.createElement(ClearButton, null)));
};

const useStyles$1 = makeStyles$1((theme) => ({
  filters: {
    width: "250px",
    display: "flex"
  },
  icon: {
    margin: theme.spacing(-1, 0, 0, 0)
  }
}));
const FiltersButton = ({
  numberOfSelectedFilters,
  handleToggleFilters
}) => {
  const classes = useStyles$1();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(IconButton$1, {
    className: classes.icon,
    "aria-label": "settings",
    onClick: handleToggleFilters
  }, /* @__PURE__ */ React.createElement(FilterListIcon, null)), /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, "Filters (", numberOfSelectedFilters ? numberOfSelectedFilters : 0, ")"));
};

const useStyles$2 = makeStyles$1((theme) => ({
  filters: {
    background: "transparent",
    boxShadow: "0px 0px 0px 0px"
  },
  checkbox: {
    padding: theme.spacing(0, 1, 0, 1)
  },
  dropdown: {
    width: "100%"
  }
}));
const Filters = ({
  filters,
  filterOptions,
  resetFilters,
  updateSelected,
  updateChecked
}) => {
  const classes = useStyles$2();
  return /* @__PURE__ */ React.createElement(Card, {
    className: classes.filters
  }, /* @__PURE__ */ React.createElement(CardHeader, {
    title: /* @__PURE__ */ React.createElement(Typography, {
      variant: "h6"
    }, "Filters"),
    action: /* @__PURE__ */ React.createElement(Button, {
      color: "primary",
      onClick: () => resetFilters()
    }, "CLEAR ALL")
  }), /* @__PURE__ */ React.createElement(Divider, null), filterOptions.kind.length === 0 && filterOptions.lifecycle.length === 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Filters cannot be applied to available results")), filterOptions.kind.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Kind"), /* @__PURE__ */ React.createElement(Select, {
    id: "outlined-select",
    onChange: (e) => {
      var _a;
      return updateSelected((_a = e == null ? void 0 : e.target) == null ? void 0 : _a.value);
    },
    variant: "outlined",
    className: classes.dropdown,
    value: filters.selected
  }, filterOptions.kind.map((filter) => /* @__PURE__ */ React.createElement(MenuItem, {
    selected: filter === "",
    dense: true,
    key: filter,
    value: filter
  }, filter)))), filterOptions.lifecycle.length > 0 && /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle2"
  }, "Lifecycle"), /* @__PURE__ */ React.createElement(List, {
    disablePadding: true,
    dense: true
  }, filterOptions.lifecycle.map((filter) => /* @__PURE__ */ React.createElement(ListItem, {
    key: filter,
    dense: true,
    button: true,
    onClick: () => updateChecked(filter)
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    edge: "start",
    disableRipple: true,
    className: classes.checkbox,
    color: "primary",
    checked: filters.checked.includes(filter),
    tabIndex: -1,
    value: filter,
    name: filter
  }), /* @__PURE__ */ React.createElement(ListItemText, {
    id: filter,
    primary: filter
  }))))));
};

const useStyles$3 = makeStyles$1((theme) => ({
  searchQuery: {
    color: theme.palette.text.primary,
    background: theme.palette.background.default,
    borderRadius: "10%"
  },
  tableHeader: {
    margin: theme.spacing(1, 0, 0, 0),
    display: "flex"
  },
  divider: {
    width: "1px",
    margin: theme.spacing(0, 2),
    padding: theme.spacing(2, 0)
  }
}));
const columns = [
  {
    title: "Name",
    field: "name",
    highlight: true,
    render: (result) => /* @__PURE__ */ React.createElement(Link, {
      to: result.url || ""
    }, result.name)
  },
  {
    title: "Description",
    field: "description"
  },
  {
    title: "Owner",
    field: "owner"
  },
  {
    title: "Kind",
    field: "kind"
  },
  {
    title: "LifeCycle",
    field: "lifecycle"
  }
];
const TableHeader = ({
  searchQuery,
  numberOfSelectedFilters,
  numberOfResults,
  handleToggleFilters
}) => {
  const classes = useStyles$3();
  return /* @__PURE__ */ React.createElement("div", {
    className: classes.tableHeader
  }, /* @__PURE__ */ React.createElement(FiltersButton, {
    numberOfSelectedFilters,
    handleToggleFilters
  }), /* @__PURE__ */ React.createElement(Divider, {
    className: classes.divider,
    orientation: "vertical"
  }), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, searchQuery ? /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, `${numberOfResults} `, numberOfResults > 1 ? `results for ` : `result for `, /* @__PURE__ */ React.createElement("span", {
    className: classes.searchQuery
  }, '"', searchQuery, '"'), " ") : /* @__PURE__ */ React.createElement(Typography, {
    variant: "h6"
  }, `${numberOfResults} results`)));
};
const SearchResult = ({searchQuery}) => {
  const searchApi = useApi(searchApiRef);
  const [showFilters, toggleFilters] = useState(false);
  const [selectedFilters, setSelectedFilters] = useState({
    selected: "",
    checked: []
  });
  const [filteredResults, setFilteredResults] = useState([]);
  const {loading, error, value: results} = useAsync(() => {
    return searchApi.getSearchResult();
  }, []);
  useEffect(() => {
    if (results) {
      let withFilters = results;
      if (selectedFilters.selected !== "") {
        withFilters = results.filter((result) => selectedFilters.selected.includes(result.kind));
      }
      if (selectedFilters.checked.length > 0) {
        withFilters = withFilters.filter((result) => result.lifecycle && selectedFilters.checked.includes(result.lifecycle));
      }
      if (searchQuery) {
        withFilters = withFilters.filter((result) => {
          var _a, _b, _c;
          return ((_a = result.name) == null ? void 0 : _a.toLocaleLowerCase("en-US").includes(searchQuery)) || ((_b = result.name) == null ? void 0 : _b.toLocaleLowerCase("en-US").includes(searchQuery.split(" ").join("-"))) || ((_c = result.description) == null ? void 0 : _c.toLocaleLowerCase("en-US").includes(searchQuery));
        });
      }
      setFilteredResults(withFilters);
    }
  }, [selectedFilters, searchQuery, results]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, {
      severity: "error"
    }, "Error encountered while fetching search results. ", error.toString());
  }
  if (!results || results.length === 0) {
    return /* @__PURE__ */ React.createElement(EmptyState, {
      missing: "data",
      title: "Sorry, no results were found"
    });
  }
  const resetFilters = () => {
    setSelectedFilters({
      selected: "",
      checked: []
    });
  };
  const updateSelected = (filter) => {
    setSelectedFilters((prevState) => ({
      ...prevState,
      selected: filter
    }));
  };
  const updateChecked = (filter) => {
    if (selectedFilters.checked.includes(filter)) {
      setSelectedFilters((prevState) => ({
        ...prevState,
        checked: prevState.checked.filter((item) => item !== filter)
      }));
      return;
    }
    setSelectedFilters((prevState) => ({
      ...prevState,
      checked: [...prevState.checked, filter]
    }));
  };
  const filterOptions = results.reduce((acc, curr) => {
    if (curr.kind && acc.kind.indexOf(curr.kind) < 0) {
      acc.kind.push(curr.kind);
    }
    if (curr.lifecycle && acc.lifecycle.indexOf(curr.lifecycle) < 0) {
      acc.lifecycle.push(curr.lifecycle);
    }
    return acc;
  }, {
    kind: [],
    lifecycle: []
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true
  }, showFilters && /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 3
  }, /* @__PURE__ */ React.createElement(Filters, {
    filters: selectedFilters,
    filterOptions,
    resetFilters,
    updateSelected,
    updateChecked
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: showFilters ? 9 : 12
  }, /* @__PURE__ */ React.createElement(Table, {
    options: {paging: true, pageSize: 20, search: false},
    data: filteredResults,
    columns,
    title: /* @__PURE__ */ React.createElement(TableHeader, {
      searchQuery,
      numberOfResults: filteredResults.length,
      numberOfSelectedFilters: (selectedFilters.selected !== "" ? 1 : 0) + selectedFilters.checked.length,
      handleToggleFilters: () => toggleFilters(!showFilters)
    })
  }))));
};

const SearchPage = () => {
  const [queryString, setQueryString] = useQueryParamState("query");
  const [searchQuery, setSearchQuery] = useState(queryString != null ? queryString : "");
  const handleSearch = (event) => {
    event.preventDefault();
    setSearchQuery(event.target.value);
  };
  useEffect(() => setSearchQuery(queryString != null ? queryString : ""), [queryString]);
  useDebounce(() => {
    setQueryString(searchQuery);
  }, 200, [searchQuery]);
  const handleClearSearchBar = () => {
    setSearchQuery("");
  };
  return /* @__PURE__ */ React.createElement(Page, {
    themeId: "home"
  }, /* @__PURE__ */ React.createElement(Header, {
    title: "Search"
  }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchBar, {
    handleSearch,
    handleClearSearchBar,
    searchQuery
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchResult, {
    searchQuery: (queryString != null ? queryString : "").toLocaleLowerCase("en-US")
  })))));
};

const SearchPageNext = () => {
  const [queryString, setQueryString] = useQueryParamState("query");
  const [searchQuery, setSearchQuery] = useState(queryString != null ? queryString : "");
  const handleSearch = (event) => {
    event.preventDefault();
    setSearchQuery(event.target.value);
  };
  useEffect(() => setSearchQuery(queryString != null ? queryString : ""), [queryString]);
  useDebounce(() => {
    setQueryString(searchQuery);
  }, 200, [searchQuery]);
  const handleClearSearchBar = () => {
    setSearchQuery("");
  };
  return /* @__PURE__ */ React.createElement(Page, {
    themeId: "home"
  }, /* @__PURE__ */ React.createElement(Header, {
    title: "Search",
    subtitle: /* @__PURE__ */ React.createElement(Lifecycle, {
      alpha: true
    })
  }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchBar, {
    handleSearch,
    handleClearSearchBar,
    searchQuery
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchResult, {
    searchQuery: (queryString != null ? queryString : "").toLowerCase()
  })))));
};

const rootRouteRef = createRouteRef({
  path: "/search",
  title: "search"
});
const rootNextRouteRef = createRouteRef({
  path: "/search-next",
  title: "search"
});
const searchPlugin = createPlugin({
  id: "search",
  apis: [
    createApiFactory({
      api: searchApiRef,
      deps: {catalogApi: catalogApiRef, discoveryApi: discoveryApiRef},
      factory: ({catalogApi, discoveryApi}) => {
        return new SearchClient({catalogApi, discoveryApi});
      }
    })
  ],
  register({router}) {
    router.addRoute(rootRouteRef, SearchPage);
    router.addRoute(rootNextRouteRef, SearchPageNext);
  },
  routes: {
    root: rootRouteRef,
    nextRoot: rootNextRouteRef
  }
});
const SearchPage$1 = searchPlugin.provide(createRoutableExtension({
  component: () => import('./index-47f3726b.esm.js').then((m) => m.SearchPage),
  mountPoint: rootRouteRef
}));
const SearchPageNext$1 = searchPlugin.provide(createRoutableExtension({
  component: () => import('./index-9c2ae6a3.esm.js').then((m) => m.SearchPageNext),
  mountPoint: rootNextRouteRef
}));

const SidebarSearch = () => {
  const searchRoute = useRouteRef(rootRouteRef);
  const navigate = useNavigate();
  const handleSearch = useCallback((query) => {
    const queryString = qs.stringify({query}, {addQueryPrefix: true});
    navigate(`${searchRoute()}${queryString}`);
  }, [navigate, searchRoute]);
  return /* @__PURE__ */ React.createElement(SidebarSearchField, {
    onSearch: handleSearch,
    to: "/search"
  });
};

export { Filters as F, SearchPage as S, SearchPageNext as a, SearchPage$1 as b, SearchPageNext$1 as c, FiltersButton as d, SearchBar as e, SearchResult as f, SidebarSearch as g, searchPlugin as s };
//# sourceMappingURL=index-37ed06b2.esm.js.map
