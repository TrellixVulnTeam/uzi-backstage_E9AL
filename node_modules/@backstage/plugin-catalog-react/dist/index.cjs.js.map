{"version":3,"file":"index.cjs.js","sources":["../src/api.ts","../src/routes.ts","../src/hooks/useEntityCompoundName.ts","../src/hooks/useEntity.ts","../src/hooks/useRelatedEntities.ts","../src/hooks/useStarredEntities.ts","../src/components/EntityProvider/EntityProvider.tsx","../src/components/EntityRefLink/format.ts","../src/components/EntityRefLink/EntityRefLink.tsx","../src/components/EntityRefLink/EntityRefLinks.tsx","../src/utils/getEntityRelations.ts","../src/utils/isOwnerOf.ts","../src/components/EntityTable/columns.tsx","../src/components/EntityTable/presets.tsx","../src/components/EntityTable/EntityTable.tsx"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { createApiRef } from '@backstage/core';\n\nexport const catalogApiRef = createApiRef<CatalogApi>({\n  id: 'plugin.catalog.service',\n  description:\n    'Used by the Catalog plugin to make requests to accompanying backend',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, ENTITY_DEFAULT_NAMESPACE } from '@backstage/catalog-model';\nimport { createRouteRef } from '@backstage/core';\n\nconst NoIcon = () => null;\n\n// TODO(Rugvip): Move these route refs back to the catalog plugin once we're all ported to using external routes\nexport const rootRoute = createRouteRef({\n  icon: NoIcon,\n  path: '',\n  title: 'Catalog',\n});\nexport const catalogRouteRef = rootRoute;\n\nexport const entityRoute = createRouteRef({\n  icon: NoIcon,\n  path: ':namespace/:kind/:name/*',\n  title: 'Entity',\n  params: ['namespace', 'kind', 'name'],\n});\nexport const entityRouteRef = entityRoute;\n\n// Utility function to get suitable route params for entityRoute, given an\n// entity instance\nexport function entityRouteParams(entity: Entity) {\n  return {\n    kind: entity.kind.toLowerCase(),\n    namespace:\n      entity.metadata.namespace?.toLowerCase() ?? ENTITY_DEFAULT_NAMESPACE,\n    name: entity.metadata.name,\n  } as const;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useRouteRefParams } from '@backstage/core';\nimport { entityRouteRef } from '../routes';\n\n/**\n * Grabs entity kind, namespace, and name from the location\n */\nexport const useEntityCompoundName = () => {\n  const { kind, namespace, name } = useRouteRefParams(entityRouteRef);\n  return { kind, namespace, name };\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { errorApiRef, useApi } from '@backstage/core';\nimport { createContext, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useAsync } from 'react-use';\nimport { catalogApiRef } from '../api';\nimport { useEntityCompoundName } from './useEntityCompoundName';\n\ntype EntityLoadingStatus = {\n  entity?: Entity;\n  loading: boolean;\n  error?: Error;\n};\n\nexport const EntityContext = createContext<EntityLoadingStatus>({\n  entity: undefined,\n  loading: true,\n  error: undefined,\n});\n\nexport const useEntityFromUrl = (): EntityLoadingStatus => {\n  const { kind, namespace, name } = useEntityCompoundName();\n  const navigate = useNavigate();\n  const errorApi = useApi(errorApiRef);\n  const catalogApi = useApi(catalogApiRef);\n\n  const { value: entity, error, loading } = useAsync(\n    () => catalogApi.getEntityByName({ kind, namespace, name }),\n    [catalogApi, kind, namespace, name],\n  );\n\n  useEffect(() => {\n    if (!name) {\n      errorApi.post(new Error('No name provided!'));\n      navigate('/');\n    }\n  }, [errorApi, navigate, error, loading, entity, name]);\n\n  return { entity, loading, error };\n};\n\n/**\n * Grab the current entity from the context and its current loading state.\n */\nexport function useEntity<T extends Entity = Entity>() {\n  const { entity, loading, error } = useContext(EntityContext);\n  return { entity: entity as T, loading, error };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, EntityRelation } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core';\nimport { chunk, groupBy } from 'lodash';\nimport { useAsync } from 'react-use';\nimport { catalogApiRef } from '../api';\n\nconst BATCH_SIZE = 20;\n\nexport function useRelatedEntities(\n  entity: Entity,\n  { type, kind }: { type?: string; kind?: string },\n): {\n  entities: Entity[] | undefined;\n  loading: boolean;\n  error: Error | undefined;\n} {\n  const catalogApi = useApi(catalogApiRef);\n  const { loading, value: entities, error } = useAsync(async () => {\n    const relations =\n      entity.relations &&\n      entity.relations.filter(\n        r =>\n          (!type || r.type.toLowerCase() === type.toLowerCase()) &&\n          (!kind || r.target.kind.toLowerCase() === kind.toLowerCase()),\n      );\n\n    if (!relations) {\n      return [];\n    }\n\n    // Group the relations by kind and namespace to reduce the size of the request query string.\n    // Without this grouping, the kind and namespace would need to be specified for each relation, e.g.\n    // `filter=kind=component,namespace=default,name=example1&filter=kind=component,namespace=default,name=example2`\n    // with grouping, we can generate a query a string like\n    // `filter=kind=component,namespace=default,name=example1,example2`\n    const relationsByKindAndNamespace: EntityRelation[][] = Object.values(\n      groupBy(relations, ({ target }) => {\n        return `${target.kind}:${target.namespace}`.toLowerCase();\n      }),\n    );\n\n    // Split the names within each group into batches to further reduce the query string length.\n    const batchedRelationsByKindAndNamespace: {\n      kind: string;\n      namespace: string;\n      nameBatches: string[][];\n    }[] = [];\n    for (const rs of relationsByKindAndNamespace) {\n      batchedRelationsByKindAndNamespace.push({\n        // All relations in a group have the same kind and namespace, so its arbitrary which we pick\n        kind: rs[0].target.kind,\n        namespace: rs[0].target.namespace,\n        nameBatches: chunk(\n          rs.map(r => r.target.name),\n          BATCH_SIZE,\n        ),\n      });\n    }\n\n    const results = await Promise.all(\n      batchedRelationsByKindAndNamespace.flatMap(rs => {\n        return rs.nameBatches.map(names => {\n          return catalogApi.getEntities({\n            filter: {\n              kind: rs.kind,\n              'metadata.namespace': rs.namespace,\n              'metadata.name': names,\n            },\n          });\n        });\n      }),\n    );\n\n    return results.flatMap(r => r.items);\n  }, [entity, type]);\n\n  return {\n    entities,\n    loading,\n    error,\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { storageApiRef, useApi } from '@backstage/core';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useObservable } from 'react-use';\n\nconst buildEntityKey = (component: Entity) =>\n  `entity:${component.kind}:${component.metadata.namespace ?? 'default'}:${\n    component.metadata.name\n  }`;\n\nexport const useStarredEntities = () => {\n  const storageApi = useApi(storageApiRef);\n  const settingsStore = storageApi.forBucket('settings');\n  const rawStarredEntityKeys =\n    settingsStore.get<string[]>('starredEntities') ?? [];\n\n  const [starredEntities, setStarredEntities] = useState(\n    new Set(rawStarredEntityKeys),\n  );\n\n  const observedItems = useObservable(\n    settingsStore.observe$<string[]>('starredEntities'),\n  );\n\n  useEffect(() => {\n    if (observedItems?.newValue) {\n      const currentValue = observedItems?.newValue ?? [];\n      setStarredEntities(new Set(currentValue));\n    }\n  }, [observedItems?.newValue]);\n\n  const toggleStarredEntity = useCallback(\n    (entity: Entity) => {\n      const entityKey = buildEntityKey(entity);\n      if (starredEntities.has(entityKey)) {\n        starredEntities.delete(entityKey);\n      } else {\n        starredEntities.add(entityKey);\n      }\n\n      settingsStore.set('starredEntities', Array.from(starredEntities));\n    },\n    [starredEntities, settingsStore],\n  );\n\n  const isStarredEntity = useCallback(\n    (entity: Entity) => {\n      const entityKey = buildEntityKey(entity);\n      return starredEntities.has(entityKey);\n    },\n    [starredEntities],\n  );\n\n  return {\n    starredEntities,\n    toggleStarredEntity,\n    isStarredEntity,\n  };\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport React, { ReactNode } from 'react';\nimport { EntityContext } from '../../hooks';\n\ntype EntityProviderProps = {\n  entity: Entity;\n  children: ReactNode;\n};\n\nexport const EntityProvider = ({ entity, children }: EntityProviderProps) => (\n  <EntityContext.Provider\n    value={{\n      entity,\n      loading: !Boolean(entity),\n      error: undefined,\n    }}\n  >\n    {children}\n  </EntityContext.Provider>\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  EntityName,\n  ENTITY_DEFAULT_NAMESPACE,\n  serializeEntityRef,\n} from '@backstage/catalog-model';\n\nexport function formatEntityRefTitle(\n  entityRef: Entity | EntityName,\n  opts?: { defaultKind?: string },\n) {\n  const defaultKind = opts?.defaultKind;\n  let kind;\n  let namespace;\n  let name;\n\n  if ('metadata' in entityRef) {\n    kind = entityRef.kind;\n    namespace = entityRef.metadata.namespace;\n    name = entityRef.metadata.name;\n  } else {\n    kind = entityRef.kind;\n    namespace = entityRef.namespace;\n    name = entityRef.name;\n  }\n\n  if (namespace === ENTITY_DEFAULT_NAMESPACE) {\n    namespace = undefined;\n  }\n\n  kind = kind.toLowerCase();\n\n  return `${serializeEntityRef({\n    kind: defaultKind && defaultKind.toLowerCase() === kind ? undefined : kind,\n    name,\n    namespace,\n  })}`;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Entity,\n  EntityName,\n  ENTITY_DEFAULT_NAMESPACE,\n} from '@backstage/catalog-model';\nimport { Link, LinkProps } from '@backstage/core';\nimport React, { forwardRef } from 'react';\nimport { generatePath } from 'react-router';\nimport { entityRoute } from '../../routes';\nimport { formatEntityRefTitle } from './format';\n\nexport type EntityRefLinkProps = {\n  entityRef: Entity | EntityName;\n  defaultKind?: string;\n  children?: React.ReactNode;\n} & Omit<LinkProps, 'to'>;\n\nexport const EntityRefLink = forwardRef<any, EntityRefLinkProps>(\n  (props, ref) => {\n    const { entityRef, defaultKind, children, ...linkProps } = props;\n\n    let kind;\n    let namespace;\n    let name;\n\n    if ('metadata' in entityRef) {\n      kind = entityRef.kind;\n      namespace = entityRef.metadata.namespace;\n      name = entityRef.metadata.name;\n    } else {\n      kind = entityRef.kind;\n      namespace = entityRef.namespace;\n      name = entityRef.name;\n    }\n\n    kind = kind.toLocaleLowerCase('en-US');\n\n    const routeParams = {\n      kind,\n      namespace:\n        namespace?.toLocaleLowerCase('en-US') ?? ENTITY_DEFAULT_NAMESPACE,\n      name,\n    };\n\n    // TODO: Use useRouteRef here to generate the path\n    return (\n      <Link\n        {...linkProps}\n        ref={ref}\n        to={generatePath(`/catalog/${entityRoute.path}`, routeParams)}\n      >\n        {children}\n        {!children && formatEntityRefTitle(entityRef, { defaultKind })}\n      </Link>\n    );\n  },\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, EntityName } from '@backstage/catalog-model';\nimport { LinkProps } from '@backstage/core';\nimport React from 'react';\nimport { EntityRefLink } from './EntityRefLink';\n\nexport type EntityRefLinksProps = {\n  entityRefs: (Entity | EntityName)[];\n  defaultKind?: string;\n} & Omit<LinkProps, 'to'>;\n\nexport const EntityRefLinks = ({\n  entityRefs,\n  defaultKind,\n  ...linkProps\n}: EntityRefLinksProps) => (\n  <>\n    {entityRefs.map((r, i) => (\n      <React.Fragment key={i}>\n        {i > 0 && ', '}\n        <EntityRefLink {...linkProps} entityRef={r} defaultKind={defaultKind} />\n      </React.Fragment>\n    ))}\n  </>\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, EntityName } from '@backstage/catalog-model';\n\n/**\n * Get the related entity references.\n */\nexport function getEntityRelations(\n  entity: Entity | undefined,\n  relationType: string,\n  filter?: { kind: string },\n): EntityName[] {\n  let entityNames =\n    entity?.relations\n      ?.filter(r => r.type === relationType)\n      ?.map(r => r.target) || [];\n\n  if (filter?.kind) {\n    entityNames = entityNames?.filter(\n      e => e.kind.toLowerCase() === filter.kind.toLowerCase(),\n    );\n  }\n\n  return entityNames;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  EntityName,\n  getEntityName,\n  RELATION_MEMBER_OF,\n  RELATION_OWNED_BY,\n} from '@backstage/catalog-model';\nimport { getEntityRelations } from './getEntityRelations';\n\n/**\n * Get the related entity references.\n */\nexport function isOwnerOf(owner: Entity, owned: Entity) {\n  const possibleOwners: EntityName[] = [\n    ...getEntityRelations(owner, RELATION_MEMBER_OF, { kind: 'group' }),\n    ...(owner ? [getEntityName(owner)] : []),\n  ];\n\n  const owners = getEntityRelations(owned, RELATION_OWNED_BY);\n\n  for (const ownerItem of owners) {\n    if (\n      possibleOwners.find(\n        o =>\n          ownerItem.kind.toLowerCase() === o.kind.toLowerCase() &&\n          ownerItem.namespace.toLowerCase() === o.namespace.toLowerCase() &&\n          ownerItem.name.toLowerCase() === o.name.toLowerCase(),\n      ) !== undefined\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  EntityName,\n  RELATION_OWNED_BY,\n  RELATION_PART_OF,\n} from '@backstage/catalog-model';\nimport { OverflowTooltip, TableColumn } from '@backstage/core';\nimport React from 'react';\nimport { getEntityRelations } from '../../utils';\nimport {\n  EntityRefLink,\n  EntityRefLinks,\n  formatEntityRefTitle,\n} from '../EntityRefLink';\n\nexport function createEntityRefColumn<T extends Entity>({\n  defaultKind,\n}: {\n  defaultKind?: string;\n}): TableColumn<T> {\n  function formatContent(entity: T): string {\n    return formatEntityRefTitle(entity, {\n      defaultKind,\n    });\n  }\n\n  return {\n    title: 'Name',\n    highlight: true,\n    customFilterAndSearch(filter, entity) {\n      // TODO: We could implement this more efficiently, like searching over\n      // each field that is displayed individually (kind, namespace, name).\n      // but that migth confuse the user as it will behave different than a\n      // simple text search.\n      // Another alternative would be to cache the values. But writing them\n      // into the entity feels bad too.\n      return formatContent(entity).includes(filter);\n    },\n    customSort(entity1, entity2) {\n      // TODO: We could implement this more efficiently by comparing field by field.\n      // This has similar issues as above.\n      return formatContent(entity1).localeCompare(formatContent(entity2));\n    },\n    render: entity => (\n      <EntityRefLink entityRef={entity} defaultKind={defaultKind} />\n    ),\n  };\n}\n\nexport function createEntityRelationColumn<T extends Entity>({\n  title,\n  relation,\n  defaultKind,\n  filter: entityFilter,\n}: {\n  title: string;\n  relation: string;\n  defaultKind?: string;\n  filter?: { kind: string };\n}): TableColumn<T> {\n  function getRelations(entity: T): EntityName[] {\n    return getEntityRelations(entity, relation, entityFilter);\n  }\n\n  function formatContent(entity: T): string {\n    return getRelations(entity)\n      .map(r => formatEntityRefTitle(r, { defaultKind }))\n      .join(', ');\n  }\n\n  return {\n    title,\n    customFilterAndSearch(filter, entity) {\n      return formatContent(entity).includes(filter);\n    },\n    customSort(entity1, entity2) {\n      return formatContent(entity1).localeCompare(formatContent(entity2));\n    },\n    render: entity => {\n      return (\n        <EntityRefLinks\n          entityRefs={getRelations(entity)}\n          defaultKind={defaultKind}\n        />\n      );\n    },\n  };\n}\n\nexport function createOwnerColumn<T extends Entity>(): TableColumn<T> {\n  return createEntityRelationColumn({\n    title: 'Owner',\n    relation: RELATION_OWNED_BY,\n    defaultKind: 'group',\n  });\n}\n\nexport function createDomainColumn<T extends Entity>(): TableColumn<T> {\n  return createEntityRelationColumn({\n    title: 'Domain',\n    relation: RELATION_PART_OF,\n    defaultKind: 'domain',\n    filter: {\n      kind: 'domain',\n    },\n  });\n}\n\nexport function createSystemColumn<T extends Entity>(): TableColumn<T> {\n  return createEntityRelationColumn({\n    title: 'System',\n    relation: RELATION_PART_OF,\n    defaultKind: 'system',\n    filter: {\n      kind: 'system',\n    },\n  });\n}\n\nexport function createMetadataDescriptionColumn<\n  T extends Entity\n>(): TableColumn<T> {\n  return {\n    title: 'Description',\n    field: 'metadata.description',\n    render: entity => (\n      <OverflowTooltip\n        text={entity.metadata.description}\n        placement=\"bottom-start\"\n      />\n    ),\n    width: 'auto',\n  };\n}\n\nexport function createSpecLifecycleColumn<T extends Entity>(): TableColumn<T> {\n  return {\n    title: 'Lifecycle',\n    field: 'spec.lifecycle',\n  };\n}\n\nexport function createSpecTypeColumn<T extends Entity>(): TableColumn<T> {\n  return {\n    title: 'Type',\n    field: 'spec.type',\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentEntity, SystemEntity } from '@backstage/catalog-model';\nimport { TableColumn } from '@backstage/core';\nimport {\n  createDomainColumn,\n  createEntityRefColumn,\n  createMetadataDescriptionColumn,\n  createOwnerColumn,\n  createSpecLifecycleColumn,\n  createSpecTypeColumn,\n  createSystemColumn,\n} from './columns';\n\nexport const systemEntityColumns: TableColumn<SystemEntity>[] = [\n  createEntityRefColumn({ defaultKind: 'system' }),\n  createDomainColumn(),\n  createOwnerColumn(),\n  createMetadataDescriptionColumn(),\n];\n\nexport const componentEntityColumns: TableColumn<ComponentEntity>[] = [\n  createEntityRefColumn({ defaultKind: 'component' }),\n  createSystemColumn(),\n  createOwnerColumn(),\n  createSpecTypeColumn(),\n  createSpecLifecycleColumn(),\n  createMetadataDescriptionColumn(),\n];\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Table, TableColumn } from '@backstage/core';\nimport { makeStyles } from '@material-ui/core';\nimport React, { ReactNode } from 'react';\nimport * as columnFactories from './columns';\nimport { componentEntityColumns, systemEntityColumns } from './presets';\n\ntype Props<T extends Entity> = {\n  title: string;\n  variant?: 'gridItem';\n  entities: T[];\n  emptyContent?: ReactNode;\n  columns: TableColumn<T>[];\n};\n\nconst useStyles = makeStyles(theme => ({\n  empty: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n}));\n\nexport function EntityTable<T extends Entity>({\n  entities,\n  title,\n  emptyContent,\n  variant = 'gridItem',\n  columns,\n}: Props<T>) {\n  const classes = useStyles();\n  const tableStyle: React.CSSProperties = {\n    minWidth: '0',\n    width: '100%',\n  };\n\n  if (variant === 'gridItem') {\n    tableStyle.height = 'calc(100% - 10px)';\n  }\n\n  return (\n    <Table<T>\n      columns={columns}\n      title={title}\n      style={tableStyle}\n      emptyContent={\n        emptyContent && <div className={classes.empty}>{emptyContent}</div>\n      }\n      options={{\n        // TODO: Toolbar padding if off compared to other cards, should be: padding: 16px 24px;\n        search: false,\n        paging: false,\n        actionsColumnIndex: -1,\n        padding: 'dense',\n      }}\n      data={entities}\n    />\n  );\n}\n\nEntityTable.columns = columnFactories;\n\nEntityTable.systemEntityColumns = systemEntityColumns;\n\nEntityTable.componentEntityColumns = componentEntityColumns;\n"],"names":["createApiRef","createRouteRef","ENTITY_DEFAULT_NAMESPACE","useRouteRefParams","createContext","useNavigate","useApi","errorApiRef","useAsync","useContext","groupBy","chunk","storageApiRef","useState","useObservable","useCallback","serializeEntityRef","forwardRef","Link","generatePath","React","RELATION_MEMBER_OF","getEntityName","RELATION_OWNED_BY","RELATION_PART_OF","OverflowTooltip","makeStyles","Table"],"mappings":"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"}