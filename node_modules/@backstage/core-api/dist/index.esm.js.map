{"version":3,"file":"index.esm.js","sources":["../src/apis/system/ApiAggregator.ts","../src/lib/globalObject.ts","../src/lib/versionedValues.ts","../src/apis/system/ApiProvider.tsx","../src/apis/system/ApiRegistry.ts","../src/apis/system/ApiResolver.ts","../src/apis/system/ApiFactoryRegistry.ts","../src/apis/system/ApiRef.ts","../src/apis/system/helpers.ts","../src/apis/definitions/auth.ts","../src/apis/definitions/AlertApi.ts","../src/apis/definitions/AppThemeApi.ts","../src/apis/definitions/ConfigApi.ts","../src/apis/definitions/DiscoveryApi.ts","../src/apis/definitions/ErrorApi.ts","../src/apis/definitions/FeatureFlagsApi.ts","../src/apis/definitions/IdentityApi.ts","../src/apis/definitions/OAuthRequestApi.ts","../src/apis/definitions/StorageApi.ts","../src/lib/loginPopup.ts","../src/lib/AuthConnector/DefaultAuthConnector.ts","../src/lib/AuthConnector/DirectAuthConnector.ts","../src/lib/AuthSessionManager/common.ts","../src/lib/subjects.ts","../src/lib/AuthSessionManager/SessionStateTracker.ts","../src/lib/AuthSessionManager/RefreshingAuthSessionManager.ts","../src/lib/AuthSessionManager/StaticAuthSessionManager.ts","../src/lib/AuthSessionManager/AuthSessionStore.ts","../src/apis/implementations/auth/github/GithubAuth.ts","../src/apis/implementations/auth/oauth2/OAuth2.ts","../src/apis/implementations/auth/gitlab/GitlabAuth.ts","../src/apis/implementations/auth/google/GoogleAuth.ts","../src/apis/implementations/auth/okta/OktaAuth.ts","../src/apis/implementations/auth/saml/SamlAuth.ts","../src/apis/implementations/auth/auth0/Auth0Auth.ts","../src/apis/implementations/auth/microsoft/MicrosoftAuth.ts","../src/apis/implementations/auth/onelogin/OneLoginAuth.ts","../src/apis/implementations/AlertApi/AlertApiForwarder.ts","../src/apis/implementations/AppThemeApi/AppThemeSelector.ts","../src/apis/implementations/DiscoveryApi/UrlPatternDiscovery.ts","../src/apis/implementations/ErrorApi/ErrorAlerter.ts","../src/apis/implementations/ErrorApi/ErrorApiForwarder.ts","../src/apis/implementations/FeatureFlagsApi/LocalStorageFeatureFlags.tsx","../src/apis/implementations/OAuthRequestApi/OAuthPendingRequests.ts","../src/apis/implementations/OAuthRequestApi/OAuthRequestManager.ts","../src/apis/implementations/StorageApi/WebStorage.ts","../src/app/AppContext.tsx","../src/extensions/componentData.tsx","../src/routing/types.ts","../src/routing/ExternalRouteRef.ts","../src/routing/FlatRoutes.tsx","../src/routing/RouteRef.ts","../src/routing/SubRouteRef.ts","../src/routing/RouteResolver.ts","../src/routing/hooks.tsx","../src/extensions/extensions.tsx","../src/icons/icons.tsx","../src/plugin/Plugin.tsx","../src/extensions/traversal.ts","../src/plugin/collectors.ts","../src/routing/collectors.tsx","../src/routing/validation.ts","../src/app/AppIdentity.ts","../src/app/AppThemeProvider.tsx","../src/app/App.tsx"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiHolder } from './types';\n\n/**\n * An ApiHolder that queries multiple other holders from for\n * an Api implementation, returning the first one encountered..\n */\nexport class ApiAggregator implements ApiHolder {\n  private readonly holders: ApiHolder[];\n\n  constructor(...holders: ApiHolder[]) {\n    this.holders = holders;\n  }\n\n  get<T>(apiRef: ApiRef<T>): T | undefined {\n    for (const holder of this.holders) {\n      const api = holder.get(apiRef);\n      if (api) {\n        return api;\n      }\n    }\n    return undefined;\n  }\n}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nfunction getGlobalObject() {\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  }\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n  // eslint-disable-next-line no-new-func\n  return Function('return this')();\n}\n\nconst globalObject = getGlobalObject();\n\nconst makeKey = (id: string) => `__@backstage/${id}__`;\n\n/**\n * Used to provide a global singleton value, failing if it is already set.\n */\nexport function setGlobalSingleton(id: string, value: unknown): void {\n  const key = makeKey(id);\n  if (key in globalObject) {\n    throw new Error(`Global ${id} is already set`); // TODO some sort of special build err\n  }\n  globalObject[key] = value;\n}\n\n/**\n * Used to access a global singleton value, failing if it is not already set.\n */\nexport function getGlobalSingleton<T>(id: string): T {\n  const key = makeKey(id);\n  if (!(key in globalObject)) {\n    throw new Error(`Global ${id} is not set`); // TODO some sort of special build err\n  }\n\n  return globalObject[key];\n}\n\n/**\n * Serializes access to a global singleton value, with the first caller creating the value.\n */\nexport function getOrCreateGlobalSingleton<T>(\n  id: string,\n  supplier: () => T,\n): T {\n  const key = makeKey(id);\n\n  let value = globalObject[key];\n  if (value) {\n    return value;\n  }\n\n  value = supplier();\n  globalObject[key] = value;\n  return value;\n}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The versioned value interface is a container for a set of values that\n * can be looked up by version. It is intended to be used as a container\n * for values that can be versioned independently of package versions.\n */\nexport type VersionedValue<Versions extends { [version: number]: any }> = {\n  atVersion<Version extends keyof Versions>(\n    version: Version,\n  ): Versions[Version] | undefined;\n};\n\n/**\n * Creates a container for a map of versioned values that implements VersionedValue.\n */\nexport function createVersionedValueMap<\n  Versions extends { [version: number]: any }\n>(versions: Versions): VersionedValue<Versions> {\n  Object.freeze(versions);\n  return {\n    atVersion(version) {\n      return versions[version];\n    },\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  createContext,\n  useContext,\n  ReactNode,\n  PropsWithChildren,\n  Context,\n  useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ApiRef, ApiHolder, TypesToApiRefs } from './types';\nimport { ApiAggregator } from './ApiAggregator';\nimport {\n  getGlobalSingleton,\n  getOrCreateGlobalSingleton,\n} from '../../lib/globalObject';\nimport {\n  VersionedValue,\n  createVersionedValueMap,\n} from '../../lib/versionedValues';\n\nconst missingHolderMessage =\n  'No ApiProvider available in react context. ' +\n  'A common cause of this error is that multiple versions of @backstage/core-api are installed. ' +\n  `You can check if that is the case using 'yarn backstage-cli versions:check', and can in many cases ` +\n  `fix the issue either with the --fix flag or using 'yarn backstage-cli versions:bump'`;\n\ntype ApiProviderProps = {\n  apis: ApiHolder;\n  children: ReactNode;\n};\n\ntype ApiContextType = VersionedValue<{ 1: ApiHolder }> | undefined;\nconst ApiContext = getOrCreateGlobalSingleton('api-context', () =>\n  createContext<ApiContextType>(undefined),\n);\n\nexport const ApiProvider = ({\n  apis,\n  children,\n}: PropsWithChildren<ApiProviderProps>) => {\n  const parentHolder = useContext(ApiContext)?.atVersion(1);\n  const versionedValue = useMemo(\n    () =>\n      createVersionedValueMap({\n        1: parentHolder ? new ApiAggregator(apis, parentHolder) : apis,\n      }),\n    [parentHolder, apis],\n  );\n\n  return <ApiContext.Provider value={versionedValue} children={children} />;\n};\n\nApiProvider.propTypes = {\n  apis: PropTypes.shape({ get: PropTypes.func.isRequired }).isRequired,\n  children: PropTypes.node,\n};\n\nexport function useApiHolder(): ApiHolder {\n  const versionedHolder = useContext(\n    getGlobalSingleton<Context<ApiContextType>>('api-context'),\n  );\n\n  if (!versionedHolder) {\n    throw new Error(missingHolderMessage);\n  }\n\n  const apiHolder = versionedHolder.atVersion(1);\n  if (!apiHolder) {\n    throw new Error('ApiContext v1 not available');\n  }\n\n  return apiHolder;\n}\n\nexport function useApi<T>(apiRef: ApiRef<T>): T {\n  const apiHolder = useApiHolder();\n\n  const api = apiHolder.get(apiRef);\n  if (!api) {\n    throw new Error(`No implementation available for ${apiRef}`);\n  }\n  return api;\n}\n\nexport function withApis<T>(apis: TypesToApiRefs<T>) {\n  return function withApisWrapper<P extends T>(\n    WrappedComponent: React.ComponentType<P>,\n  ) {\n    const Hoc = (props: PropsWithChildren<Omit<P, keyof T>>) => {\n      const apiHolder = useApiHolder();\n\n      const impls = {} as T;\n\n      for (const key in apis) {\n        if (apis.hasOwnProperty(key)) {\n          const ref = apis[key];\n\n          const api = apiHolder.get(ref);\n          if (!api) {\n            throw new Error(`No implementation available for ${ref}`);\n          }\n          impls[key] = api;\n        }\n      }\n\n      return <WrappedComponent {...(props as P)} {...impls} />;\n    };\n    const displayName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    Hoc.displayName = `withApis(${displayName})`;\n\n    return Hoc;\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiHolder } from './types';\n\ntype ApiImpl<T = unknown> = readonly [ApiRef<T>, T];\n\nclass ApiRegistryBuilder {\n  private apis: [string, unknown][] = [];\n\n  add<T, I extends T>(api: ApiRef<T>, impl: I): I {\n    this.apis.push([api.id, impl]);\n    return impl;\n  }\n\n  build(): ApiRegistry {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new ApiRegistry(new Map(this.apis));\n  }\n}\n\nexport class ApiRegistry implements ApiHolder {\n  static builder() {\n    return new ApiRegistryBuilder();\n  }\n\n  static from(apis: ApiImpl[]) {\n    return new ApiRegistry(new Map(apis.map(([api, impl]) => [api.id, impl])));\n  }\n\n  /**\n   * Creates a new ApiRegistry with a single API implementation.\n   *\n   * @param api ApiRef for the API to add\n   * @param impl Implementation of the API to add\n   */\n  static with<T>(api: ApiRef<T>, impl: T): ApiRegistry {\n    return new ApiRegistry(new Map([[api.id, impl]]));\n  }\n\n  constructor(private readonly apis: Map<string, unknown>) {}\n\n  /**\n   * Returns a new ApiRegistry with the provided API added to the existing ones.\n   *\n   * @param api ApiRef for the API to add\n   * @param impl Implementation of the API to add\n   */\n  with<T>(api: ApiRef<T>, impl: T): ApiRegistry {\n    return new ApiRegistry(new Map([...this.apis, [api.id, impl]]));\n  }\n\n  get<T>(api: ApiRef<T>): T | undefined {\n    return this.apis.get(api.id) as T | undefined;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiRef,\n  ApiHolder,\n  ApiFactoryHolder,\n  AnyApiRef,\n  TypesToApiRefs,\n} from './types';\n\nexport class ApiResolver implements ApiHolder {\n  /**\n   * Validate factories by making sure that each of the apis can be created\n   * without hitting any circular dependencies.\n   */\n  static validateFactories(\n    factories: ApiFactoryHolder,\n    apis: Iterable<AnyApiRef>,\n  ) {\n    for (const api of apis) {\n      const heap = [api];\n      const allDeps = new Set<AnyApiRef>();\n\n      while (heap.length) {\n        const apiRef = heap.shift()!;\n        const factory = factories.get(apiRef);\n        if (!factory) {\n          continue;\n        }\n\n        for (const dep of Object.values(factory.deps)) {\n          if (dep.id === api.id) {\n            throw new Error(`Circular dependency of api factory for ${api}`);\n          }\n          if (!allDeps.has(dep)) {\n            allDeps.add(dep);\n            heap.push(dep);\n          }\n        }\n      }\n    }\n  }\n\n  private readonly apis = new Map<string, unknown>();\n\n  constructor(private readonly factories: ApiFactoryHolder) {}\n\n  get<T>(ref: ApiRef<T>): T | undefined {\n    return this.load(ref);\n  }\n\n  private load<T>(ref: ApiRef<T>, loading: AnyApiRef[] = []): T | undefined {\n    const impl = this.apis.get(ref.id);\n    if (impl) {\n      return impl as T;\n    }\n\n    const factory = this.factories.get(ref);\n    if (!factory) {\n      return undefined;\n    }\n\n    if (loading.includes(factory.api)) {\n      throw new Error(`Circular dependency of api factory for ${factory.api}`);\n    }\n\n    const deps = this.loadDeps(ref, factory.deps, [...loading, factory.api]);\n    const api = factory.factory(deps);\n    this.apis.set(ref.id, api);\n    return api as T;\n  }\n\n  private loadDeps<T>(\n    dependent: ApiRef<unknown>,\n    apis: TypesToApiRefs<T>,\n    loading: AnyApiRef[],\n  ): T {\n    const impls = {} as T;\n\n    for (const key in apis) {\n      if (apis.hasOwnProperty(key)) {\n        const ref = apis[key];\n\n        const api = this.load(ref, loading);\n        if (!api) {\n          throw new Error(\n            `No API factory available for dependency ${ref} of dependent ${dependent}`,\n          );\n        }\n        impls[key] = api;\n      }\n    }\n\n    return impls;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiRef,\n  ApiFactoryHolder,\n  ApiFactory,\n  AnyApiRef,\n  AnyApiFactory,\n} from './types';\n\ntype ApiFactoryScope =\n  | 'default' // Default factories registered by core and plugins\n  | 'app' // Factories registered in the app, overriding default ones\n  | 'static'; // APIs that can't be overridden, e.g. config\n\nenum ScopePriority {\n  default = 10,\n  app = 50,\n  static = 100,\n}\n\ntype FactoryTuple = {\n  priority: number;\n  factory: AnyApiFactory;\n};\n\n/**\n * ApiFactoryRegistry is an ApiFactoryHolder implementation that enables\n * registration of API Factories with different scope.\n *\n * Each scope has an assigned priority, where factories registered with\n * higher priority scopes override ones with lower priority.\n */\nexport class ApiFactoryRegistry implements ApiFactoryHolder {\n  private readonly factories = new Map<string, FactoryTuple>();\n\n  /**\n   * Register a new API factory. Returns true if the factory was added\n   * to the registry.\n   *\n   * A factory will not be added to the registry if there is already\n   * an existing factory with the same or higher priority.\n   */\n  register<Api, Impl extends Api, Deps extends { [name in string]: unknown }>(\n    scope: ApiFactoryScope,\n    factory: ApiFactory<Api, Impl, Deps>,\n  ) {\n    const priority = ScopePriority[scope];\n    const existing = this.factories.get(factory.api.id);\n    if (existing && existing.priority >= priority) {\n      return false;\n    }\n\n    this.factories.set(factory.api.id, { priority, factory });\n    return true;\n  }\n\n  get<T>(\n    api: ApiRef<T>,\n  ): ApiFactory<T, T, { [x: string]: unknown }> | undefined {\n    const tuple = this.factories.get(api.id);\n    if (!tuple) {\n      return undefined;\n    }\n    return tuple.factory as ApiFactory<T, T, { [x: string]: unknown }>;\n  }\n\n  getAllApis(): Set<AnyApiRef> {\n    const refs = new Set<AnyApiRef>();\n    for (const { factory } of this.factories.values()) {\n      refs.add(factory.api);\n    }\n    return refs;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ApiRef } from './types';\n\nexport type ApiRefConfig = {\n  id: string;\n  description?: string;\n};\n\nclass ApiRefImpl<T> implements ApiRef<T> {\n  constructor(private readonly config: ApiRefConfig) {\n    const valid = config.id\n      .split('.')\n      .flatMap(part => part.split('-'))\n      .every(part => part.match(/^[a-z][a-z0-9]*$/));\n    if (!valid) {\n      throw new Error(\n        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`,\n      );\n    }\n  }\n\n  get id(): string {\n    return this.config.id;\n  }\n\n  get description() {\n    return this.config.description;\n  }\n\n  // Utility for getting type of an api, using `typeof apiRef.T`\n  get T(): T {\n    throw new Error(`tried to read ApiRef.T of ${this}`);\n  }\n\n  toString() {\n    return `apiRef{${this.config.id}}`;\n  }\n}\n\nexport function createApiRef<T>(config: ApiRefConfig): ApiRef<T> {\n  return new ApiRefImpl<T>(config);\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiFactory, TypesToApiRefs } from './types';\n\n/**\n * Used to infer types for a standalone ApiFactory that isn't immediately passed\n * to another function.\n * This function doesn't actually do anything, it's only used to infer types.\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown }\n>(factory: ApiFactory<Api, Impl, Deps>): ApiFactory<Api, Impl, Deps>;\nexport function createApiFactory<Api, Impl extends Api>(\n  api: ApiRef<Api>,\n  instance: Impl,\n): ApiFactory<Api, Impl, {}>;\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown }\n>(\n  factory: ApiFactory<Api, Impl, Deps> | ApiRef<Api>,\n  instance?: Impl,\n): ApiFactory<Api, Impl, Deps> {\n  if ('id' in factory) {\n    return {\n      api: factory,\n      deps: {} as TypesToApiRefs<Deps>,\n      factory: () => instance!,\n    };\n  }\n  return factory;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\n\n/**\n * This file contains declarations for common interfaces of auth-related APIs.\n * The declarations should be used to signal which type of authentication and\n * authorization methods each separate auth provider supports.\n *\n * For example, a Google OAuth provider that supports OAuth 2 and OpenID Connect,\n * would be declared as follows:\n *\n * const googleAuthApiRef = createApiRef<OAuthApi & OpenIDConnectApi>({ ... })\n */\n\n/**\n * An array of scopes, or a scope string formatted according to the\n * auth provider, which is typically a space separated list.\n *\n * See the documentation for each auth provider for the list of scopes\n * supported by each provider.\n */\nexport type OAuthScope = string | string[];\n\nexport type AuthRequestOptions = {\n  /**\n   * If this is set to true, the user will not be prompted to log in,\n   * and an empty response will be returned if there is no existing session.\n   *\n   * This can be used to perform a check whether the user is logged in, or if you don't\n   * want to force a user to be logged in, but provide functionality if they already are.\n   *\n   * @default false\n   */\n  optional?: boolean;\n\n  /**\n   * If this is set to true, the request will bypass the regular oauth login modal\n   * and open the login popup directly.\n   *\n   * The method must be called synchronously from a user action for this to work in all browsers.\n   *\n   * @default false\n   */\n  instantPopup?: boolean;\n};\n\n/**\n * This API provides access to OAuth 2 credentials. It lets you request access tokens,\n * which can be used to act on behalf of the user when talking to APIs.\n */\nexport type OAuthApi = {\n  /**\n   * Requests an OAuth 2 Access Token, optionally with a set of scopes. The access token allows\n   * you to make requests on behalf of the user, and the copes may grant you broader access, depending\n   * on the auth provider.\n   *\n   * Each auth provider has separate handling of scope, so you need to look at the documentation\n   * for each one to know what scope you need to request.\n   *\n   * This method is cheap and should be called each time an access token is used. Do not for example\n   * store the access token in React component state, as that could cause the token to expire. Instead\n   * fetch a new access token for each request.\n   *\n   * Be sure to include all required scopes when requesting an access token. When testing your implementation\n   * it is best to log out the Backstage session and then visit your plugin page directly, as\n   * you might already have some required scopes in your existing session. Not requesting the correct\n   * scopes can lead to 403 or other authorization errors, which can be tricky to debug.\n   *\n   * If the user has not yet granted access to the provider and the set of requested scopes, the user\n   * will be prompted to log in. The returned promise will not resolve until the user has\n   * successfully logged in. The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getAccessToken(\n    scope?: OAuthScope,\n    options?: AuthRequestOptions,\n  ): Promise<string>;\n};\n\n/**\n * This API provides access to OpenID Connect credentials. It lets you request ID tokens,\n * which can be passed to backend services to prove the user's identity.\n */\nexport type OpenIdConnectApi = {\n  /**\n   * Requests an OpenID Connect ID Token.\n   *\n   * This method is cheap and should be called each time an ID token is used. Do not for example\n   * store the id token in React component state, as that could cause the token to expire. Instead\n   * fetch a new id token for each request.\n   *\n   * If the user has not yet logged in to Google inside Backstage, the user will be prompted\n   * to log in. The returned promise will not resolve until the user has successfully logged in.\n   * The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getIdToken(options?: AuthRequestOptions): Promise<string>;\n};\n\n/**\n * This API provides access to profile information of the user from an auth provider.\n */\nexport type ProfileInfoApi = {\n  /**\n   * Get profile information for the user as supplied by this auth provider.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See @AuthRequestOptions for more details.\n   */\n  getProfile(options?: AuthRequestOptions): Promise<ProfileInfo | undefined>;\n};\n\n/**\n * This API provides access to the user's identity within Backstage.\n *\n * An auth provider that implements this interface can be used to sign-in to backstage. It is\n * not intended to be used directly from a plugin, but instead serves as a connection between\n * this authentication method and the app's @IdentityApi\n */\nexport type BackstageIdentityApi = {\n  /**\n   * Get the user's identity within Backstage. This should normally not be called directly,\n   * use the @IdentityApi instead.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See @AuthRequestOptions for more details.\n   */\n  getBackstageIdentity(\n    options?: AuthRequestOptions,\n  ): Promise<BackstageIdentity | undefined>;\n};\n\nexport type BackstageIdentity = {\n  /**\n   * The backstage user ID.\n   */\n  id: string;\n\n  /**\n   * An ID token that can be used to authenticate the user within Backstage.\n   */\n  idToken: string;\n};\n\n/**\n * Profile information of the user.\n */\nexport type ProfileInfo = {\n  /**\n   * Email ID.\n   */\n  email?: string;\n\n  /**\n   * Display name that can be presented to the user.\n   */\n  displayName?: string;\n\n  /**\n   * URL to an avatar image of the user.\n   */\n  picture?: string;\n};\n\n/**\n * Session state values passed to subscribers of the SessionApi.\n */\nexport enum SessionState {\n  SignedIn = 'SignedIn',\n  SignedOut = 'SignedOut',\n}\n\n/**\n * The SessionApi provides basic controls for any auth provider that is tied to a persistent session.\n */\nexport type SessionApi = {\n  /**\n   * Sign in with a minimum set of permissions.\n   */\n  signIn(): Promise<void>;\n\n  /**\n   * Sign out from the current session. This will reload the page.\n   */\n  signOut(): Promise<void>;\n\n  /**\n   * Observe the current state of the auth session. Emits the current state on subscription.\n   */\n  sessionState$(): Observable<SessionState>;\n};\n\n/**\n * Provides authentication towards Google APIs and identities.\n *\n * See https://developers.google.com/identity/protocols/googlescopes for a full list of supported scopes.\n *\n * Note that the ID token payload is only guaranteed to contain the user's numerical Google ID,\n * email and expiration information. Do not rely on any other fields, as they might not be present.\n */\nexport const googleAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.google',\n  description: 'Provides authentication towards Google APIs and identities',\n});\n\n/**\n * Provides authentication towards GitHub APIs.\n *\n * See https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\n * for a full list of supported scopes.\n */\nexport const githubAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.github',\n  description: 'Provides authentication towards GitHub APIs',\n});\n\n/**\n * Provides authentication towards Okta APIs.\n *\n * See https://developer.okta.com/docs/guides/implement-oauth-for-okta/scopes/\n * for a full list of supported scopes.\n */\nexport const oktaAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.okta',\n  description: 'Provides authentication towards Okta APIs',\n});\n\n/**\n * Provides authentication towards GitLab APIs.\n *\n * See https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#limiting-scopes-of-a-personal-access-token\n * for a full list of supported scopes.\n */\nexport const gitlabAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.gitlab',\n  description: 'Provides authentication towards GitLab APIs',\n});\n\n/**\n * Provides authentication towards Auth0 APIs.\n *\n * See https://auth0.com/docs/scopes/current/oidc-scopes\n * for a full list of supported scopes.\n */\nexport const auth0AuthApiRef: ApiRef<\n  OpenIdConnectApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.auth0',\n  description: 'Provides authentication towards Auth0 APIs',\n});\n\n/**\n * Provides authentication towards Microsoft APIs and identities.\n *\n * For more info and a full list of supported scopes, see:\n * - https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent\n * - https://docs.microsoft.com/en-us/graph/permissions-reference\n */\nexport const microsoftAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.microsoft',\n  description: 'Provides authentication towards Microsoft APIs and identities',\n});\n\n/**\n * Provides authentication for custom identity providers.\n */\nexport const oauth2ApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.oauth2',\n  description: 'Example of how to use oauth2 custom provider',\n});\n\n/**\n * Provides authentication for custom OpenID Connect identity providers.\n */\nexport const oidcAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.oidc',\n  description: 'Example of how to use oidc custom provider',\n});\n\n/**\n * Provides authentication for saml based identity providers\n */\nexport const samlAuthApiRef: ApiRef<\n  ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.saml',\n  description: 'Example of how to use SAML custom provider',\n});\n\nexport const oneloginAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.onelogin',\n  description: 'Provides authentication towards OneLogin APIs and identities',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createApiRef, ApiRef } from '../system';\nimport { Observable } from '../../types';\n\nexport type AlertMessage = {\n  message: string;\n  // Severity will default to success since that is what material ui defaults the value to.\n  severity?: 'success' | 'info' | 'warning' | 'error';\n};\n\n/**\n * The alert API is used to report alerts to the app, and display them to the user.\n */\n\nexport type AlertApi = {\n  /**\n   * Post an alert for handling by the application.\n   */\n  post(alert: AlertMessage): void;\n\n  /**\n   * Observe alerts posted by other parts of the application.\n   */\n  alert$(): Observable<AlertMessage>;\n};\n\nexport const alertApiRef: ApiRef<AlertApi> = createApiRef({\n  id: 'core.alert',\n  description: 'Used to report alerts and forward them to the app',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { BackstageTheme } from '@backstage/theme';\nimport { Observable } from '../../types';\nimport { SvgIconProps } from '@material-ui/core';\n\n/**\n * Describes a theme provided by the app.\n */\nexport type AppTheme = {\n  /**\n   * ID used to remember theme selections.\n   */\n  id: string;\n\n  /**\n   * Title of the theme\n   */\n  title: string;\n\n  /**\n   * Theme variant\n   */\n  variant: 'light' | 'dark';\n\n  /**\n   * The specialized MaterialUI theme instance.\n   */\n  theme: BackstageTheme;\n\n  /**\n   * An Icon for the theme mode setting.\n   */\n  icon?: React.ReactElement<SvgIconProps>;\n};\n\n/**\n * The AppThemeApi gives access to the current app theme, and allows switching\n * to other options that have been registered as a part of the App.\n */\nexport type AppThemeApi = {\n  /**\n   * Get a list of available themes.\n   */\n  getInstalledThemes(): AppTheme[];\n\n  /**\n   * Observe the currently selected theme. A value of undefined means no specific theme has been selected.\n   */\n  activeThemeId$(): Observable<string | undefined>;\n\n  /**\n   * Get the current theme ID. Returns undefined if no specific theme is selected.\n   */\n  getActiveThemeId(): string | undefined;\n\n  /**\n   * Set a specific theme to use in the app, overriding the default theme selection.\n   *\n   * Clear the selection by passing in undefined.\n   */\n  setActiveThemeId(themeId?: string): void;\n};\n\nexport const appThemeApiRef: ApiRef<AppThemeApi> = createApiRef({\n  id: 'core.apptheme',\n  description: 'API Used to configure the app theme, and enumerate options',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { Config } from '@backstage/config';\n\n/**\n * The Config API is used to provide a mechanism to access the\n * runtime configuration of the system.\n */\nexport type ConfigApi = Config;\n\nexport const configApiRef: ApiRef<ConfigApi> = createApiRef({\n  id: 'core.config',\n  description: 'Used to access runtime configuration',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The discovery API is used to provide a mechanism for plugins to\n * discover the endpoint to use to talk to their backend counterpart.\n *\n * The purpose of the discovery API is to allow for many different deployment\n * setups and routing methods through a central configuration, instead\n * of letting each individual plugin manage that configuration.\n *\n * Implementations of the discovery API can be a simple as a URL pattern\n * using the pluginId, but could also have overrides for individual plugins,\n * or query a separate discovery service.\n */\nexport type DiscoveryApi = {\n  /**\n   * Returns the HTTP base backend URL for a given plugin, without a trailing slash.\n   *\n   * This method must always be called just before making a request, as opposed to\n   * fetching the URL when constructing an API client. That is to ensure that more\n   * flexible routing patterns can be supported.\n   *\n   * For example, asking for the URL for `auth` may return something\n   * like `https://backstage.example.com/api/auth`\n   */\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\nexport const discoveryApiRef: ApiRef<DiscoveryApi> = createApiRef({\n  id: 'core.discovery',\n  description: 'Provides service discovery of backend plugins',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\n\n/**\n * Mirrors the JavaScript Error class, for the purpose of\n * providing documentation and optional fields.\n */\ntype Error = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\n/**\n * Provides additional information about an error that was posted to the application.\n */\nexport type ErrorContext = {\n  // If set to true, this error should not be displayed to the user. Defaults to false.\n  hidden?: boolean;\n};\n\n/**\n * The error API is used to report errors to the app, and display them to the user.\n *\n * Plugins can use this API as a method of displaying errors to the user, but also\n * to report errors for collection by error reporting services.\n *\n * If an error can be displayed inline, e.g. as feedback in a form, that should be\n * preferred over relying on this API to display the error. The main use of this API\n * for displaying errors should be for asynchronous errors, such as a failing background process.\n *\n * Even if an error is displayed inline, it should still be reported through this API\n * if it would be useful to collect or log it for debugging purposes, but with\n * the hidden flag set. For example, an error arising from form field validation\n * should probably not be reported, while a failed REST call would be useful to report.\n */\nexport type ErrorApi = {\n  /**\n   * Post an error for handling by the application.\n   */\n  post(error: Error, context?: ErrorContext): void;\n\n  /**\n   * Observe errors posted by other parts of the application.\n   */\n  error$(): Observable<{ error: Error; context?: ErrorContext }>;\n};\n\nexport const errorApiRef: ApiRef<ErrorApi> = createApiRef({\n  id: 'core.error',\n  description: 'Used to report errors and forward them to the app',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The feature flags API is used to toggle functionality to users across plugins and Backstage.\n *\n * Plugins can use this API to register feature flags that they have available\n * for users to enable/disable, and this API will centralize the current user's\n * state of which feature flags they would like to enable.\n *\n * This is ideal for Backstage plugins, as well as your own App, to trial incomplete\n * or unstable upcoming features. Although there will be a common interface for users\n * to enable and disable feature flags, this API acts as another way to enable/disable.\n */\n\nexport type FeatureFlag = {\n  name: string;\n  pluginId: string;\n};\n\nexport enum FeatureFlagState {\n  None = 0,\n  Active = 1,\n}\n\n/**\n * Options to use when saving feature flags.\n */\nexport type FeatureFlagsSaveOptions = {\n  /**\n   * The new feature flag states to save.\n   */\n  states: Record<string, FeatureFlagState>;\n\n  /**\n   * Whether the saves states should be merged into the existing ones, or replace them.\n   *\n   * Defaults to false.\n   */\n  merge?: boolean;\n};\n\nexport type UserFlags = {};\n\nexport interface FeatureFlagsApi {\n  /**\n   * Registers a new feature flag. Once a feature flag has been registered it\n   * can be toggled by users, and read back to enable or disable features.\n   */\n  registerFlag(flag: FeatureFlag): void;\n\n  /**\n   * Get a list of all registered flags.\n   */\n  getRegisteredFlags(): FeatureFlag[];\n\n  /**\n   * Whether the feature flag with the given name is currently activated for the user.\n   */\n  isActive(name: string): boolean;\n\n  /**\n   * Save the user's choice of feature flag states.\n   */\n  save(options: FeatureFlagsSaveOptions): void;\n}\n\nexport const featureFlagsApiRef: ApiRef<FeatureFlagsApi> = createApiRef({\n  id: 'core.featureflags',\n  description: 'Used to toggle functionality in features across Backstage',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { ProfileInfo } from './auth';\n\n/**\n * The Identity API used to identify and get information about the signed in user.\n */\nexport type IdentityApi = {\n  /**\n   * The ID of the signed in user. This ID is not meant to be presented to the user, but used\n   * as an opaque string to pass on to backends or use in frontend logic.\n   *\n   * TODO: The intention of the user ID is to be able to tie the user to an identity\n   *       that is known by the catalog and/or identity backend. It should for example\n   *       be possible to fetch all owned components using this ID.\n   */\n  getUserId(): string;\n\n  // TODO: getProfile(): Promise<Profile> - We want this to be async when added, but needs more work.\n  /**\n   * The profile of the signed in user.\n   */\n  getProfile(): ProfileInfo;\n\n  /**\n   * An OpenID Connect ID Token which proves the identity of the signed in user.\n   *\n   * The ID token will be undefined if the signed in user does not have a verified\n   * identity, such as a demo user or mocked user for e2e tests.\n   */\n  getIdToken(): Promise<string | undefined>;\n\n  /**\n   * Sign out the current user\n   */\n  signOut(): Promise<void>;\n};\n\nexport const identityApiRef: ApiRef<IdentityApi> = createApiRef({\n  id: 'core.identity',\n  description: 'Provides access to the identity of the signed in user',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IconComponent } from '../../icons/types';\nimport { Observable } from '../../types';\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * Information about the auth provider that we're requesting a login towards.\n *\n * This should be shown to the user so that they can be informed about what login is being requested\n * before a popup is shown.\n */\nexport type AuthProvider = {\n  /**\n   * Title for the auth provider, for example \"GitHub\"\n   */\n  title: string;\n\n  /**\n   * Icon for the auth provider.\n   */\n  icon: IconComponent;\n};\n\n/**\n * Describes how to handle auth requests. Both how to show them to the user, and what to do when\n * the user accesses the auth request.\n */\nexport type AuthRequesterOptions<AuthResponse> = {\n  /**\n   * Information about the auth provider, which will be forwarded to auth requests.\n   */\n  provider: AuthProvider;\n\n  /**\n   * Implementation of the auth flow, which will be called synchronously when\n   * trigger() is called on an auth requests.\n   */\n  onAuthRequest(scopes: Set<string>): Promise<AuthResponse>;\n};\n\n/**\n * Function used to trigger new auth requests for a set of scopes.\n *\n * The returned promise will resolve to the same value returned by the onAuthRequest in the\n * AuthRequesterOptions. Or rejected, if the request is rejected.\n *\n * This function can be called multiple times before the promise resolves. All calls\n * will be merged into one request, and the scopes forwarded to the onAuthRequest will be the\n * union of all requested scopes.\n */\nexport type AuthRequester<AuthResponse> = (\n  scopes: Set<string>,\n) => Promise<AuthResponse>;\n\n/**\n * An pending auth request for a single auth provider. The request will remain in this pending\n * state until either reject() or trigger() is called.\n *\n * Any new requests for the same provider are merged into the existing pending request, meaning\n * there will only ever be a single pending request for a given provider.\n */\nexport type PendingAuthRequest = {\n  /**\n   * Information about the auth provider, as given in the AuthRequesterOptions\n   */\n  provider: AuthProvider;\n\n  /**\n   * Rejects the request, causing all pending AuthRequester calls to fail with \"RejectedError\".\n   */\n  reject: () => void;\n\n  /**\n   * Trigger the auth request to continue the auth flow, by for example showing a popup.\n   *\n   * Synchronously calls onAuthRequest with all scope currently in the request.\n   */\n  trigger(): Promise<void>;\n};\n\n/**\n * Provides helpers for implemented OAuth login flows within Backstage.\n */\nexport type OAuthRequestApi = {\n  /**\n   * A utility for showing login popups or similar things, and merging together multiple requests for\n   * different scopes into one request that includes all scopes.\n   *\n   * The passed in options provide information about the login provider, and how to handle auth requests.\n   *\n   * The returned AuthRequester function is used to request login with new scopes. These requests\n   * are merged together and forwarded to the auth handler, as soon as a consumer of auth requests\n   * triggers an auth flow.\n   *\n   * See AuthRequesterOptions, AuthRequester, and handleAuthRequests for more info.\n   */\n  createAuthRequester<AuthResponse>(\n    options: AuthRequesterOptions<AuthResponse>,\n  ): AuthRequester<AuthResponse>;\n\n  /**\n   * Observers pending auth requests. The returned observable will emit all\n   * current active auth request, at most one for each created auth requester.\n   *\n   * Each request has its own info about the login provider, forwarded from the auth requester options.\n   *\n   * Depending on user interaction, the request should either be rejected, or used to trigger the auth handler.\n   * If the request is rejected, all pending AuthRequester calls will fail with a \"RejectedError\".\n   * If a auth is triggered, and the auth handler resolves successfully, then all currently pending\n   * AuthRequester calls will resolve to the value returned by the onAuthRequest call.\n   */\n  authRequest$(): Observable<PendingAuthRequest[]>;\n};\n\nexport const oauthRequestApiRef: ApiRef<OAuthRequestApi> = createApiRef({\n  id: 'core.oauthrequest',\n  description: 'An API for implementing unified OAuth flows in Backstage',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '../../types';\nimport { ErrorApi } from './ErrorApi';\n\nexport type StorageValueChange<T = any> = {\n  key: string;\n  newValue?: T;\n};\n\nexport type CreateStorageApiOptions = {\n  errorApi: ErrorApi;\n  namespace?: string;\n};\n\nexport interface StorageApi {\n  /**\n   * Create a bucket to store data in.\n   * @param {String} name Namespace for the storage to be stored under,\n   *                      will inherit previous namespaces too\n   */\n  forBucket(name: string): StorageApi;\n\n  /**\n   * Get the current value for persistent data, use observe$ to be notified of updates.\n   *\n   * @param {String} key Unique key associated with the data.\n   * @return {Object} data The data that should is stored.\n   */\n  get<T>(key: string): T | undefined;\n\n  /**\n   * Remove persistent data.\n   *\n   * @param {String} key Unique key associated with the data.\n   */\n  remove(key: string): Promise<void>;\n\n  /**\n   * Save persistent data, and emit messages to anyone that is using observe$ for this key\n   *\n   * @param {String} key Unique key associated with the data.\n   */\n  set(key: string, data: any): Promise<void>;\n\n  /**\n   * Observe changes on a particular key in the bucket\n   * @param {String} key Unique key associated with the data\n   */\n  observe$<T>(key: string): Observable<StorageValueChange<T>>;\n}\n\nexport const storageApiRef: ApiRef<StorageApi> = createApiRef({\n  id: 'core.storage',\n  description: 'Provides the ability to store data which is unique to the user',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Options used to open a login popup.\n */\nexport type LoginPopupOptions = {\n  /**\n   * The URL that the auth popup should point to\n   */\n  url: string;\n\n  /**\n   * The name of the popup, as in second argument to window.open\n   */\n  name: string;\n\n  /**\n   * The origin of the final popup page that will post a message to this window.\n   */\n  origin: string;\n\n  /**\n   * The width of the popup in pixels, defaults to 500\n   */\n  width?: number;\n\n  /**\n   * The height of the popup in pixels, defaults to 700\n   */\n  height?: number;\n};\n\ntype AuthResult =\n  | {\n      type: 'authorization_response';\n      response: unknown;\n    }\n  | {\n      type: 'authorization_response';\n      error: {\n        name: string;\n        message: string;\n      };\n    };\n\n/**\n * Show a popup pointing to a URL that starts an auth flow. Implementing the receiving\n * end of the postMessage mechanism outlined in https://tools.ietf.org/html/draft-sakimura-oauth-wmrm-00\n *\n * The redirect handler of the flow should use postMessage to communicate back\n * to the app window. The message posted to the app must match the AuthResult type.\n *\n * The returned promise resolves to the response of the message that was posted from the auth popup.\n */\nexport function showLoginPopup(options: LoginPopupOptions): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const width = options.width || 500;\n    const height = options.height || 700;\n    const left = window.screen.width / 2 - width / 2;\n    const top = window.screen.height / 2 - height / 2;\n\n    const popup = window.open(\n      options.url,\n      options.name,\n      `menubar=no,location=no,resizable=no,scrollbars=no,status=no,width=${width},height=${height},top=${top},left=${left}`,\n    );\n\n    let targetOrigin = '';\n\n    if (!popup || typeof popup.closed === 'undefined' || popup.closed) {\n      const error = new Error('Failed to open auth popup.');\n      error.name = 'PopupRejectedError';\n      reject(error);\n      return;\n    }\n\n    const messageListener = (event: MessageEvent) => {\n      if (event.source !== popup) {\n        return;\n      }\n      if (event.origin !== options.origin) {\n        return;\n      }\n      const { data } = event;\n\n      if (data.type === 'config_info') {\n        targetOrigin = data.targetOrigin;\n        return;\n      }\n\n      if (data.type !== 'authorization_response') {\n        return;\n      }\n      const authResult = data as AuthResult;\n\n      if ('error' in authResult) {\n        const error = new Error(authResult.error.message);\n        error.name = authResult.error.name;\n        // TODO: proper error type\n        // error.extra = authResult.error.extra;\n        reject(error);\n      } else {\n        resolve(authResult.response);\n      }\n      done();\n    };\n\n    const intervalId = setInterval(() => {\n      if (popup.closed) {\n        const errMessage = `Login failed, ${\n          targetOrigin && targetOrigin !== window.location.origin\n            ? `Incorrect app origin, expected ${targetOrigin}`\n            : 'popup was closed'\n        }`;\n        const error = new Error(errMessage);\n        error.name = 'PopupClosedError';\n        reject(error);\n        done();\n      }\n    }, 100);\n\n    function done() {\n      window.removeEventListener('message', messageListener);\n      clearInterval(intervalId);\n    }\n\n    window.addEventListener('message', messageListener);\n  });\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthRequester,\n  OAuthRequestApi,\n  AuthProvider,\n  DiscoveryApi,\n} from '../../apis/definitions';\nimport { showLoginPopup } from '../loginPopup';\nimport { AuthConnector, CreateSessionOptions } from './types';\n\ntype Options<AuthSession> = {\n  /**\n   * DiscoveryApi instance used to locate the auth backend endpoint.\n   */\n  discoveryApi: DiscoveryApi;\n  /**\n   * Environment hint passed on to auth backend, for example 'production' or 'development'\n   */\n  environment: string;\n  /**\n   * Information about the auth provider to be shown to the user.\n   * The ID Must match the backend auth plugin configuration, for example 'google'.\n   */\n  provider: AuthProvider & { id: string };\n  /**\n   * API used to instantiate an auth requester.\n   */\n  oauthRequestApi: OAuthRequestApi;\n  /**\n   * Function used to join together a set of scopes, defaults to joining with a space character.\n   */\n  joinScopes?: (scopes: Set<string>) => string;\n  /**\n   * Function used to transform an auth response into the session type.\n   */\n  sessionTransform?(response: any): AuthSession | Promise<AuthSession>;\n};\n\nfunction defaultJoinScopes(scopes: Set<string>) {\n  return [...scopes].join(' ');\n}\n\n/**\n * DefaultAuthConnector is the default auth connector in Backstage. It talks to the\n * backend auth plugin through the standardized API, and requests user permission\n * via the OAuthRequestApi.\n */\nexport class DefaultAuthConnector<AuthSession>\n  implements AuthConnector<AuthSession> {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly environment: string;\n  private readonly provider: AuthProvider & { id: string };\n  private readonly joinScopesFunc: (scopes: Set<string>) => string;\n  private readonly authRequester: AuthRequester<AuthSession>;\n  private readonly sessionTransform: (response: any) => Promise<AuthSession>;\n\n  constructor(options: Options<AuthSession>) {\n    const {\n      discoveryApi,\n      environment,\n      provider,\n      joinScopes = defaultJoinScopes,\n      oauthRequestApi,\n      sessionTransform = id => id,\n    } = options;\n\n    this.authRequester = oauthRequestApi.createAuthRequester({\n      provider,\n      onAuthRequest: scopes => this.showPopup(scopes),\n    });\n\n    this.discoveryApi = discoveryApi;\n    this.environment = environment;\n    this.provider = provider;\n    this.joinScopesFunc = joinScopes;\n    this.sessionTransform = sessionTransform;\n  }\n\n  async createSession(options: CreateSessionOptions): Promise<AuthSession> {\n    if (options.instantPopup) {\n      return this.showPopup(options.scopes);\n    }\n    return this.authRequester(options.scopes);\n  }\n\n  async refreshSession(): Promise<any> {\n    const res = await fetch(\n      await this.buildUrl('/refresh', { optional: true }),\n      {\n        headers: {\n          'x-requested-with': 'XMLHttpRequest',\n        },\n        credentials: 'include',\n      },\n    ).catch(error => {\n      throw new Error(`Auth refresh request failed, ${error}`);\n    });\n\n    if (!res.ok) {\n      const error: any = new Error(\n        `Auth refresh request failed, ${res.statusText}`,\n      );\n      error.status = res.status;\n      throw error;\n    }\n\n    const authInfo = await res.json();\n\n    if (authInfo.error) {\n      const error = new Error(authInfo.error.message);\n      if (authInfo.error.name) {\n        error.name = authInfo.error.name;\n      }\n      throw error;\n    }\n    return await this.sessionTransform(authInfo);\n  }\n\n  async removeSession(): Promise<void> {\n    const res = await fetch(await this.buildUrl('/logout'), {\n      method: 'POST',\n      headers: {\n        'x-requested-with': 'XMLHttpRequest',\n      },\n      credentials: 'include',\n    }).catch(error => {\n      throw new Error(`Logout request failed, ${error}`);\n    });\n\n    if (!res.ok) {\n      const error: any = new Error(`Logout request failed, ${res.statusText}`);\n      error.status = res.status;\n      throw error;\n    }\n  }\n\n  private async showPopup(scopes: Set<string>): Promise<AuthSession> {\n    const scope = this.joinScopesFunc(scopes);\n    const popupUrl = await this.buildUrl('/start', { scope });\n\n    const payload = await showLoginPopup({\n      url: popupUrl,\n      name: `${this.provider.title} Login`,\n      origin: new URL(popupUrl).origin,\n      width: 450,\n      height: 730,\n    });\n\n    return await this.sessionTransform(payload);\n  }\n\n  private async buildUrl(\n    path: string,\n    query?: { [key: string]: string | boolean | undefined },\n  ): Promise<string> {\n    const baseUrl = await this.discoveryApi.getBaseUrl('auth');\n    const queryString = this.buildQueryString({\n      ...query,\n      env: this.environment,\n    });\n\n    return `${baseUrl}/${this.provider.id}${path}${queryString}`;\n  }\n\n  private buildQueryString(query?: {\n    [key: string]: string | boolean | undefined;\n  }): string {\n    if (!query) {\n      return '';\n    }\n\n    const queryString = Object.entries<string | boolean | undefined>(query)\n      .map(([key, value]) => {\n        if (typeof value === 'string') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        } else if (value) {\n          return encodeURIComponent(key);\n        }\n        return undefined;\n      })\n      .filter(Boolean)\n      .join('&');\n\n    if (!queryString) {\n      return '';\n    }\n    return `?${queryString}`;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AuthProvider, DiscoveryApi } from '../../apis/definitions';\nimport { showLoginPopup } from '../loginPopup';\n\ntype Options = {\n  discoveryApi: DiscoveryApi;\n  environment?: string;\n  provider: AuthProvider & { id: string };\n};\nexport class DirectAuthConnector<DirectAuthResponse> {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly environment: string | undefined;\n  private readonly provider: AuthProvider & { id: string };\n\n  constructor(options: Options) {\n    const { discoveryApi, environment, provider } = options;\n\n    this.discoveryApi = discoveryApi;\n    this.environment = environment;\n    this.provider = provider;\n  }\n\n  async createSession(): Promise<DirectAuthResponse> {\n    const popupUrl = await this.buildUrl('/start');\n    const payload = await showLoginPopup({\n      url: popupUrl,\n      name: `${this.provider.title} Login`,\n      origin: new URL(popupUrl).origin,\n      width: 450,\n      height: 730,\n    });\n\n    return {\n      ...payload,\n      id: payload.profile.email,\n    };\n  }\n\n  async refreshSession(): Promise<any> {}\n\n  async removeSession(): Promise<void> {\n    const res = await fetch(await this.buildUrl('/logout'), {\n      method: 'POST',\n      headers: {\n        'x-requested-with': 'XMLHttpRequest',\n      },\n      credentials: 'include',\n    }).catch(error => {\n      throw new Error(`Logout request failed, ${error}`);\n    });\n\n    if (!res.ok) {\n      const error: any = new Error(`Logout request failed, ${res.statusText}`);\n      error.status = res.status;\n      throw error;\n    }\n  }\n\n  private async buildUrl(path: string): Promise<string> {\n    const baseUrl = await this.discoveryApi.getBaseUrl('auth');\n    return `${baseUrl}/${this.provider.id}${path}?env=${this.environment}`;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SessionScopesFunc } from './types';\n\nexport function hasScopes(\n  searched: Set<string>,\n  searchFor: Set<string>,\n): boolean {\n  for (const scope of searchFor) {\n    if (!searched.has(scope)) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype ScopeHelperOptions<T> = {\n  sessionScopes: SessionScopesFunc<T> | undefined;\n  defaultScopes?: Set<string>;\n};\n\nexport class SessionScopeHelper<T> {\n  constructor(private readonly options: ScopeHelperOptions<T>) {}\n\n  sessionExistsAndHasScope(\n    session: T | undefined,\n    scopes?: Set<string>,\n  ): boolean {\n    if (!session) {\n      return false;\n    }\n    if (!scopes) {\n      return true;\n    }\n    if (this.options.sessionScopes === undefined) {\n      return true;\n    }\n    const sessionScopes = this.options.sessionScopes(session);\n    return hasScopes(sessionScopes, scopes);\n  }\n\n  getExtendedScope(session: T | undefined, scopes?: Set<string>) {\n    const newScope = new Set(this.options.defaultScopes);\n    if (session && this.options.sessionScopes !== undefined) {\n      const sessionScopes = this.options.sessionScopes(session);\n      for (const scope of sessionScopes) {\n        newScope.add(scope);\n      }\n    }\n    if (scopes) {\n      for (const scope of scopes) {\n        newScope.add(scope);\n      }\n    }\n    return newScope;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '../types';\nimport ObservableImpl from 'zen-observable';\n\n// TODO(Rugvip): These are stopgap and probably incomplete implementations of subjects.\n// If we add a more complete Observables library they should be replaced.\n\n/**\n * A basic implementation of ReactiveX publish subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * See http://reactivex.io/documentation/subject.html\n */\nexport class PublishSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T> {\n  private isClosed = false;\n  private terminatingError?: Error;\n\n  private readonly observable = new ObservableImpl<T>(subscriber => {\n    if (this.isClosed) {\n      if (this.terminatingError) {\n        subscriber.error(this.terminatingError);\n      } else {\n        subscriber.complete();\n      }\n      return () => {};\n    }\n\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  });\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n\n/**\n * A basic implementation of ReactiveX behavior subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * The BehaviorSubject will emit the most recently emitted value or error\n * whenever a new observer subscribes to the subject.\n *\n * See http://reactivex.io/documentation/subject.html\n */\nexport class BehaviorSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T> {\n  private isClosed = false;\n  private currentValue: T;\n  private terminatingError?: Error;\n\n  constructor(value: T) {\n    this.currentValue = value;\n  }\n\n  private readonly observable = new ObservableImpl<T>(subscriber => {\n    if (this.isClosed) {\n      if (this.terminatingError) {\n        subscriber.error(this.terminatingError);\n      } else {\n        subscriber.complete();\n      }\n      return () => {};\n    }\n\n    subscriber.next(this.currentValue);\n\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  });\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.currentValue = value;\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SessionState } from '../../apis/definitions';\nimport { Observable } from '../../types';\nimport { BehaviorSubject } from '../subjects';\n\nexport class SessionStateTracker {\n  private readonly subject = new BehaviorSubject<SessionState>(\n    SessionState.SignedOut,\n  );\n\n  private signedIn: boolean = false;\n\n  setIsSignedIn(isSignedIn: boolean) {\n    if (this.signedIn !== isSignedIn) {\n      this.signedIn = isSignedIn;\n      this.subject.next(\n        this.signedIn ? SessionState.SignedIn : SessionState.SignedOut,\n      );\n    }\n  }\n\n  sessionState$(): Observable<SessionState> {\n    return this.subject;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SessionManager,\n  SessionScopesFunc,\n  SessionShouldRefreshFunc,\n  GetSessionOptions,\n} from './types';\nimport { AuthConnector } from '../AuthConnector';\nimport { SessionScopeHelper, hasScopes } from './common';\nimport { SessionStateTracker } from './SessionStateTracker';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  connector: AuthConnector<T>;\n  /** Used to get the scope of the session */\n  sessionScopes: SessionScopesFunc<T>;\n  /** Used to check if the session needs to be refreshed */\n  sessionShouldRefresh: SessionShouldRefreshFunc<T>;\n  /** The default scopes that should always be present in a session, defaults to none. */\n  defaultScopes?: Set<string>;\n};\n\n/**\n * RefreshingAuthSessionManager manages an underlying session that has\n * and expiration time and needs to be refreshed periodically.\n */\nexport class RefreshingAuthSessionManager<T> implements SessionManager<T> {\n  private readonly connector: AuthConnector<T>;\n  private readonly helper: SessionScopeHelper<T>;\n  private readonly sessionScopesFunc: SessionScopesFunc<T>;\n  private readonly sessionShouldRefreshFunc: SessionShouldRefreshFunc<T>;\n  private readonly stateTracker = new SessionStateTracker();\n\n  private refreshPromise?: Promise<T>;\n  private currentSession: T | undefined;\n\n  constructor(options: Options<T>) {\n    const {\n      connector,\n      defaultScopes = new Set(),\n      sessionScopes,\n      sessionShouldRefresh,\n    } = options;\n\n    this.connector = connector;\n    this.sessionScopesFunc = sessionScopes;\n    this.sessionShouldRefreshFunc = sessionShouldRefresh;\n    this.helper = new SessionScopeHelper({ sessionScopes, defaultScopes });\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    if (\n      this.helper.sessionExistsAndHasScope(this.currentSession, options.scopes)\n    ) {\n      const shouldRefresh = this.sessionShouldRefreshFunc(this.currentSession!);\n      if (!shouldRefresh) {\n        return this.currentSession!;\n      }\n\n      try {\n        const refreshedSession = await this.collapsedSessionRefresh();\n        const currentScopes = this.sessionScopesFunc(this.currentSession!);\n        const refreshedScopes = this.sessionScopesFunc(refreshedSession);\n        if (hasScopes(refreshedScopes, currentScopes)) {\n          this.currentSession = refreshedSession;\n        }\n        return refreshedSession;\n      } catch (error) {\n        if (options.optional) {\n          return undefined;\n        }\n        throw error;\n      }\n    }\n\n    // The user may still have a valid refresh token in their cookies. Attempt to\n    // initiate a fresh session through the backend using that refresh token.\n    //\n    // We skip this check if an instant login popup is requested, as we need to\n    // stay in a synchronous call stack from the user interaction. The downside\n    // is that that the user will sometimes be requested to log in even if they\n    // already had an existing session.\n    if (!this.currentSession && !options.instantPopup) {\n      try {\n        const newSession = await this.collapsedSessionRefresh();\n        this.currentSession = newSession;\n        // The session might not have the scopes requested so go back and check again\n        return this.getSession(options);\n      } catch {\n        // If the refresh attempt fails we assume we don't have a session, so continue to create one.\n      }\n    }\n\n    // If we continue here we will show a popup, so exit if this is an optional session request.\n    if (options.optional) {\n      return undefined;\n    }\n\n    // We can call authRequester multiple times, the returned session will contain all requested scopes.\n    this.currentSession = await this.connector.createSession({\n      ...options,\n      scopes: this.helper.getExtendedScope(this.currentSession, options.scopes),\n    });\n    this.stateTracker.setIsSignedIn(true);\n    return this.currentSession;\n  }\n\n  async removeSession() {\n    this.currentSession = undefined;\n    await this.connector.removeSession();\n    this.stateTracker.setIsSignedIn(false);\n  }\n\n  sessionState$() {\n    return this.stateTracker.sessionState$();\n  }\n\n  private async collapsedSessionRefresh(): Promise<T> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    this.refreshPromise = this.connector.refreshSession();\n\n    try {\n      const session = await this.refreshPromise;\n      this.stateTracker.setIsSignedIn(true);\n      return session;\n    } finally {\n      delete this.refreshPromise;\n    }\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MutableSessionManager, GetSessionOptions } from './types';\nimport { AuthConnector } from '../AuthConnector';\nimport { SessionScopeHelper } from './common';\nimport { SessionStateTracker } from './SessionStateTracker';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  connector: AuthConnector<T>;\n  /** Used to get the scope of the session */\n  sessionScopes?: (session: T) => Set<string>;\n  /** The default scopes that should always be present in a session, defaults to none. */\n  defaultScopes?: Set<string>;\n};\n\n/**\n * StaticAuthSessionManager manages an underlying session that does not expire.\n */\nexport class StaticAuthSessionManager<T> implements MutableSessionManager<T> {\n  private readonly connector: AuthConnector<T>;\n  private readonly helper: SessionScopeHelper<T>;\n  private readonly stateTracker = new SessionStateTracker();\n\n  private currentSession: T | undefined;\n\n  constructor(options: Options<T>) {\n    const { connector, defaultScopes = new Set(), sessionScopes } = options;\n\n    this.connector = connector;\n    this.helper = new SessionScopeHelper({ sessionScopes, defaultScopes });\n  }\n\n  setSession(session: T | undefined): void {\n    this.currentSession = session;\n    this.stateTracker.setIsSignedIn(Boolean(session));\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    if (\n      this.helper.sessionExistsAndHasScope(this.currentSession, options.scopes)\n    ) {\n      return this.currentSession;\n    }\n\n    // If we continue here we will show a popup, so exit if this is an optional session request.\n    if (options.optional) {\n      return undefined;\n    }\n\n    // We can call authRequester multiple times, the returned session will contain all requested scopes.\n    this.currentSession = await this.connector.createSession({\n      ...options,\n      scopes: this.helper.getExtendedScope(this.currentSession, options.scopes),\n    });\n    this.stateTracker.setIsSignedIn(true);\n    return this.currentSession;\n  }\n\n  async removeSession() {\n    this.currentSession = undefined;\n    await this.connector.removeSession();\n    this.stateTracker.setIsSignedIn(false);\n  }\n\n  sessionState$() {\n    return this.stateTracker.sessionState$();\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SessionManager,\n  MutableSessionManager,\n  SessionScopesFunc,\n  SessionShouldRefreshFunc,\n  GetSessionOptions,\n} from './types';\nimport { SessionScopeHelper } from './common';\n\ntype Options<T> = {\n  /** The connector used for acting on the auth session */\n  manager: MutableSessionManager<T>;\n  /** Storage key to use to store sessions */\n  storageKey: string;\n  /** Used to get the scope of the session */\n  sessionScopes?: SessionScopesFunc<T>;\n  /** Used to check if the session needs to be refreshed, defaults to never refresh */\n  sessionShouldRefresh?: SessionShouldRefreshFunc<T>;\n};\n\n/**\n * AuthSessionStore decorates another SessionManager with a functionality\n * to store the session in local storage.\n *\n * Session is serialized to JSON with special support for following types: Set.\n */\nexport class AuthSessionStore<T> implements SessionManager<T> {\n  private readonly manager: MutableSessionManager<T>;\n  private readonly storageKey: string;\n  private readonly sessionShouldRefreshFunc: SessionShouldRefreshFunc<T>;\n  private readonly helper: SessionScopeHelper<T>;\n\n  constructor(options: Options<T>) {\n    const {\n      manager,\n      storageKey,\n      sessionScopes,\n      sessionShouldRefresh = () => false,\n    } = options;\n\n    this.manager = manager;\n    this.storageKey = storageKey;\n    this.sessionShouldRefreshFunc = sessionShouldRefresh;\n    this.helper = new SessionScopeHelper({\n      sessionScopes,\n      defaultScopes: new Set(),\n    });\n  }\n\n  async getSession(options: GetSessionOptions): Promise<T | undefined> {\n    const { scopes } = options;\n    const session = this.loadSession();\n\n    if (this.helper.sessionExistsAndHasScope(session, scopes)) {\n      const shouldRefresh = this.sessionShouldRefreshFunc(session!);\n\n      if (!shouldRefresh) {\n        this.manager.setSession(session!);\n        return session!;\n      }\n    }\n\n    const newSession = await this.manager.getSession(options);\n    this.saveSession(newSession);\n    return newSession;\n  }\n\n  async removeSession() {\n    localStorage.removeItem(this.storageKey);\n    await this.manager.removeSession();\n  }\n\n  sessionState$() {\n    return this.manager.sessionState$();\n  }\n\n  private loadSession(): T | undefined {\n    try {\n      const sessionJson = localStorage.getItem(this.storageKey);\n      if (sessionJson) {\n        const session = JSON.parse(sessionJson, (_key, value) => {\n          if (value?.__type === 'Set') {\n            return new Set(value.__value);\n          }\n          return value;\n        });\n        return session;\n      }\n\n      return undefined;\n    } catch (error) {\n      localStorage.removeItem(this.storageKey);\n      return undefined;\n    }\n  }\n\n  private saveSession(session: T | undefined) {\n    if (session === undefined) {\n      localStorage.removeItem(this.storageKey);\n    } else {\n      localStorage.setItem(\n        this.storageKey,\n        JSON.stringify(session, (_key, value) => {\n          if (value instanceof Set) {\n            return {\n              __type: 'Set',\n              __value: Array.from(value),\n            };\n          }\n          return value;\n        }),\n      );\n    }\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport GithubIcon from '@material-ui/icons/AcUnit';\nimport { DefaultAuthConnector } from '../../../../lib/AuthConnector';\nimport { GithubSession } from './types';\nimport {\n  OAuthApi,\n  SessionApi,\n  SessionState,\n  ProfileInfo,\n  BackstageIdentity,\n  AuthRequestOptions,\n} from '../../../definitions/auth';\nimport { SessionManager } from '../../../../lib/AuthSessionManager/types';\nimport {\n  AuthSessionStore,\n  StaticAuthSessionManager,\n} from '../../../../lib/AuthSessionManager';\nimport { Observable } from '../../../../types';\nimport { OAuthApiCreateOptions } from '../types';\n\nexport type GithubAuthResponse = {\n  providerInfo: {\n    accessToken: string;\n    scope: string;\n    expiresInSeconds: number;\n  };\n  profile: ProfileInfo;\n  backstageIdentity: BackstageIdentity;\n};\n\nconst DEFAULT_PROVIDER = {\n  id: 'github',\n  title: 'GitHub',\n  icon: GithubIcon,\n};\n\nclass GithubAuth implements OAuthApi, SessionApi {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    defaultScopes = ['read:user'],\n  }: OAuthApiCreateOptions) {\n    const connector = new DefaultAuthConnector({\n      discoveryApi,\n      environment,\n      provider,\n      oauthRequestApi: oauthRequestApi,\n      sessionTransform(res: GithubAuthResponse): GithubSession {\n        return {\n          ...res,\n          providerInfo: {\n            accessToken: res.providerInfo.accessToken,\n            scopes: GithubAuth.normalizeScope(res.providerInfo.scope),\n            expiresAt: new Date(\n              Date.now() + res.providerInfo.expiresInSeconds * 1000,\n            ),\n          },\n        };\n      },\n    });\n\n    const sessionManager = new StaticAuthSessionManager({\n      connector,\n      defaultScopes: new Set(defaultScopes),\n      sessionScopes: (session: GithubSession) => session.providerInfo.scopes,\n    });\n\n    const authSessionStore = new AuthSessionStore<GithubSession>({\n      manager: sessionManager,\n      storageKey: `${provider.id}Session`,\n      sessionScopes: (session: GithubSession) => session.providerInfo.scopes,\n    });\n\n    return new GithubAuth(authSessionStore);\n  }\n\n  constructor(private readonly sessionManager: SessionManager<GithubSession>) {}\n\n  async signIn() {\n    await this.getAccessToken();\n  }\n\n  async signOut() {\n    await this.sessionManager.removeSession();\n  }\n\n  sessionState$(): Observable<SessionState> {\n    return this.sessionManager.sessionState$();\n  }\n\n  async getAccessToken(scope?: string, options?: AuthRequestOptions) {\n    const session = await this.sessionManager.getSession({\n      ...options,\n      scopes: GithubAuth.normalizeScope(scope),\n    });\n    return session?.providerInfo.accessToken ?? '';\n  }\n\n  async getBackstageIdentity(\n    options: AuthRequestOptions = {},\n  ): Promise<BackstageIdentity | undefined> {\n    const session = await this.sessionManager.getSession(options);\n    return session?.backstageIdentity;\n  }\n\n  async getProfile(options: AuthRequestOptions = {}) {\n    const session = await this.sessionManager.getSession(options);\n    return session?.profile;\n  }\n\n  static normalizeScope(scope?: string): Set<string> {\n    if (!scope) {\n      return new Set();\n    }\n\n    const scopeList = Array.isArray(scope)\n      ? scope\n      : scope.split(/[\\s|,]/).filter(Boolean);\n\n    return new Set(scopeList);\n  }\n}\nexport default GithubAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport OAuth2Icon from '@material-ui/icons/AcUnit';\nimport { DefaultAuthConnector } from '../../../../lib/AuthConnector';\nimport { RefreshingAuthSessionManager } from '../../../../lib/AuthSessionManager';\nimport { SessionManager } from '../../../../lib/AuthSessionManager/types';\nimport { Observable } from '../../../../types';\nimport {\n  AuthRequestOptions,\n  BackstageIdentity,\n  OAuthApi,\n  OpenIdConnectApi,\n  ProfileInfo,\n  ProfileInfoApi,\n  SessionState,\n  SessionApi,\n  BackstageIdentityApi,\n} from '../../../definitions/auth';\nimport { OAuth2Session } from './types';\nimport { OAuthApiCreateOptions } from '../types';\n\ntype Options = {\n  sessionManager: SessionManager<OAuth2Session>;\n  scopeTransform: (scopes: string[]) => string[];\n};\n\ntype CreateOptions = OAuthApiCreateOptions & {\n  scopeTransform?: (scopes: string[]) => string[];\n};\n\nexport type OAuth2Response = {\n  providerInfo: {\n    accessToken: string;\n    idToken: string;\n    scope: string;\n    expiresInSeconds: number;\n  };\n  profile: ProfileInfo;\n  backstageIdentity: BackstageIdentity;\n};\n\nconst DEFAULT_PROVIDER = {\n  id: 'oauth2',\n  title: 'Your Identity Provider',\n  icon: OAuth2Icon,\n};\n\nclass OAuth2\n  implements\n    OAuthApi,\n    OpenIdConnectApi,\n    ProfileInfoApi,\n    BackstageIdentityApi,\n    SessionApi {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    defaultScopes = [],\n    scopeTransform = x => x,\n  }: CreateOptions) {\n    const connector = new DefaultAuthConnector({\n      discoveryApi,\n      environment,\n      provider,\n      oauthRequestApi: oauthRequestApi,\n      sessionTransform(res: OAuth2Response): OAuth2Session {\n        return {\n          ...res,\n          providerInfo: {\n            idToken: res.providerInfo.idToken,\n            accessToken: res.providerInfo.accessToken,\n            scopes: OAuth2.normalizeScopes(\n              scopeTransform,\n              res.providerInfo.scope,\n            ),\n            expiresAt: new Date(\n              Date.now() + res.providerInfo.expiresInSeconds * 1000,\n            ),\n          },\n        };\n      },\n    });\n\n    const sessionManager = new RefreshingAuthSessionManager({\n      connector,\n      defaultScopes: new Set(defaultScopes),\n      sessionScopes: (session: OAuth2Session) => session.providerInfo.scopes,\n      sessionShouldRefresh: (session: OAuth2Session) => {\n        const expiresInSec =\n          (session.providerInfo.expiresAt.getTime() - Date.now()) / 1000;\n        return expiresInSec < 60 * 5;\n      },\n    });\n\n    return new OAuth2({ sessionManager, scopeTransform });\n  }\n\n  private readonly sessionManager: SessionManager<OAuth2Session>;\n  private readonly scopeTransform: (scopes: string[]) => string[];\n\n  constructor(options: Options) {\n    this.sessionManager = options.sessionManager;\n    this.scopeTransform = options.scopeTransform;\n  }\n\n  async signIn() {\n    await this.getAccessToken();\n  }\n\n  async signOut() {\n    await this.sessionManager.removeSession();\n  }\n\n  sessionState$(): Observable<SessionState> {\n    return this.sessionManager.sessionState$();\n  }\n\n  async getAccessToken(\n    scope?: string | string[],\n    options?: AuthRequestOptions,\n  ) {\n    const normalizedScopes = OAuth2.normalizeScopes(this.scopeTransform, scope);\n    const session = await this.sessionManager.getSession({\n      ...options,\n      scopes: normalizedScopes,\n    });\n    return session?.providerInfo.accessToken ?? '';\n  }\n\n  async getIdToken(options: AuthRequestOptions = {}) {\n    const session = await this.sessionManager.getSession(options);\n    return session?.providerInfo.idToken ?? '';\n  }\n\n  async getBackstageIdentity(\n    options: AuthRequestOptions = {},\n  ): Promise<BackstageIdentity | undefined> {\n    const session = await this.sessionManager.getSession(options);\n    return session?.backstageIdentity;\n  }\n\n  async getProfile(options: AuthRequestOptions = {}) {\n    const session = await this.sessionManager.getSession(options);\n    return session?.profile;\n  }\n\n  private static normalizeScopes(\n    scopeTransform: (scopes: string[]) => string[],\n    scopes?: string | string[],\n  ): Set<string> {\n    if (!scopes) {\n      return new Set();\n    }\n\n    const scopeList = Array.isArray(scopes)\n      ? scopes\n      : scopes.split(/[\\s|,]/).filter(Boolean);\n\n    return new Set(scopeTransform(scopeList));\n  }\n}\n\nexport default OAuth2;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport GitlabIcon from '@material-ui/icons/AcUnit';\nimport { gitlabAuthApiRef } from '../../../definitions/auth';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'gitlab',\n  title: 'GitLab',\n  icon: GitlabIcon,\n};\n\nclass GitlabAuth {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    defaultScopes = ['read_user'],\n  }: OAuthApiCreateOptions): typeof gitlabAuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n    });\n  }\n}\nexport default GitlabAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport GoogleIcon from '@material-ui/icons/AcUnit';\nimport { googleAuthApiRef } from '../../../definitions/auth';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'google',\n  title: 'Google',\n  icon: GoogleIcon,\n};\n\nconst SCOPE_PREFIX = 'https://www.googleapis.com/auth/';\n\nclass GoogleAuth {\n  static create({\n    discoveryApi,\n    oauthRequestApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    defaultScopes = [\n      'openid',\n      `${SCOPE_PREFIX}userinfo.email`,\n      `${SCOPE_PREFIX}userinfo.profile`,\n    ],\n  }: OAuthApiCreateOptions): typeof googleAuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n      scopeTransform(scopes: string[]) {\n        return scopes.map(scope => {\n          if (scope === 'openid') {\n            return scope;\n          }\n\n          if (scope === 'profile' || scope === 'email') {\n            return `${SCOPE_PREFIX}userinfo.${scope}`;\n          }\n\n          if (scope.startsWith(SCOPE_PREFIX)) {\n            return scope;\n          }\n\n          return `${SCOPE_PREFIX}${scope}`;\n        });\n      },\n    });\n  }\n}\nexport default GoogleAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport OktaIcon from '@material-ui/icons/AcUnit';\nimport { oktaAuthApiRef } from '../../../definitions/auth';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'okta',\n  title: 'Okta',\n  icon: OktaIcon,\n};\n\nconst OKTA_OIDC_SCOPES: Set<String> = new Set([\n  'openid',\n  'profile',\n  'email',\n  'phone',\n  'address',\n  'groups',\n  'offline_access',\n]);\n\nconst OKTA_SCOPE_PREFIX: string = 'okta.';\n\nclass OktaAuth {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    defaultScopes = ['openid', 'email', 'profile', 'offline_access'],\n  }: OAuthApiCreateOptions): typeof oktaAuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n      scopeTransform(scopes) {\n        return scopes.map(scope => {\n          if (OKTA_OIDC_SCOPES.has(scope)) {\n            return scope;\n          }\n\n          if (scope.startsWith(OKTA_SCOPE_PREFIX)) {\n            return scope;\n          }\n\n          return `${OKTA_SCOPE_PREFIX}${scope}`;\n        });\n      },\n    });\n  }\n}\n\nexport default OktaAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SamlIcon from '@material-ui/icons/AcUnit';\nimport { DirectAuthConnector } from '../../../../lib/AuthConnector';\nimport { SessionManager } from '../../../../lib/AuthSessionManager/types';\nimport { Observable } from '../../../../types';\nimport {\n  ProfileInfo,\n  BackstageIdentity,\n  SessionState,\n  AuthRequestOptions,\n  ProfileInfoApi,\n  BackstageIdentityApi,\n  SessionApi,\n} from '../../../definitions/auth';\nimport { SamlSession } from './types';\nimport {\n  AuthSessionStore,\n  StaticAuthSessionManager,\n} from '../../../../lib/AuthSessionManager';\nimport { AuthApiCreateOptions } from '../types';\n\nexport type SamlAuthResponse = {\n  profile: ProfileInfo;\n  backstageIdentity: BackstageIdentity;\n};\n\nconst DEFAULT_PROVIDER = {\n  id: 'saml',\n  title: 'SAML',\n  icon: SamlIcon,\n};\n\nclass SamlAuth implements ProfileInfoApi, BackstageIdentityApi, SessionApi {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n  }: AuthApiCreateOptions) {\n    const connector = new DirectAuthConnector<SamlSession>({\n      discoveryApi,\n      environment,\n      provider,\n    });\n\n    const sessionManager = new StaticAuthSessionManager<SamlSession>({\n      connector,\n    });\n\n    const authSessionStore = new AuthSessionStore<SamlSession>({\n      manager: sessionManager,\n      storageKey: `${provider.id}Session`,\n    });\n\n    return new SamlAuth(authSessionStore);\n  }\n\n  sessionState$(): Observable<SessionState> {\n    return this.sessionManager.sessionState$();\n  }\n\n  constructor(private readonly sessionManager: SessionManager<SamlSession>) {}\n\n  async signIn() {\n    await this.getBackstageIdentity({});\n  }\n  async signOut() {\n    await this.sessionManager.removeSession();\n  }\n\n  async getBackstageIdentity(\n    options: AuthRequestOptions = {},\n  ): Promise<BackstageIdentity | undefined> {\n    const session = await this.sessionManager.getSession(options);\n    return session?.backstageIdentity;\n  }\n\n  async getProfile(options: AuthRequestOptions = {}) {\n    const session = await this.sessionManager.getSession(options);\n    return session?.profile;\n  }\n}\n\nexport default SamlAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Auth0Icon from '@material-ui/icons/AcUnit';\nimport { auth0AuthApiRef } from '../../../definitions/auth';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'auth0',\n  title: 'Auth0',\n  icon: Auth0Icon,\n};\n\nclass Auth0Auth {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    defaultScopes = ['openid', `email`, `profile`],\n  }: OAuthApiCreateOptions): typeof auth0AuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n    });\n  }\n}\n\nexport default Auth0Auth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MicrosoftIcon from '@material-ui/icons/AcUnit';\nimport { microsoftAuthApiRef } from '../../../definitions/auth';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'microsoft',\n  title: 'Microsoft',\n  icon: MicrosoftIcon,\n};\n\nclass MicrosoftAuth {\n  static create({\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n    discoveryApi,\n    defaultScopes = [\n      'openid',\n      'offline_access',\n      'profile',\n      'email',\n      'User.Read',\n    ],\n  }: OAuthApiCreateOptions): typeof microsoftAuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n    });\n  }\n}\n\nexport default MicrosoftAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport OneLoginIcon from '@material-ui/icons/AcUnit';\nimport { oneloginAuthApiRef } from '../../../definitions/auth';\nimport {\n  OAuthRequestApi,\n  AuthProvider,\n  DiscoveryApi,\n} from '../../../definitions';\nimport { OAuth2 } from '../oauth2';\n\ntype CreateOptions = {\n  discoveryApi: DiscoveryApi;\n  oauthRequestApi: OAuthRequestApi;\n\n  environment?: string;\n  provider?: AuthProvider & { id: string };\n};\n\nconst DEFAULT_PROVIDER = {\n  id: 'onelogin',\n  title: 'onelogin',\n  icon: OneLoginIcon,\n};\n\nconst OIDC_SCOPES: Set<String> = new Set([\n  'openid',\n  'profile',\n  'email',\n  'phone',\n  'address',\n  'groups',\n  'offline_access',\n]);\n\nconst SCOPE_PREFIX: string = 'onelogin.';\n\nclass OneLoginAuth {\n  static create({\n    discoveryApi,\n    environment = 'development',\n    provider = DEFAULT_PROVIDER,\n    oauthRequestApi,\n  }: CreateOptions): typeof oneloginAuthApiRef.T {\n    return OAuth2.create({\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes: ['openid', 'email', 'profile', 'offline_access'],\n      scopeTransform(scopes) {\n        return scopes.map(scope => {\n          if (OIDC_SCOPES.has(scope)) {\n            return scope;\n          }\n\n          if (scope.startsWith(SCOPE_PREFIX)) {\n            return scope;\n          }\n\n          return `${SCOPE_PREFIX}${scope}`;\n        });\n      },\n    });\n  }\n}\n\nexport default OneLoginAuth;\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublishSubject } from '../../../lib/subjects';\nimport { Observable } from '../../../types';\nimport { AlertApi, AlertMessage } from '../../definitions';\n\n/**\n * Base implementation for the AlertApi that simply forwards alerts to consumers.\n */\nexport class AlertApiForwarder implements AlertApi {\n  private readonly subject = new PublishSubject<AlertMessage>();\n\n  post(alert: AlertMessage) {\n    this.subject.next(alert);\n  }\n\n  alert$(): Observable<AlertMessage> {\n    return this.subject;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppThemeApi, AppTheme } from '../../definitions';\nimport { BehaviorSubject } from '../../../lib/subjects';\nimport { Observable } from '../../../types';\n\nconst STORAGE_KEY = 'theme';\n\nexport class AppThemeSelector implements AppThemeApi {\n  static createWithStorage(themes: AppTheme[]) {\n    const selector = new AppThemeSelector(themes);\n\n    if (!window.localStorage) {\n      return selector;\n    }\n\n    const initialThemeId =\n      window.localStorage.getItem(STORAGE_KEY) ?? undefined;\n\n    selector.setActiveThemeId(initialThemeId);\n\n    selector.activeThemeId$().subscribe(themeId => {\n      if (themeId) {\n        window.localStorage.setItem(STORAGE_KEY, themeId);\n      } else {\n        window.localStorage.removeItem(STORAGE_KEY);\n      }\n    });\n\n    window.addEventListener('storage', event => {\n      if (event.key === STORAGE_KEY) {\n        const themeId = localStorage.getItem(STORAGE_KEY) ?? undefined;\n        selector.setActiveThemeId(themeId);\n      }\n    });\n\n    return selector;\n  }\n\n  private activeThemeId: string | undefined;\n  private readonly subject = new BehaviorSubject<string | undefined>(undefined);\n\n  constructor(private readonly themes: AppTheme[]) {}\n\n  getInstalledThemes(): AppTheme[] {\n    return this.themes.slice();\n  }\n\n  activeThemeId$(): Observable<string | undefined> {\n    return this.subject;\n  }\n\n  getActiveThemeId(): string | undefined {\n    return this.activeThemeId;\n  }\n\n  setActiveThemeId(themeId?: string): void {\n    this.activeThemeId = themeId;\n    this.subject.next(themeId);\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiscoveryApi } from '../../definitions/DiscoveryApi';\n\n/**\n * UrlPatternDiscovery is a lightweight DiscoveryApi implementation.\n * It uses a single template string to construct URLs for each plugin.\n */\nexport class UrlPatternDiscovery implements DiscoveryApi {\n  /**\n   * Creates a new UrlPatternDiscovery given a template. The the only\n   * interpolation done for the template is to replace instances of `{{pluginId}}`\n   * with the ID of the plugin being requested.\n   *\n   * Example pattern: `http://localhost:7000/api/{{ pluginId }}`\n   */\n  static compile(pattern: string): UrlPatternDiscovery {\n    const parts = pattern.split(/\\{\\{\\s*pluginId\\s*\\}\\}/);\n\n    try {\n      const urlStr = parts.join('pluginId');\n      const url = new URL(urlStr);\n      if (url.hash) {\n        throw new Error('URL must not have a hash');\n      }\n      if (url.search) {\n        throw new Error('URL must not have a query');\n      }\n      if (urlStr.endsWith('/')) {\n        throw new Error('URL must not end with a slash');\n      }\n    } catch (error) {\n      throw new Error(`Invalid discovery URL pattern, ${error.message}`);\n    }\n\n    return new UrlPatternDiscovery(parts);\n  }\n\n  private constructor(private readonly parts: string[]) {}\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.parts.join(pluginId);\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlertApi, ErrorApi, ErrorContext } from '../../definitions';\n\n/**\n * Decorates an ErrorApi by also forwarding error messages\n * to the alertApi with an 'error' severity.\n */\nexport class ErrorAlerter implements ErrorApi {\n  constructor(\n    private readonly alertApi: AlertApi,\n    private readonly errorApi: ErrorApi,\n  ) {}\n\n  post(error: Error, context?: ErrorContext) {\n    if (!context?.hidden) {\n      this.alertApi.post({ message: error.message, severity: 'error' });\n    }\n\n    return this.errorApi.post(error, context);\n  }\n\n  error$() {\n    return this.errorApi.error$();\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PublishSubject } from '../../../lib/subjects';\nimport { Observable } from '../../../types';\nimport { ErrorApi, ErrorContext } from '../../definitions';\n\n/**\n * Base implementation for the ErrorApi that simply forwards errors to consumers.\n */\nexport class ErrorApiForwarder implements ErrorApi {\n  private readonly subject = new PublishSubject<{\n    error: Error;\n    context?: ErrorContext;\n  }>();\n\n  post(error: Error, context?: ErrorContext) {\n    this.subject.next({ error, context });\n  }\n\n  error$(): Observable<{ error: Error; context?: ErrorContext }> {\n    return this.subject;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FeatureFlagState,\n  FeatureFlagsApi,\n  FeatureFlag,\n  FeatureFlagsSaveOptions,\n} from '../../definitions';\n\nexport function validateFlagName(name: string): void {\n  if (name.length < 3) {\n    throw new Error(\n      `The '${name}' feature flag must have a minimum length of three characters.`,\n    );\n  }\n\n  if (name.length > 150) {\n    throw new Error(\n      `The '${name}' feature flag must not exceed 150 characters.`,\n    );\n  }\n\n  if (!name.match(/^[a-z]+[a-z0-9-]+$/)) {\n    throw new Error(\n      `The '${name}' feature flag must start with a lowercase letter and only contain lowercase letters, numbers and hyphens. ` +\n        'Examples: feature-flag-one, alpha, release-2020',\n    );\n  }\n}\n\n/**\n * Create the FeatureFlags implementation based on the API.\n */\nexport class LocalStorageFeatureFlags implements FeatureFlagsApi {\n  private registeredFeatureFlags: FeatureFlag[] = [];\n  private flags?: Map<string, FeatureFlagState>;\n\n  registerFlag(flag: FeatureFlag) {\n    validateFlagName(flag.name);\n    this.registeredFeatureFlags.push(flag);\n  }\n\n  getRegisteredFlags(): FeatureFlag[] {\n    return this.registeredFeatureFlags.slice();\n  }\n\n  isActive(name: string): boolean {\n    if (!this.flags) {\n      this.flags = this.load();\n    }\n    return this.flags.get(name) === FeatureFlagState.Active;\n  }\n\n  save(options: FeatureFlagsSaveOptions): void {\n    if (!this.flags) {\n      this.flags = this.load();\n    }\n    if (!options.merge) {\n      this.flags.clear();\n    }\n    for (const [name, state] of Object.entries(options.states)) {\n      this.flags.set(name, state);\n    }\n\n    const enabled = Array.from(this.flags.entries()).filter(\n      ([, state]) => state === FeatureFlagState.Active,\n    );\n    window.localStorage.setItem(\n      'featureFlags',\n      JSON.stringify(Object.fromEntries(enabled)),\n    );\n  }\n\n  private load(): Map<string, FeatureFlagState> {\n    try {\n      const jsonStr = window.localStorage.getItem('featureFlags');\n      if (!jsonStr) {\n        return new Map();\n      }\n      const json = JSON.parse(jsonStr) as unknown;\n      if (typeof json !== 'object' || json === null || Array.isArray(json)) {\n        return new Map();\n      }\n\n      const entries = Object.entries(json).filter(([name, value]) => {\n        validateFlagName(name);\n        return value === FeatureFlagState.Active;\n      });\n\n      return new Map(entries);\n    } catch {\n      return new Map();\n    }\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BehaviorSubject } from '../../../lib/subjects';\nimport { Observable } from '../../../types';\n\ntype RequestQueueEntry<ResultType> = {\n  scopes: Set<string>;\n  resolve: (value: ResultType | PromiseLike<ResultType>) => void;\n  reject: (reason: Error) => void;\n};\n\nexport type PendingRequest<ResultType> = {\n  scopes: Set<string> | undefined;\n  resolve: (value: ResultType) => void;\n  reject: (reason: Error) => void;\n};\n\nexport function hasScopes(\n  searched: Set<string>,\n  searchFor: Set<string>,\n): boolean {\n  for (const scope of searchFor) {\n    if (!searched.has(scope)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function joinScopes(\n  scopes: Set<string>,\n  ...moreScopess: Set<string>[]\n): Set<string> {\n  const result = new Set(scopes);\n\n  for (const moreScopes of moreScopess) {\n    for (const scope of moreScopes) {\n      result.add(scope);\n    }\n  }\n\n  return result;\n}\n\n/**\n * The OAuthPendingRequests class is a utility for managing and observing\n * a stream of requests for oauth scopes for a single provider, and resolving\n * them correctly once requests are fulfilled.\n */\nexport class OAuthPendingRequests<ResultType> {\n  private requests: RequestQueueEntry<ResultType>[] = [];\n  private subject = new BehaviorSubject<PendingRequest<ResultType>>(\n    this.getCurrentPending(),\n  );\n\n  request(scopes: Set<string>): Promise<ResultType> {\n    return new Promise((resolve, reject) => {\n      this.requests.push({ scopes, resolve, reject });\n\n      this.subject.next(this.getCurrentPending());\n    });\n  }\n\n  resolve(scopes: Set<string>, result: ResultType): void {\n    this.requests = this.requests.filter(request => {\n      if (hasScopes(scopes, request.scopes)) {\n        request.resolve(result);\n        return false;\n      }\n      return true;\n    });\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  reject(error: Error) {\n    this.requests.forEach(request => request.reject(error));\n    this.requests = [];\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  pending(): Observable<PendingRequest<ResultType>> {\n    return this.subject;\n  }\n\n  private getCurrentPending(): PendingRequest<ResultType> {\n    const currentScopes =\n      this.requests.length === 0\n        ? undefined\n        : this.requests\n            .slice(1)\n            .reduce(\n              (acc, current) => joinScopes(acc, current.scopes),\n              this.requests[0].scopes,\n            );\n\n    return {\n      scopes: currentScopes,\n      resolve: (value: ResultType) => {\n        if (currentScopes) {\n          this.resolve(currentScopes, value);\n        }\n      },\n      reject: (reason: Error) => {\n        if (currentScopes) {\n          this.reject(reason);\n        }\n      },\n    };\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OAuthRequestApi,\n  PendingAuthRequest,\n  AuthRequester,\n  AuthRequesterOptions,\n} from '../../definitions';\nimport { OAuthPendingRequests, PendingRequest } from './OAuthPendingRequests';\nimport { BehaviorSubject } from '../../../lib/subjects';\nimport { Observable } from '../../../types';\n\n/**\n * The OAuthRequestManager is an implementation of the OAuthRequestApi.\n *\n * The purpose of this class and the API is to read a stream of incoming requests\n * of OAuth access tokens from different providers with varying scope, and funnel\n * them all together into a single request for each OAuth provider.\n */\nexport class OAuthRequestManager implements OAuthRequestApi {\n  private readonly subject = new BehaviorSubject<PendingAuthRequest[]>([]);\n  private currentRequests: PendingAuthRequest[] = [];\n  private handlerCount = 0;\n\n  createAuthRequester<T>(options: AuthRequesterOptions<T>): AuthRequester<T> {\n    const handler = new OAuthPendingRequests<T>();\n\n    const index = this.handlerCount;\n    this.handlerCount++;\n\n    handler.pending().subscribe({\n      next: scopeRequest => {\n        const newRequests = this.currentRequests.slice();\n        const request = this.makeAuthRequest(scopeRequest, options);\n        if (!request) {\n          delete newRequests[index];\n        } else {\n          newRequests[index] = request;\n        }\n        this.currentRequests = newRequests;\n        // Convert from sparse array to array of present items only\n        this.subject.next(newRequests.filter(Boolean));\n      },\n    });\n\n    return scopes => {\n      return handler.request(scopes);\n    };\n  }\n\n  // Converts the pending request and popup options into a popup request that we can forward to subscribers.\n  private makeAuthRequest(\n    request: PendingRequest<any>,\n    options: AuthRequesterOptions<any>,\n  ): PendingAuthRequest | undefined {\n    const { scopes } = request;\n    if (!scopes) {\n      return undefined;\n    }\n\n    return {\n      provider: options.provider,\n      trigger: async () => {\n        const result = await options.onAuthRequest(scopes);\n        request.resolve(result);\n      },\n      reject: () => {\n        const error = new Error('Login failed, rejected by user');\n        error.name = 'RejectedError';\n        request.reject(error);\n      },\n    };\n  }\n\n  authRequest$(): Observable<PendingAuthRequest[]> {\n    return this.subject;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  StorageApi,\n  StorageValueChange,\n  ErrorApi,\n  CreateStorageApiOptions,\n} from '../../definitions';\nimport { Observable } from '../../../types';\nimport ObservableImpl from 'zen-observable';\n\nconst buckets = new Map<string, WebStorage>();\n\nexport class WebStorage implements StorageApi {\n  constructor(\n    private readonly namespace: string,\n    private readonly errorApi: ErrorApi,\n  ) {}\n\n  static create(options: CreateStorageApiOptions): WebStorage {\n    return new WebStorage(options.namespace ?? '', options.errorApi);\n  }\n\n  get<T>(key: string): T | undefined {\n    try {\n      const storage = JSON.parse(localStorage.getItem(this.getKeyName(key))!);\n      return storage ?? undefined;\n    } catch (e) {\n      this.errorApi.post(\n        new Error(`Error when parsing JSON config from storage for: ${key}`),\n      );\n    }\n\n    return undefined;\n  }\n\n  forBucket(name: string): WebStorage {\n    const bucketPath = `${this.namespace}/${name}`;\n    if (!buckets.has(bucketPath)) {\n      buckets.set(bucketPath, new WebStorage(bucketPath, this.errorApi));\n    }\n    return buckets.get(bucketPath)!;\n  }\n\n  async set<T>(key: string, data: T): Promise<void> {\n    localStorage.setItem(this.getKeyName(key), JSON.stringify(data, null, 2));\n    this.notifyChanges({ key, newValue: data });\n  }\n\n  async remove(key: string): Promise<void> {\n    localStorage.removeItem(this.getKeyName(key));\n    this.notifyChanges({ key, newValue: undefined });\n  }\n\n  observe$<T>(key: string): Observable<StorageValueChange<T>> {\n    return this.observable.filter(({ key: messageKey }) => messageKey === key);\n  }\n\n  private getKeyName(key: string) {\n    return `${this.namespace}/${encodeURIComponent(key)}`;\n  }\n\n  private notifyChanges<T>(message: StorageValueChange<T>) {\n    for (const subscription of this.subscribers) {\n      subscription.next(message);\n    }\n  }\n\n  private subscribers = new Set<\n    ZenObservable.SubscriptionObserver<StorageValueChange>\n  >();\n\n  private readonly observable = new ObservableImpl<StorageValueChange>(\n    subscriber => {\n      this.subscribers.add(subscriber);\n      return () => {\n        this.subscribers.delete(subscriber);\n      };\n    },\n  );\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  Context,\n  useMemo,\n} from 'react';\nimport {\n  VersionedValue,\n  createVersionedValueMap,\n} from '../lib/versionedValues';\nimport {\n  getGlobalSingleton,\n  getOrCreateGlobalSingleton,\n} from '../lib/globalObject';\nimport { AppContext as AppContextV1 } from './types';\n\ntype AppContextType = VersionedValue<{ 1: AppContextV1 }> | undefined;\nconst AppContext = getOrCreateGlobalSingleton('app-context', () =>\n  createContext<AppContextType | undefined>(undefined),\n);\n\ntype Props = {\n  appContext: AppContextV1;\n};\n\nexport const AppContextProvider = ({\n  appContext,\n  children,\n}: PropsWithChildren<Props>) => {\n  const versionedValue = useMemo(\n    () => createVersionedValueMap({ 1: appContext }),\n    [appContext],\n  );\n\n  return <AppContext.Provider value={versionedValue} children={children} />;\n};\n\nexport const useApp = (): AppContextV1 => {\n  const versionedContext = useContext(\n    getGlobalSingleton<Context<AppContextType>>('app-context'),\n  );\n  if (!versionedContext) {\n    throw new Error('No app context available');\n  }\n  const appContext = versionedContext.atVersion(1);\n  if (!appContext) {\n    throw new Error('AppContext v1 not available');\n  }\n  return appContext;\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentType, ReactNode } from 'react';\nimport { getOrCreateGlobalSingleton } from '../lib/globalObject';\n\n// TODO(Rugvip): Access via symbol is deprecated, remove once on 0.3.x\nconst DATA_KEY = Symbol('backstage-component-data');\n\ntype ComponentWithData<P> = ComponentType<P> & {\n  [DATA_KEY]?: DataContainer;\n};\n\ntype DataContainer = {\n  map: Map<string, unknown>;\n};\n\ntype MaybeComponentNode = ReactNode & {\n  type?: ComponentType<any> & { [DATA_KEY]?: DataContainer };\n};\n\n// The store is bridged across versions using the global object\nconst store = getOrCreateGlobalSingleton(\n  'component-data-store',\n  () => new WeakMap<ComponentType<any>, DataContainer>(),\n);\n\nexport function attachComponentData<P>(\n  component: ComponentType<P>,\n  type: string,\n  data: unknown,\n) {\n  const dataComponent = component as ComponentWithData<P>;\n\n  let container = store.get(component) || dataComponent[DATA_KEY];\n  if (!container) {\n    container = { map: new Map() };\n    store.set(component, container);\n    dataComponent[DATA_KEY] = container;\n  }\n\n  if (container.map.has(type)) {\n    const name = component.displayName || component.name;\n    throw new Error(\n      `Attempted to attach duplicate data \"${type}\" to component \"${name}\"`,\n    );\n  }\n\n  container.map.set(type, data);\n}\n\nexport function getComponentData<T>(\n  node: ReactNode,\n  type: string,\n): T | undefined {\n  if (!node) {\n    return undefined;\n  }\n\n  const component = (node as MaybeComponentNode).type;\n  if (!component) {\n    return undefined;\n  }\n\n  const container = store.get(component) || component[DATA_KEY];\n  if (!container) {\n    return undefined;\n  }\n\n  return container.map.get(type) as T | undefined;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IconComponent } from '../icons/types';\nimport { getOrCreateGlobalSingleton } from '../lib/globalObject';\n\nexport type AnyParams = { [param in string]: string } | undefined;\nexport type ParamKeys<Params extends AnyParams> = keyof Params extends never\n  ? []\n  : (keyof Params)[];\nexport type OptionalParams<\n  Params extends { [param in string]: string }\n> = Params[keyof Params] extends never ? undefined : Params;\n\n// The extra TS magic here is to require a single params argument if the RouteRef\n// had at least one param defined, but require 0 arguments if there are no params defined.\n// Without this we'd have to pass in empty object to all parameter-less RouteRefs\n// just to make TypeScript happy, or we would have to make the argument optional in\n// which case you might forget to pass it in when it is actually required.\nexport type RouteFunc<Params extends AnyParams> = (\n  ...[params]: Params extends undefined ? readonly [] : readonly [Params]\n) => string;\n\nexport const routeRefType: unique symbol = getOrCreateGlobalSingleton<any>(\n  'route-ref-type',\n  () => Symbol('route-ref-type'),\n);\n\nexport type RouteRef<Params extends AnyParams = any> = {\n  readonly [routeRefType]: 'absolute';\n\n  params: ParamKeys<Params>;\n\n  // TODO(Rugvip): Remove all of these once plugins don't rely on the path\n  /** @deprecated paths are no longer accessed directly from RouteRefs, use useRouteRef instead */\n  path: string;\n  /** @deprecated icons are no longer accessed via RouteRefs */\n  icon?: IconComponent;\n  /** @deprecated titles are no longer accessed via RouteRefs */\n  title?: string;\n};\n\nexport type SubRouteRef<Params extends AnyParams = any> = {\n  readonly [routeRefType]: 'sub';\n\n  parent: RouteRef;\n\n  path: string;\n\n  params: ParamKeys<Params>;\n};\n\nexport type ExternalRouteRef<\n  Params extends AnyParams = any,\n  Optional extends boolean = any\n> = {\n  readonly [routeRefType]: 'external';\n\n  params: ParamKeys<Params>;\n\n  optional?: Optional;\n};\n\nexport type AnyRouteRef =\n  | RouteRef<any>\n  | SubRouteRef<any>\n  | ExternalRouteRef<any, any>;\n\n// TODO(Rugvip): None of these should be found in the wild anymore, remove in next minor release\n/** @deprecated */\nexport type ConcreteRoute = {};\n/** @deprecated */\nexport type AbsoluteRouteRef = RouteRef<{}>;\n/** @deprecated */\nexport type MutableRouteRef = RouteRef<{}>;\n\n// A duplicate of the react-router RouteObject, but with routeRef added\nexport interface BackstageRouteObject {\n  caseSensitive: boolean;\n  children?: BackstageRouteObject[];\n  element: React.ReactNode;\n  path: string;\n  routeRefs: Set<RouteRef>;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\nexport class ExternalRouteRefImpl<\n  Params extends AnyParams,\n  Optional extends boolean\n> implements ExternalRouteRef<Params, Optional> {\n  readonly [routeRefType] = 'external';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    readonly optional: Optional,\n  ) {}\n\n  toString() {\n    return `routeRef{type=external,id=${this.id}}`;\n  }\n}\n\nexport function createExternalRouteRef<\n  Params extends { [param in ParamKey]: string },\n  Optional extends boolean = false,\n  ParamKey extends string = never\n>(options: {\n  /**\n   * An identifier for this route, used to identify it in error messages\n   */\n  id: string;\n\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  params?: ParamKey[];\n\n  /**\n   * Whether or not this route is optional, defaults to false.\n   *\n   * Optional external routes are not required to be bound in the app, and\n   * if they aren't, `useRouteRef` will return `undefined`.\n   */\n  optional?: Optional;\n}): ExternalRouteRef<OptionalParams<Params>, Optional> {\n  return new ExternalRouteRefImpl(\n    options.id,\n    (options.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    Boolean(options.optional) as Optional,\n  );\n}\n\nexport function isExternalRouteRef<\n  Params extends AnyParams,\n  Optional extends boolean\n>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, Optional>,\n): routeRef is ExternalRouteRef<Params, Optional> {\n  return routeRef[routeRefType] === 'external';\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactNode, Children, isValidElement, Fragment } from 'react';\nimport { useRoutes } from 'react-router-dom';\nimport { useApp } from '../app';\n\ntype RouteObject = {\n  path: string;\n  element: JSX.Element;\n  children?: RouteObject[];\n};\n\n// Similar to the same function from react-router, this collects routes from the\n// children, but only the first level of routes\nfunction createRoutesFromChildren(childrenNode: ReactNode): RouteObject[] {\n  return Children.toArray(childrenNode).flatMap(child => {\n    if (!isValidElement(child)) {\n      return [];\n    }\n\n    const { children } = child.props;\n\n    if (child.type === Fragment) {\n      return createRoutesFromChildren(children);\n    }\n\n    let path = child.props.path as string | undefined;\n\n    // TODO(Rugvip): Work around plugins registering empty paths, remove once deprecated routes are gone\n    if (path === '') {\n      return [];\n    }\n    path = path?.replace(/\\/\\*$/, '') ?? '/';\n\n    return [\n      {\n        path,\n        element: child,\n        children: children && [\n          {\n            path: '/*',\n            element: children,\n          },\n        ],\n      },\n    ];\n  });\n}\n\ntype FlatRoutesProps = {\n  children: ReactNode;\n};\n\nexport const FlatRoutes = (props: FlatRoutesProps): JSX.Element | null => {\n  const app = useApp();\n  const { NotFoundErrorPage } = app.getComponents();\n  const routes = createRoutesFromChildren(props.children)\n    // Routes are sorted to work around a bug where prefixes are unexpectedly matched\n    .sort((a, b) => b.path.localeCompare(a.path))\n    // We make sure all routes have '/*' appended, except '/'\n    .map(obj => {\n      obj.path = obj.path === '/' ? '/' : `${obj.path}/*`;\n      return obj;\n    });\n\n  // TODO(Rugvip): Possibly add a way to skip this, like a noNotFoundPage prop\n  routes.push({\n    element: <NotFoundErrorPage />,\n    path: '/*',\n  });\n\n  return useRoutes(routes);\n};\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\nimport { IconComponent } from '../icons/types';\n\n// TODO(Rugvip): Remove this in the next breaking release, it's exported but unused\nexport type RouteRefConfig<Params extends AnyParams> = {\n  params?: ParamKeys<Params>;\n  path?: string;\n  icon?: IconComponent;\n  title: string;\n};\n\nexport class RouteRefImpl<Params extends AnyParams>\n  implements RouteRef<Params> {\n  readonly [routeRefType] = 'absolute';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    private readonly config: {\n      path?: string;\n      icon?: IconComponent;\n      title?: string;\n    },\n  ) {}\n\n  get icon() {\n    return this.config.icon;\n  }\n\n  // TODO(Rugvip): Remove this, routes are looked up via the registry instead\n  get path() {\n    return this.config.path ?? '';\n  }\n\n  get title() {\n    return this.config.title ?? this.id;\n  }\n\n  toString() {\n    return `routeRef{type=absolute,id=${this.id}}`;\n  }\n}\n\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  Params extends { [param in ParamKey]: string },\n  // ParamKey is here to make sure the Params type properly has its keys narrowed down\n  // to only the elements of params. Defaulting to never makes sure we end up with\n  // Param = {} if the params array is empty.\n  ParamKey extends string = never\n>(config: {\n  /** The id of the route ref, used to identify it when printed */\n  id?: string;\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  params?: ParamKey[];\n  /** @deprecated Route refs no longer decide their own path */\n  path?: string;\n  /** @deprecated Route refs no longer decide their own icon */\n  icon?: IconComponent;\n  /** @deprecated Route refs no longer decide their own title */\n  title?: string;\n}): RouteRef<OptionalParams<Params>> {\n  const id = config.id || config.title;\n  if (!id) {\n    throw new Error('RouteRef must be provided a non-empty id');\n  }\n  return new RouteRefImpl(\n    id,\n    (config.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    config,\n  );\n}\n\nexport function isRouteRef<Params extends AnyParams>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, any>,\n): routeRef is RouteRef<Params> {\n  return routeRef[routeRefType] === 'absolute';\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyParams,\n  ExternalRouteRef,\n  OptionalParams,\n  ParamKeys,\n  RouteRef,\n  routeRefType,\n  SubRouteRef,\n} from './types';\n\n// Should match the pattern in react-router\nconst PARAM_PATTERN = /^\\w+$/;\n\nexport class SubRouteRefImpl<Params extends AnyParams>\n  implements SubRouteRef<Params> {\n  readonly [routeRefType] = 'sub';\n\n  constructor(\n    private readonly id: string,\n    readonly path: string,\n    readonly parent: RouteRef,\n    readonly params: ParamKeys<Params>,\n  ) {}\n\n  toString() {\n    return `routeRef{type=sub,id=${this.id}}`;\n  }\n}\n\n// These utility types help us infer a Param object type from a string path\n// For example, `/foo/:bar/:baz` inferred to `{ bar: string, baz: string }`\ntype ParamPart<S extends string> = S extends `:${infer Param}` ? Param : never;\ntype ParamNames<S extends string> = S extends `${infer Part}/${infer Rest}`\n  ? ParamPart<Part> | ParamNames<Rest>\n  : ParamPart<S>;\ntype PathParams<S extends string> = { [name in ParamNames<S>]: string };\n\n/**\n * Merges a param object type with with an optional params type into a params object\n */\ntype MergeParams<\n  P1 extends { [param in string]: string },\n  P2 extends AnyParams\n> = (P1[keyof P1] extends never ? {} : P1) & (P2 extends undefined ? {} : P2);\n\n/**\n * Creates a SubRouteRef type given the desired parameters and parent route parameters.\n * The parameters types are merged together while ensuring that there is no overlap between the two.\n */\ntype MakeSubRouteRef<\n  Params extends { [param in string]: string },\n  ParentParams extends AnyParams\n> = keyof Params & keyof ParentParams extends never\n  ? SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>\n  : never;\n\nexport function createSubRouteRef<\n  Path extends string,\n  ParentParams extends AnyParams = never\n>(config: {\n  id: string;\n  path: Path;\n  parent: RouteRef<ParentParams>;\n}): MakeSubRouteRef<PathParams<Path>, ParentParams> {\n  const { id, path, parent } = config;\n  type Params = PathParams<Path>;\n\n  // Collect runtime parameters from the path, e.g. ['bar', 'baz'] from '/foo/:bar/:baz'\n  const pathParams = path\n    .split('/')\n    .filter(p => p.startsWith(':'))\n    .map(p => p.substring(1));\n  const params = [...parent.params, ...pathParams];\n\n  if (parent.params.some(p => pathParams.includes(p as string))) {\n    throw new Error(\n      'SubRouteRef may not have params that overlap with its parent',\n    );\n  }\n  if (!path.startsWith('/')) {\n    throw new Error(`SubRouteRef path must start with '/', got '${path}'`);\n  }\n  if (path.endsWith('/')) {\n    throw new Error(`SubRouteRef path must not end with '/', got '${path}'`);\n  }\n  for (const param of pathParams) {\n    if (!PARAM_PATTERN.test(param)) {\n      throw new Error(`SubRouteRef path has invalid param, got '${param}'`);\n    }\n  }\n\n  // We ensure that the type of the return type is sane here\n  const subRouteRef = new SubRouteRefImpl(\n    id,\n    path,\n    parent,\n    params as ParamKeys<MergeParams<Params, ParentParams>>,\n  ) as SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>;\n\n  // But skip type checking of the return value itself, because the conditional\n  // type checking of the parent parameter overlap is tricky to express.\n  return subRouteRef as any;\n}\n\nexport function isSubRouteRef<Params extends AnyParams>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, any>,\n): routeRef is SubRouteRef<Params> {\n  return routeRef[routeRefType] === 'sub';\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generatePath, matchRoutes } from 'react-router-dom';\nimport {\n  AnyRouteRef,\n  BackstageRouteObject,\n  RouteRef,\n  ExternalRouteRef,\n  AnyParams,\n  SubRouteRef,\n  routeRefType,\n  RouteFunc,\n} from './types';\nimport { isRouteRef } from './RouteRef';\nimport { isSubRouteRef } from './SubRouteRef';\nimport { isExternalRouteRef } from './ExternalRouteRef';\n\n// Joins a list of paths together, avoiding trailing and duplicate slashes\nfunction joinPaths(...paths: string[]): string {\n  const normalized = paths.join('/').replace(/\\/\\/+/g, '/');\n  if (normalized !== '/' && normalized.endsWith('/')) {\n    return normalized.slice(0, -1);\n  }\n  return normalized;\n}\n\n/**\n * Resolves the absolute route ref that our target route ref is pointing pointing to, as well\n * as the relative target path.\n *\n * Returns an undefined target ref if one could not be fully resolved.\n */\nfunction resolveTargetRef(\n  anyRouteRef: AnyRouteRef,\n  routePaths: Map<RouteRef, string>,\n  routeBindings: Map<AnyRouteRef, AnyRouteRef | undefined>,\n): readonly [RouteRef | undefined, string] {\n  // First we figure out which absolute route ref we're dealing with, an if there was an sub route path to append.\n  // For sub routes it will be the parent path, while for external routes it will be the bound route.\n  let targetRef: RouteRef;\n  let subRoutePath = '';\n  if (isRouteRef(anyRouteRef)) {\n    targetRef = anyRouteRef;\n  } else if (isSubRouteRef(anyRouteRef)) {\n    targetRef = anyRouteRef.parent;\n    subRoutePath = anyRouteRef.path;\n  } else if (isExternalRouteRef(anyRouteRef)) {\n    const resolvedRoute = routeBindings.get(anyRouteRef);\n    if (!resolvedRoute) {\n      return [undefined, ''];\n    }\n    if (isRouteRef(resolvedRoute)) {\n      targetRef = resolvedRoute;\n    } else if (isSubRouteRef(resolvedRoute)) {\n      targetRef = resolvedRoute.parent;\n      subRoutePath = resolvedRoute.path;\n    } else {\n      throw new Error(\n        `ExternalRouteRef was bound to invalid target, ${resolvedRoute}`,\n      );\n    }\n  } else if (anyRouteRef[routeRefType]) {\n    throw new Error(\n      `Unknown or invalid route ref type, ${anyRouteRef[routeRefType]}`,\n    );\n  } else {\n    throw new Error(`Unknown object passed to useRouteRef, got ${anyRouteRef}`);\n  }\n\n  // Bail if no absolute path could be resolved\n  if (!targetRef) {\n    return [undefined, ''];\n  }\n\n  // Find the path that our target route is bound to\n  const resolvedPath = routePaths.get(targetRef);\n  if (!resolvedPath) {\n    return [undefined, ''];\n  }\n\n  // SubRouteRefs join the path from the parent route with its own path\n  const targetPath = joinPaths(resolvedPath, subRoutePath);\n  return [targetRef, targetPath];\n}\n\n/**\n * Resolves the complete base path for navigating to the target RouteRef.\n */\nfunction resolveBasePath(\n  targetRef: RouteRef,\n  sourceLocation: Parameters<typeof matchRoutes>[1],\n  routePaths: Map<RouteRef, string>,\n  routeParents: Map<RouteRef, RouteRef | undefined>,\n  routeObjects: BackstageRouteObject[],\n) {\n  // While traversing the app element tree we build up the routeObjects structure\n  // used here. It is the same kind of structure that react-router creates, with the\n  // addition that associated route refs are stored throughout the tree. This lets\n  // us look up all route refs that can be reached from our source location.\n  // Because of the similar route object structure, we can use `matchRoutes` from\n  // react-router to do the lookup of our current location.\n  const match = matchRoutes(routeObjects, sourceLocation) ?? [];\n\n  // While we search for a common routing root between our current location and\n  // the target route, we build a list of all route refs we find that we need\n  // to traverse to reach the target.\n  const refDiffList = Array<RouteRef>();\n\n  let matchIndex = -1;\n  for (\n    let targetSearchRef: RouteRef | undefined = targetRef;\n    targetSearchRef;\n    targetSearchRef = routeParents.get(targetSearchRef)\n  ) {\n    // The match contains a list of all ancestral route refs present at our current location\n    // Starting at the desired target ref and traversing back through its parents, we search\n    // for a target ref that is present in the match for our current location. When a match\n    // is found it means we have found a common base to resolve the route from.\n    matchIndex = match.findIndex(m =>\n      (m.route as BackstageRouteObject).routeRefs.has(targetSearchRef!),\n    );\n    if (matchIndex !== -1) {\n      break;\n    }\n\n    // Every time we move a step up in the ancestry of the target ref, we add the current ref\n    // to the diff list, which ends up being the list of route refs to traverse form the common base\n    // in order to reach our target.\n    refDiffList.unshift(targetSearchRef);\n  }\n\n  // If our target route is present in the initial match we need to construct the final path\n  // from the parent of the matched route segment. That's to allow the caller of the route\n  // function to supply their own params.\n  if (refDiffList.length === 0) {\n    matchIndex -= 1;\n  }\n\n  // This is the part of the route tree that the target and source locations have in common.\n  // We re-use the existing pathname directly along with all params.\n  const parentPath = matchIndex === -1 ? '' : match[matchIndex].pathname;\n\n  // This constructs the mid section of the path using paths resolved from all route refs\n  // we need to traverse to reach our target except for the very last one. None of these\n  // paths are allowed to require any parameters, as the caller would have no way of knowing\n  // what parameters those are.\n  const diffPath = joinPaths(\n    ...refDiffList.slice(0, -1).map(ref => {\n      const path = routePaths.get(ref);\n      if (!path) {\n        throw new Error(`No path for ${ref}`);\n      }\n      if (path.includes(':')) {\n        throw new Error(\n          `Cannot route to ${targetRef} with parent ${ref} as it has parameters`,\n        );\n      }\n      return path;\n    }),\n  );\n\n  return parentPath + diffPath;\n}\n\nexport class RouteResolver {\n  constructor(\n    private readonly routePaths: Map<RouteRef, string>,\n    private readonly routeParents: Map<RouteRef, RouteRef | undefined>,\n    private readonly routeObjects: BackstageRouteObject[],\n    private readonly routeBindings: Map<\n      ExternalRouteRef,\n      RouteRef | SubRouteRef\n    >,\n  ) {}\n\n  resolve<Params extends AnyParams>(\n    anyRouteRef:\n      | RouteRef<Params>\n      | SubRouteRef<Params>\n      | ExternalRouteRef<Params, any>,\n    sourceLocation: Parameters<typeof matchRoutes>[1],\n  ): RouteFunc<Params> | undefined {\n    // First figure out what our target absolute ref is, as well as our target path.\n    const [targetRef, targetPath] = resolveTargetRef(\n      anyRouteRef,\n      this.routePaths,\n      this.routeBindings,\n    );\n    if (!targetRef) {\n      return undefined;\n    }\n\n    // Next we figure out the base path, which is the combination of the common parent path\n    // between our current location and our target location, as well as the additional path\n    // that is the difference between the parent path and the base of our target location.\n    const basePath = resolveBasePath(\n      targetRef,\n      sourceLocation,\n      this.routePaths,\n      this.routeParents,\n      this.routeObjects,\n    );\n\n    const routeFunc: RouteFunc<Params> = (...[params]) => {\n      return basePath + generatePath(targetPath, params);\n    };\n    return routeFunc;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  createContext,\n  ReactNode,\n  useContext,\n  useMemo,\n  Context,\n} from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport {\n  BackstageRouteObject,\n  RouteRef,\n  ExternalRouteRef,\n  AnyParams,\n  SubRouteRef,\n  RouteFunc,\n} from './types';\nimport { RouteResolver } from './RouteResolver';\nimport {\n  VersionedValue,\n  createVersionedValueMap,\n} from '../lib/versionedValues';\nimport {\n  getGlobalSingleton,\n  getOrCreateGlobalSingleton,\n} from '../lib/globalObject';\n\ntype RoutingContextType = VersionedValue<{ 1: RouteResolver }> | undefined;\nconst RoutingContext = getOrCreateGlobalSingleton('routing-context', () =>\n  createContext<RoutingContextType>(undefined),\n);\n\nexport function useRouteRef<Optional extends boolean, Params extends AnyParams>(\n  routeRef: ExternalRouteRef<Params, Optional>,\n): Optional extends true ? RouteFunc<Params> | undefined : RouteFunc<Params>;\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): RouteFunc<Params>;\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, any>,\n): RouteFunc<Params> | undefined {\n  const sourceLocation = useLocation();\n  const versionedContext = useContext(\n    getGlobalSingleton<Context<RoutingContextType>>('routing-context'),\n  );\n  const resolver = versionedContext?.atVersion(1);\n  const routeFunc = useMemo(\n    () => resolver && resolver.resolve(routeRef, sourceLocation),\n    [resolver, routeRef, sourceLocation],\n  );\n\n  if (!versionedContext) {\n    throw new Error('useRouteRef used outside of routing context');\n  }\n  if (!resolver) {\n    throw new Error('RoutingContext v1 not available');\n  }\n\n  const isOptional = 'optional' in routeRef && routeRef.optional;\n  if (!routeFunc && !isOptional) {\n    throw new Error(`No path for ${routeRef}`);\n  }\n\n  return routeFunc;\n}\n\ntype ProviderProps = {\n  routePaths: Map<RouteRef, string>;\n  routeParents: Map<RouteRef, RouteRef | undefined>;\n  routeObjects: BackstageRouteObject[];\n  routeBindings: Map<ExternalRouteRef, RouteRef | SubRouteRef>;\n  children: ReactNode;\n};\n\nexport const RoutingProvider = ({\n  routePaths,\n  routeParents,\n  routeObjects,\n  routeBindings,\n  children,\n}: ProviderProps) => {\n  const resolver = new RouteResolver(\n    routePaths,\n    routeParents,\n    routeObjects,\n    routeBindings,\n  );\n\n  const versionedValue = createVersionedValueMap({ 1: resolver });\n  return (\n    <RoutingContext.Provider value={versionedValue}>\n      {children}\n    </RoutingContext.Provider>\n  );\n};\n\nexport function useRouteRefParams<Params extends AnyParams>(\n  _routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): Params {\n  return useParams() as Params;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { lazy, Suspense } from 'react';\nimport { useApp } from '../app';\nimport { BackstagePlugin, Extension } from '../plugin/types';\nimport { RouteRef, useRouteRef } from '../routing';\nimport { attachComponentData } from './componentData';\n\ntype ComponentLoader<T> =\n  | {\n      lazy: () => Promise<T>;\n    }\n  | {\n      sync: T;\n    };\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createRoutableExtension<\n  T extends (props: any) => JSX.Element | null\n>(options: {\n  component: () => Promise<T>;\n  mountPoint: RouteRef;\n}): Extension<T> {\n  const { component, mountPoint } = options;\n  return createReactExtension({\n    component: {\n      lazy: () =>\n        component().then(\n          InnerComponent => {\n            const RoutableExtensionWrapper: any = (props: any) => {\n              // Validate that the routing is wired up correctly in the App.tsx\n              try {\n                useRouteRef(mountPoint);\n              } catch (error) {\n                if (error?.message.startsWith('No path for ')) {\n                  throw new Error(\n                    `Routable extension component with mount point ${mountPoint} was not discovered in the app element tree. ` +\n                      'Routable extension components may not be rendered by other components and must be ' +\n                      'directly available as an element within the App provider component.',\n                  );\n                }\n                throw error;\n              }\n              return <InnerComponent {...props} />;\n            };\n\n            const componentName =\n              (InnerComponent as { displayName?: string }).displayName ||\n              InnerComponent.name ||\n              'LazyComponent';\n\n            RoutableExtensionWrapper.displayName = `RoutableExtension(${componentName})`;\n\n            return RoutableExtensionWrapper as T;\n          },\n          error => {\n            const RoutableExtensionWrapper: any = (_: any) => {\n              const app = useApp();\n              const { BootErrorPage } = app.getComponents();\n\n              return <BootErrorPage step=\"load-chunk\" error={error} />;\n            };\n            return RoutableExtensionWrapper;\n          },\n        ),\n    },\n    data: {\n      'core.mountPoint': mountPoint,\n    },\n  });\n}\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createComponentExtension<\n  T extends (props: any) => JSX.Element | null\n>(options: { component: ComponentLoader<T> }): Extension<T> {\n  const { component } = options;\n  return createReactExtension({ component });\n}\n\n// We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n// ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n// making it impossible to make the usage of children type safe.\nexport function createReactExtension<\n  T extends (props: any) => JSX.Element | null\n>(options: {\n  component: ComponentLoader<T>;\n  data?: Record<string, unknown>;\n}): Extension<T> {\n  const { data = {} } = options;\n\n  let Component: T;\n  if ('lazy' in options.component) {\n    const lazyLoader = options.component.lazy;\n    Component = (lazy(() =>\n      lazyLoader().then(component => ({ default: component })),\n    ) as unknown) as T;\n  } else {\n    Component = options.component.sync;\n  }\n  const componentName =\n    (Component as { displayName?: string }).displayName ||\n    Component.name ||\n    'Component';\n\n  return {\n    expose(plugin: BackstagePlugin<any, any>) {\n      const Result: any = (props: any) => (\n        <Suspense fallback=\"...\">\n          <Component {...props} />\n        </Suspense>\n      );\n\n      attachComponentData(Result, 'core.plugin', plugin);\n      for (const [key, value] of Object.entries(data)) {\n        attachComponentData(Result, key, value);\n      }\n\n      Result.displayName = `Extension(${componentName})`;\n      return Result;\n    },\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SvgIconProps } from '@material-ui/core';\nimport MuiMenuBookIcon from '@material-ui/icons/MenuBook';\nimport MuiBrokenImageIcon from '@material-ui/icons/BrokenImage';\nimport MuiChatIcon from '@material-ui/icons/Chat';\nimport MuiDashboardIcon from '@material-ui/icons/Dashboard';\nimport MuiEmailIcon from '@material-ui/icons/Email';\nimport MuiGitHubIcon from '@material-ui/icons/GitHub';\nimport MuiHelpIcon from '@material-ui/icons/Help';\nimport MuiPeopleIcon from '@material-ui/icons/People';\nimport MuiPersonIcon from '@material-ui/icons/Person';\nimport MuiWarningIcon from '@material-ui/icons/Warning';\nimport MuiDocsIcon from '@material-ui/icons/Description';\n\nimport React from 'react';\nimport { useApp } from '../app/AppContext';\nimport { IconComponent, IconComponentMap, SystemIconKey } from './types';\n\nexport const defaultSystemIcons: IconComponentMap = {\n  brokenImage: MuiBrokenImageIcon,\n  // To be confirmed: see https://github.com/backstage/backstage/issues/4970\n  catalog: MuiMenuBookIcon,\n  chat: MuiChatIcon,\n  dashboard: MuiDashboardIcon,\n  email: MuiEmailIcon,\n  github: MuiGitHubIcon,\n  group: MuiPeopleIcon,\n  help: MuiHelpIcon,\n  user: MuiPersonIcon,\n  warning: MuiWarningIcon,\n  docs: MuiDocsIcon,\n};\n\nconst overridableSystemIcon = (key: SystemIconKey): IconComponent => {\n  const Component = (props: SvgIconProps) => {\n    const app = useApp();\n    const Icon = app.getSystemIcon(key);\n    return Icon ? <Icon {...props} /> : <MuiBrokenImageIcon {...props} />;\n  };\n  return Component;\n};\n\nexport const BrokenImageIcon = overridableSystemIcon('brokenImage');\nexport const ChatIcon = overridableSystemIcon('chat');\nexport const DashboardIcon = overridableSystemIcon('dashboard');\nexport const EmailIcon = overridableSystemIcon('email');\nexport const GitHubIcon = overridableSystemIcon('github');\nexport const GroupIcon = overridableSystemIcon('group');\nexport const HelpIcon = overridableSystemIcon('help');\nexport const UserIcon = overridableSystemIcon('user');\nexport const WarningIcon = overridableSystemIcon('warning');\nexport const DocsIcon = overridableSystemIcon('docs');\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginConfig,\n  PluginOutput,\n  BackstagePlugin,\n  Extension,\n  AnyRoutes,\n  AnyExternalRoutes,\n} from './types';\nimport { AnyApiFactory } from '../apis';\n\nexport class PluginImpl<\n  Routes extends AnyRoutes,\n  ExternalRoutes extends AnyExternalRoutes\n> implements BackstagePlugin<Routes, ExternalRoutes> {\n  private storedOutput?: PluginOutput[];\n\n  constructor(private readonly config: PluginConfig<Routes, ExternalRoutes>) {}\n\n  getId(): string {\n    return this.config.id;\n  }\n\n  getApis(): Iterable<AnyApiFactory> {\n    return this.config.apis ?? [];\n  }\n\n  get routes(): Routes {\n    return this.config.routes ?? ({} as Routes);\n  }\n\n  get externalRoutes(): ExternalRoutes {\n    return this.config.externalRoutes ?? ({} as ExternalRoutes);\n  }\n\n  output(): PluginOutput[] {\n    if (this.storedOutput) {\n      return this.storedOutput;\n    }\n    if (!this.config.register) {\n      return [];\n    }\n\n    const outputs = new Array<PluginOutput>();\n\n    this.config.register({\n      router: {\n        addRoute(target, component, options) {\n          outputs.push({\n            type: 'route',\n            target,\n            component,\n            options,\n          });\n        },\n      },\n      featureFlags: {\n        register(name) {\n          outputs.push({ type: 'feature-flag', name });\n        },\n      },\n    });\n\n    this.storedOutput = outputs;\n    return this.storedOutput;\n  }\n\n  provide<T>(extension: Extension<T>): T {\n    return extension.expose(this);\n  }\n\n  toString() {\n    return `plugin{${this.config.id}}`;\n  }\n}\n\nexport function createPlugin<\n  Routes extends AnyRoutes = {},\n  ExternalRoutes extends AnyExternalRoutes = {}\n>(\n  config: PluginConfig<Routes, ExternalRoutes>,\n): BackstagePlugin<Routes, ExternalRoutes> {\n  return new PluginImpl(config);\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidElement, ReactNode, ReactElement, Children } from 'react';\n\nexport type Discoverer = (element: ReactElement) => ReactNode;\n\nexport type Collector<Result, Context> = () => {\n  accumulator: Result;\n  visit(\n    accumulator: Result,\n    element: ReactElement,\n    parent: ReactElement | undefined,\n    context: Context,\n  ): Context;\n};\n\n/**\n * A function that allows you to traverse a tree of React elements using\n * varying methods to discover child nodes and collect data along the way.\n */\nexport function traverseElementTree<Results>(options: {\n  root: ReactNode;\n  discoverers: Discoverer[];\n  collectors: { [name in keyof Results]: Collector<Results[name], any> };\n}): Results {\n  const collectors: {\n    [name in string]: ReturnType<Collector<any, any>>;\n  } = {};\n\n  // Bootstrap all collectors, initializing the accumulators and providing the visitor function\n  for (const name in options.collectors) {\n    if (options.collectors.hasOwnProperty(name)) {\n      collectors[name] = options.collectors[name]();\n    }\n  }\n\n  // Internal representation of an element in the tree that we're iterating over\n  type QueueItem = {\n    node: ReactNode;\n    parent: ReactElement | undefined;\n    contexts: { [name in string]: unknown };\n  };\n\n  const queue = [\n    {\n      node: Children.toArray(options.root),\n      parent: undefined,\n      contexts: {},\n    } as QueueItem,\n  ];\n\n  while (queue.length !== 0) {\n    const { node, parent, contexts } = queue.shift()!;\n\n    // While the parent and the element we pass on to collectors and discoverers\n    // have been validated and are known to be React elements, the child nodes\n    // emitted by the discoverers are not.\n    Children.forEach(node, element => {\n      if (!isValidElement(element)) {\n        return;\n      }\n\n      const nextContexts: QueueItem['contexts'] = {};\n\n      // Collectors populate their result data using the current node, and compute\n      // context for the next iteration\n      for (const name in collectors) {\n        if (collectors.hasOwnProperty(name)) {\n          const collector = collectors[name];\n\n          nextContexts[name] = collector.visit(\n            collector.accumulator,\n            element,\n            parent,\n            contexts[name],\n          );\n        }\n      }\n\n      // Discoverers provide ways to continue the traversal from the current element\n      for (const discoverer of options.discoverers) {\n        const children = discoverer(element);\n        if (children) {\n          queue.push({\n            node: children,\n            parent: element,\n            contexts: nextContexts,\n          });\n        }\n      }\n    });\n  }\n\n  return Object.fromEntries(\n    Object.entries(collectors).map(([name, c]) => [name, c.accumulator]),\n  ) as Results;\n}\n\nexport function createCollector<Result, Context>(\n  accumulatorFactory: () => Result,\n  visit: ReturnType<Collector<Result, Context>>['visit'],\n): Collector<Result, Context> {\n  return () => ({ accumulator: accumulatorFactory(), visit });\n}\n\nexport function childDiscoverer(element: ReactElement): ReactNode {\n  return element.props?.children;\n}\n\nexport function routeElementDiscoverer(element: ReactElement): ReactNode {\n  if (element.props?.path && element.props?.element) {\n    return element.props?.element;\n  }\n  return undefined;\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstagePlugin } from './types';\nimport { getComponentData } from '../extensions';\nimport { createCollector } from '../extensions/traversal';\n\nexport const pluginCollector = createCollector(\n  () => new Set<BackstagePlugin<any, any>>(),\n  (acc, node) => {\n    const plugin = getComponentData<BackstagePlugin<any, any>>(\n      node,\n      'core.plugin',\n    );\n    if (plugin) {\n      acc.add(plugin);\n    }\n  },\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidElement, ReactElement, ReactNode } from 'react';\nimport { BackstageRouteObject, RouteRef } from '../routing/types';\nimport { getComponentData } from '../extensions';\nimport { createCollector } from '../extensions/traversal';\n\nfunction getMountPoint(node: ReactElement): RouteRef | undefined {\n  const element: ReactNode = node.props?.element;\n\n  let routeRef = getComponentData<RouteRef>(node, 'core.mountPoint');\n  if (!routeRef && isValidElement(element)) {\n    routeRef = getComponentData<RouteRef>(element, 'core.mountPoint');\n  }\n\n  return routeRef;\n}\n\nexport const routePathCollector = createCollector(\n  () => new Map<RouteRef, string>(),\n  (acc, node, parent, ctxPath: string | undefined) => {\n    // The context path is used during mount point gathering to assign the same path\n    // to all discovered mount points\n    let currentCtxPath = ctxPath;\n\n    if (parent?.props.element === node) {\n      return currentCtxPath;\n    }\n\n    // Start gathering mount points when we encounter a mount point gathering flag\n    if (getComponentData<boolean>(node, 'core.gatherMountPoints')) {\n      const path: string | undefined = node.props?.path;\n      if (!path) {\n        throw new Error('Mount point gatherer must have a path');\n      }\n      currentCtxPath = path;\n    }\n\n    const routeRef = getMountPoint(node);\n    if (routeRef) {\n      let path: string | undefined = node.props?.path;\n      // If we're gathering mount points we use the context path as out path, unless\n      // the element has its own path, in which case we use that instead and stop gathering\n      if (currentCtxPath) {\n        if (path) {\n          currentCtxPath = undefined;\n        } else {\n          path = currentCtxPath;\n        }\n      }\n      if (!path) {\n        throw new Error('Mounted routable extension must have a path');\n      }\n      acc.set(routeRef, path);\n    }\n    return currentCtxPath;\n  },\n);\n\nexport const routeParentCollector = createCollector(\n  () => new Map<RouteRef, RouteRef | undefined>(),\n  (acc, node, parent, parentRouteRef?: RouteRef | { sticky: RouteRef }) => {\n    if (parent?.props.element === node) {\n      return parentRouteRef;\n    }\n\n    let nextParent = parentRouteRef;\n\n    const routeRef = getMountPoint(node);\n    if (routeRef) {\n      // \"sticky\" route ref is when we've encountered a mount point gatherer, and we want a\n      // mount points beneath it to have the same parent, regardless of internal structure\n      if (parentRouteRef && 'sticky' in parentRouteRef) {\n        acc.set(routeRef, parentRouteRef.sticky);\n\n        // When we encounter a mount point with an explicit path, we stop gathering\n        // mount points withing the children and remove the sticky state\n        if (node.props?.path) {\n          nextParent = routeRef;\n        } else {\n          nextParent = parentRouteRef;\n        }\n      } else {\n        acc.set(routeRef, parentRouteRef);\n        nextParent = routeRef;\n      }\n    }\n\n    // Mount point gatherers are marked as \"sticky\"\n    if (getComponentData<boolean>(node, 'core.gatherMountPoints')) {\n      return { sticky: nextParent };\n    }\n\n    return nextParent;\n  },\n);\n\n// We always add a child that matches all subroutes but without any route refs. This makes\n// sure that we're always able to match each route no matter how deep the navigation goes.\n// The route resolver then takes care of selecting the most specific match in order to find\n// mount points that are as deep in the routing tree as possible.\nexport const MATCH_ALL_ROUTE: BackstageRouteObject = {\n  caseSensitive: false,\n  path: '/*',\n  element: 'match-all', // These elements aren't used, so we add in a bit of debug information\n  routeRefs: new Set(),\n};\n\nexport const routeObjectCollector = createCollector(\n  () => Array<BackstageRouteObject>(),\n  (acc, node, parent, parentObj: BackstageRouteObject | undefined) => {\n    const parentChildren = parentObj?.children ?? acc;\n    if (parent?.props.element === node) {\n      return parentObj;\n    }\n\n    const path: string | undefined = node.props?.path;\n    const caseSensitive: boolean = Boolean(node.props?.caseSensitive);\n\n    const routeRef = getMountPoint(node);\n    if (routeRef) {\n      if (path) {\n        const newObject: BackstageRouteObject = {\n          caseSensitive,\n          path,\n          element: 'mounted',\n          routeRefs: new Set([routeRef]),\n          children: [MATCH_ALL_ROUTE],\n        };\n        parentChildren.push(newObject);\n        return newObject;\n      }\n\n      parentObj?.routeRefs.add(routeRef);\n    }\n\n    const isGatherer = getComponentData<boolean>(\n      node,\n      'core.gatherMountPoints',\n    );\n    if (isGatherer) {\n      if (!path) {\n        throw new Error('Mount point gatherer must have a path');\n      }\n      const newObject: BackstageRouteObject = {\n        caseSensitive,\n        path,\n        element: 'gathered',\n        routeRefs: new Set(),\n        children: [MATCH_ALL_ROUTE],\n      };\n      parentChildren.push(newObject);\n      return newObject;\n    }\n\n    return parentObj;\n  },\n);\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyRouteRef } from './types';\n\nexport function validateRoutes(\n  routePaths: Map<AnyRouteRef, string>,\n  routeParents: Map<AnyRouteRef, AnyRouteRef | undefined>,\n) {\n  const notLeafRoutes = new Set(routeParents.values());\n  notLeafRoutes.delete(undefined);\n\n  for (const route of routeParents.keys()) {\n    if (notLeafRoutes.has(route)) {\n      continue;\n    }\n\n    let currentRouteRef: AnyRouteRef | undefined = route;\n\n    let fullPath = '';\n    while (currentRouteRef) {\n      const path = routePaths.get(currentRouteRef);\n      if (!path) {\n        throw new Error(`No path for ${currentRouteRef}`);\n      }\n      fullPath = `${path}${fullPath}`;\n      currentRouteRef = routeParents.get(currentRouteRef);\n    }\n\n    const params = fullPath.match(/:(\\w+)/g);\n    if (params) {\n      for (let j = 0; j < params.length; j++) {\n        for (let i = j + 1; i < params.length; i++) {\n          if (params[i] === params[j]) {\n            throw new Error(\n              `Parameter ${params[i]} is duplicated in path ${fullPath}`,\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdentityApi, ProfileInfo } from '../apis';\nimport { SignInResult } from './types';\n\n/**\n * Implementation of the connection between the App-wide IdentityApi\n * and sign-in page.\n */\nexport class AppIdentity implements IdentityApi {\n  private hasIdentity = false;\n  private userId?: string;\n  private profile?: ProfileInfo;\n  private idTokenFunc?: () => Promise<string>;\n  private signOutFunc?: () => Promise<void>;\n\n  getUserId(): string {\n    if (!this.hasIdentity) {\n      throw new Error(\n        'Tried to access IdentityApi userId before app was loaded',\n      );\n    }\n    return this.userId!;\n  }\n\n  getProfile(): ProfileInfo {\n    if (!this.hasIdentity) {\n      throw new Error(\n        'Tried to access IdentityApi profile before app was loaded',\n      );\n    }\n    return this.profile!;\n  }\n\n  async getIdToken(): Promise<string | undefined> {\n    if (!this.hasIdentity) {\n      throw new Error(\n        'Tried to access IdentityApi idToken before app was loaded',\n      );\n    }\n    return this.idTokenFunc?.();\n  }\n\n  async signOut(): Promise<void> {\n    if (!this.hasIdentity) {\n      throw new Error(\n        'Tried to access IdentityApi signOutFunc before app was loaded',\n      );\n    }\n    await this.signOutFunc?.();\n    location.reload();\n  }\n\n  // This is indirectly called by the sign-in page to continue into the app.\n  setSignInResult(result: SignInResult) {\n    if (this.hasIdentity) {\n      return;\n    }\n    if (!result.userId) {\n      throw new Error('Invalid sign-in result, userId not set');\n    }\n    if (!result.profile) {\n      throw new Error('Invalid sign-in result, profile not set');\n    }\n    this.hasIdentity = true;\n    this.userId = result.userId;\n    this.profile = result.profile;\n    this.idTokenFunc = result.getIdToken;\n    this.signOutFunc = result.signOut;\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useMemo, useEffect, useState, PropsWithChildren } from 'react';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { useApi, appThemeApiRef, AppTheme } from '../apis';\nimport { useObservable } from 'react-use';\n\n// This tries to find the most accurate match, but also falls back to less\n// accurate results in order to avoid errors.\nfunction resolveTheme(\n  themeId: string | undefined,\n  shouldPreferDark: boolean,\n  themes: AppTheme[],\n) {\n  if (themeId !== undefined) {\n    const selectedTheme = themes.find(theme => theme.id === themeId);\n    if (selectedTheme) {\n      return selectedTheme;\n    }\n  }\n\n  if (shouldPreferDark) {\n    const darkTheme = themes.find(theme => theme.variant === 'dark');\n    if (darkTheme) {\n      return darkTheme;\n    }\n  }\n\n  const lightTheme = themes.find(theme => theme.variant === 'light');\n  if (lightTheme) {\n    return lightTheme;\n  }\n\n  return themes[0];\n}\n\nconst useShouldPreferDarkTheme = () => {\n  const mediaQuery = useMemo(\n    () => window.matchMedia('(prefers-color-scheme: dark)'),\n    [],\n  );\n  const [shouldPreferDark, setPrefersDark] = useState(mediaQuery.matches);\n\n  useEffect(() => {\n    const listener = (event: MediaQueryListEvent) => {\n      setPrefersDark(event.matches);\n    };\n    mediaQuery.addListener(listener);\n    return () => {\n      mediaQuery.removeListener(listener);\n    };\n  }, [mediaQuery]);\n\n  return shouldPreferDark;\n};\n\nexport function AppThemeProvider({ children }: PropsWithChildren<{}>) {\n  const appThemeApi = useApi(appThemeApiRef);\n  const themeId = useObservable(\n    appThemeApi.activeThemeId$(),\n    appThemeApi.getActiveThemeId(),\n  );\n\n  // Browser feature detection won't change over time, so ignore lint rule\n  const shouldPreferDark = Boolean(window.matchMedia)\n    ? useShouldPreferDarkTheme() // eslint-disable-line react-hooks/rules-of-hooks\n    : false;\n\n  const appTheme = resolveTheme(\n    themeId,\n    shouldPreferDark,\n    appThemeApi.getInstalledThemes(),\n  );\n  if (!appTheme) {\n    throw new Error('App has no themes');\n  }\n\n  return (\n    <ThemeProvider theme={appTheme.theme}>\n      <CssBaseline>{children}</CssBaseline>\n    </ThemeProvider>\n  );\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport React, {\n  ComponentType,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { useAsync } from 'react-use';\nimport {\n  AnyApiFactory,\n  ApiHolder,\n  ApiProvider,\n  ApiRegistry,\n  AppTheme,\n  appThemeApiRef,\n  AppThemeSelector,\n  configApiRef,\n  ConfigReader,\n  LocalStorageFeatureFlags,\n  useApi,\n} from '../apis';\nimport {\n  AppThemeApi,\n  ConfigApi,\n  featureFlagsApiRef,\n  identityApiRef,\n} from '../apis/definitions';\nimport { ApiFactoryRegistry, ApiResolver } from '../apis/system';\nimport {\n  childDiscoverer,\n  routeElementDiscoverer,\n  traverseElementTree,\n} from '../extensions/traversal';\nimport { IconComponent, IconComponentMap, IconKey } from '../icons';\nimport { BackstagePlugin } from '../plugin';\nimport { pluginCollector } from '../plugin/collectors';\nimport { AnyRoutes } from '../plugin/types';\nimport { RouteRef, ExternalRouteRef, SubRouteRef } from '../routing';\nimport {\n  routeObjectCollector,\n  routeParentCollector,\n  routePathCollector,\n} from '../routing/collectors';\nimport { RoutingProvider } from '../routing/hooks';\nimport { validateRoutes } from '../routing/validation';\nimport { AppContextProvider } from './AppContext';\nimport { AppIdentity } from './AppIdentity';\nimport { AppThemeProvider } from './AppThemeProvider';\nimport {\n  AppComponents,\n  AppConfigLoader,\n  AppContext,\n  AppOptions,\n  AppRouteBinder,\n  BackstageApp,\n  SignInPageProps,\n  SignInResult,\n} from './types';\n\nexport function generateBoundRoutes(bindRoutes: AppOptions['bindRoutes']) {\n  const result = new Map<ExternalRouteRef, RouteRef | SubRouteRef>();\n\n  if (bindRoutes) {\n    const bind: AppRouteBinder = (externalRoutes, targetRoutes: AnyRoutes) => {\n      for (const [key, value] of Object.entries(targetRoutes)) {\n        const externalRoute = externalRoutes[key];\n        if (!externalRoute) {\n          throw new Error(`Key ${key} is not an existing external route`);\n        }\n        if (!value && !externalRoute.optional) {\n          throw new Error(\n            `External route ${key} is required but was undefined`,\n          );\n        }\n        if (value) {\n          result.set(externalRoute, value);\n        }\n      }\n    };\n    bindRoutes({ bind });\n  }\n\n  return result;\n}\n\ntype FullAppOptions = {\n  apis: Iterable<AnyApiFactory>;\n  icons: IconComponentMap;\n  plugins: BackstagePlugin<any, any>[];\n  components: AppComponents;\n  themes: AppTheme[];\n  configLoader?: AppConfigLoader;\n  defaultApis: Iterable<AnyApiFactory>;\n  bindRoutes?: AppOptions['bindRoutes'];\n};\n\nfunction useConfigLoader(\n  configLoader: AppConfigLoader | undefined,\n  components: AppComponents,\n  appThemeApi: AppThemeApi,\n): { api: ConfigApi } | { node: JSX.Element } {\n  // Keeping this synchronous when a config loader isn't set simplifies tests a lot\n  const hasConfig = Boolean(configLoader);\n  const config = useAsync(configLoader || (() => Promise.resolve([])));\n\n  let noConfigNode = undefined;\n\n  if (hasConfig && config.loading) {\n    const { Progress } = components;\n    noConfigNode = <Progress />;\n  } else if (config.error) {\n    const { BootErrorPage } = components;\n    noConfigNode = <BootErrorPage step=\"load-config\" error={config.error} />;\n  }\n\n  // Before the config is loaded we can't use a router, so exit early\n  if (noConfigNode) {\n    return {\n      node: (\n        <ApiProvider apis={ApiRegistry.from([[appThemeApiRef, appThemeApi]])}>\n          <AppThemeProvider>{noConfigNode}</AppThemeProvider>\n        </ApiProvider>\n      ),\n    };\n  }\n\n  const configReader = ConfigReader.fromConfigs(config.value ?? []);\n\n  return { api: configReader };\n}\n\nclass AppContextImpl implements AppContext {\n  constructor(private readonly app: PrivateAppImpl) {}\n\n  getPlugins(): BackstagePlugin<any, any>[] {\n    // eslint-disable-next-line no-console\n    console.warn('appContext.getPlugins() is deprecated and will be removed');\n    return this.app.getPlugins();\n  }\n\n  getSystemIcon(key: IconKey): IconComponent | undefined {\n    return this.app.getSystemIcon(key);\n  }\n\n  getComponents(): AppComponents {\n    return this.app.getComponents();\n  }\n\n  getProvider(): React.ComponentType<{}> {\n    // eslint-disable-next-line no-console\n    console.warn('appContext.getProvider() is deprecated and will be removed');\n    return this.app.getProvider();\n  }\n\n  getRouter(): React.ComponentType<{}> {\n    // eslint-disable-next-line no-console\n    console.warn('appContext.getRouter() is deprecated and will be removed');\n    return this.app.getRouter();\n  }\n\n  getRoutes(): JSX.Element[] {\n    // eslint-disable-next-line no-console\n    console.warn('appContext.getRoutes() is deprecated and will be removed');\n    return this.app.getRoutes();\n  }\n}\n\nexport class PrivateAppImpl implements BackstageApp {\n  private apiHolder?: ApiHolder;\n  private configApi?: ConfigApi;\n\n  private readonly apis: Iterable<AnyApiFactory>;\n  private readonly icons: IconComponentMap;\n  private readonly plugins: Set<BackstagePlugin<any, any>>;\n  private readonly components: AppComponents;\n  private readonly themes: AppTheme[];\n  private readonly configLoader?: AppConfigLoader;\n  private readonly defaultApis: Iterable<AnyApiFactory>;\n  private readonly bindRoutes: AppOptions['bindRoutes'];\n\n  private readonly identityApi = new AppIdentity();\n\n  constructor(options: FullAppOptions) {\n    this.apis = options.apis;\n    this.icons = options.icons;\n    this.plugins = new Set(options.plugins);\n    this.components = options.components;\n    this.themes = options.themes;\n    this.configLoader = options.configLoader;\n    this.defaultApis = options.defaultApis;\n    this.bindRoutes = options.bindRoutes;\n  }\n\n  getPlugins(): BackstagePlugin<any, any>[] {\n    return Array.from(this.plugins);\n  }\n\n  getSystemIcon(key: IconKey): IconComponent | undefined {\n    return this.icons[key];\n  }\n\n  getComponents(): AppComponents {\n    return this.components;\n  }\n\n  getRoutes(): JSX.Element[] {\n    const routes = new Array<JSX.Element>();\n\n    const { NotFoundErrorPage } = this.components;\n\n    for (const plugin of this.plugins.values()) {\n      for (const output of plugin.output()) {\n        switch (output.type) {\n          case 'legacy-route': {\n            const { path, component: Component } = output;\n            routes.push(\n              <Route key={path} path={path} element={<Component />} />,\n            );\n            break;\n          }\n          case 'route': {\n            const { target, component: Component } = output;\n            routes.push(\n              <Route\n                key={`${plugin.getId()}-${target.path}`}\n                path={target.path}\n                element={<Component />}\n              />,\n            );\n            break;\n          }\n          case 'legacy-redirect-route': {\n            const { path, target } = output;\n            routes.push(<Navigate key={path} to={target} />);\n            break;\n          }\n          case 'redirect-route': {\n            const { from, to } = output;\n            routes.push(<Navigate key={from.path} to={to.path} />);\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    }\n\n    routes.push(\n      <Route\n        key=\"not-found-error-page\"\n        path=\"/*\"\n        element={<NotFoundErrorPage />}\n      />,\n    );\n\n    return routes;\n  }\n\n  getProvider(): ComponentType<{}> {\n    const appContext = new AppContextImpl(this);\n\n    const Provider = ({ children }: PropsWithChildren<{}>) => {\n      const appThemeApi = useMemo(\n        () => AppThemeSelector.createWithStorage(this.themes),\n        [],\n      );\n\n      const { routePaths, routeParents, routeObjects } = useMemo(() => {\n        const result = traverseElementTree({\n          root: children,\n          discoverers: [childDiscoverer, routeElementDiscoverer],\n          collectors: {\n            routePaths: routePathCollector,\n            routeParents: routeParentCollector,\n            routeObjects: routeObjectCollector,\n            collectedPlugins: pluginCollector,\n          },\n        });\n\n        validateRoutes(result.routePaths, result.routeParents);\n\n        // TODO(Rugvip): Restructure the public API so that we can get an immediate view of\n        //               the app, rather than having to wait for the provider to render.\n        //               For now we need to push the additional plugins we find during\n        //               collection and then make sure we initialize things afterwards.\n        result.collectedPlugins.forEach(plugin => this.plugins.add(plugin));\n        this.verifyPlugins(this.plugins);\n\n        // Initialize APIs once all plugins are available\n        this.getApiHolder();\n\n        return result;\n      }, [children]);\n\n      const loadedConfig = useConfigLoader(\n        this.configLoader,\n        this.components,\n        appThemeApi,\n      );\n\n      const hasConfigApi = 'api' in loadedConfig;\n      if (hasConfigApi) {\n        const { api } = loadedConfig as { api: Config };\n        this.configApi = api;\n      }\n\n      useEffect(() => {\n        if (hasConfigApi) {\n          const featureFlagsApi = this.getApiHolder().get(featureFlagsApiRef)!;\n\n          for (const plugin of this.plugins.values()) {\n            for (const output of plugin.output()) {\n              switch (output.type) {\n                case 'feature-flag': {\n                  featureFlagsApi.registerFlag({\n                    name: output.name,\n                    pluginId: plugin.getId(),\n                  });\n                  break;\n                }\n                default:\n                  break;\n              }\n            }\n          }\n        }\n      }, [hasConfigApi, loadedConfig]);\n\n      if ('node' in loadedConfig) {\n        // Loading or error\n        return loadedConfig.node;\n      }\n\n      return (\n        <ApiProvider apis={this.getApiHolder()}>\n          <AppContextProvider appContext={appContext}>\n            <AppThemeProvider>\n              <RoutingProvider\n                routePaths={routePaths}\n                routeParents={routeParents}\n                routeObjects={routeObjects}\n                routeBindings={generateBoundRoutes(this.bindRoutes)}\n              >\n                {children}\n              </RoutingProvider>\n            </AppThemeProvider>\n          </AppContextProvider>\n        </ApiProvider>\n      );\n    };\n    return Provider;\n  }\n\n  getRouter(): ComponentType<{}> {\n    const {\n      Router: RouterComponent,\n      SignInPage: SignInPageComponent,\n    } = this.components;\n\n    // This wraps the sign-in page and waits for sign-in to be completed before rendering the app\n    const SignInPageWrapper = ({\n      component: Component,\n      children,\n    }: {\n      component: ComponentType<SignInPageProps>;\n      children: ReactElement;\n    }) => {\n      const [result, setResult] = useState<SignInResult>();\n\n      if (result) {\n        this.identityApi.setSignInResult(result);\n        return children;\n      }\n\n      return <Component onResult={setResult} />;\n    };\n\n    const AppRouter = ({ children }: PropsWithChildren<{}>) => {\n      const configApi = useApi(configApiRef);\n\n      let { pathname } = new URL(\n        configApi.getOptionalString('app.baseUrl') ?? '/',\n        'http://dummy.dev', // baseUrl can be specified as just a path\n      );\n      if (pathname.endsWith('/')) {\n        pathname = pathname.replace(/\\/$/, '');\n      }\n\n      // If the app hasn't configured a sign-in page, we just continue as guest.\n      if (!SignInPageComponent) {\n        this.identityApi.setSignInResult({\n          userId: 'guest',\n          profile: {\n            email: 'guest@example.com',\n            displayName: 'Guest',\n          },\n        });\n\n        return (\n          <RouterComponent>\n            <Routes>\n              <Route path={`${pathname}/*`} element={<>{children}</>} />\n            </Routes>\n          </RouterComponent>\n        );\n      }\n\n      return (\n        <RouterComponent>\n          <SignInPageWrapper component={SignInPageComponent}>\n            <Routes>\n              <Route path={`${pathname}/*`} element={<>{children}</>} />\n            </Routes>\n          </SignInPageWrapper>\n        </RouterComponent>\n      );\n    };\n\n    return AppRouter;\n  }\n\n  private getApiHolder(): ApiHolder {\n    if (this.apiHolder) {\n      return this.apiHolder;\n    }\n\n    const registry = new ApiFactoryRegistry();\n\n    registry.register('static', {\n      api: appThemeApiRef,\n      deps: {},\n      factory: () => AppThemeSelector.createWithStorage(this.themes),\n    });\n    registry.register('static', {\n      api: configApiRef,\n      deps: {},\n      factory: () => {\n        if (!this.configApi) {\n          throw new Error(\n            'Tried to access config API before config was loaded',\n          );\n        }\n        return this.configApi;\n      },\n    });\n    registry.register('static', {\n      api: identityApiRef,\n      deps: {},\n      factory: () => this.identityApi,\n    });\n\n    // It's possible to replace the feature flag API, but since we must have at least\n    // one implementation we add it here directly instead of through the defaultApis.\n    registry.register('default', {\n      api: featureFlagsApiRef,\n      deps: {},\n      factory: () => new LocalStorageFeatureFlags(),\n    });\n    for (const factory of this.defaultApis) {\n      registry.register('default', factory);\n    }\n\n    for (const plugin of this.plugins) {\n      for (const factory of plugin.getApis()) {\n        if (!registry.register('default', factory)) {\n          throw new Error(\n            `Plugin ${plugin.getId()} tried to register duplicate or forbidden API factory for ${\n              factory.api\n            }`,\n          );\n        }\n      }\n    }\n\n    for (const factory of this.apis) {\n      if (!registry.register('app', factory)) {\n        throw new Error(\n          `Duplicate or forbidden API factory for ${factory.api} in app`,\n        );\n      }\n    }\n\n    ApiResolver.validateFactories(registry, registry.getAllApis());\n\n    this.apiHolder = new ApiResolver(registry);\n\n    return this.apiHolder;\n  }\n\n  /**\n   * @deprecated\n   */\n  verify() {}\n\n  private verifyPlugins(plugins: Iterable<BackstagePlugin>) {\n    const pluginIds = new Set<string>();\n\n    for (const plugin of plugins) {\n      const id = plugin.getId();\n      if (pluginIds.has(id)) {\n        throw new Error(`Duplicate plugin found '${id}'`);\n      }\n      pluginIds.add(id);\n    }\n  }\n}\n"],"names":["DEFAULT_PROVIDER","OAuth2Icon","GitlabIcon","GoogleIcon","OktaIcon","SamlIcon","Auth0Icon","MicrosoftIcon","OneLoginIcon","SCOPE_PREFIX","hasScopes","_a"],"mappings":"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"}