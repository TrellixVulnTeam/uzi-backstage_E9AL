'use strict';

const PARALLEL_ENV_VAR = "BACKSTAGE_CLI_BUILD_PARALLEL";
function isParallelDefault(parallel) {
  return parallel === void 0 || parallel === true;
}
function parseParallel(parallel) {
  if (parallel === void 0 || parallel === null) {
    return true;
  } else if (typeof parallel === "boolean") {
    return parallel;
  } else if (typeof parallel === "number" && Number.isInteger(parallel)) {
    return parallel;
  } else if (typeof parallel === "string") {
    if (parallel === "true") {
      return true;
    } else if (parallel === "false") {
      return false;
    } else if (Number.isInteger(parseFloat(parallel.toString()))) {
      return Number(parallel);
    }
  }
  throw Error(`Parallel option value '${parallel}' is not a boolean or integer`);
}

exports.PARALLEL_ENV_VAR = PARALLEL_ENV_VAR;
exports.isParallelDefault = isParallelDefault;
exports.parseParallel = parseParallel;
//# sourceMappingURL=parallel-a4714c72.cjs.js.map
