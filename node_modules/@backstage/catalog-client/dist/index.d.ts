import { Entity, EntityName, Location } from '@backstage/catalog-model';

declare type CatalogEntitiesRequest = {
    filter?: Record<string, string | string[]>[] | Record<string, string | string[]> | undefined;
    fields?: string[] | undefined;
};
declare type CatalogListResponse<T> = {
    items: T[];
};
declare type CatalogRequestOptions = {
    token?: string;
};
interface CatalogApi {
    getEntities(request?: CatalogEntitiesRequest, options?: CatalogRequestOptions): Promise<CatalogListResponse<Entity>>;
    getEntityByName(name: EntityName, options?: CatalogRequestOptions): Promise<Entity | undefined>;
    removeEntityByUid(uid: string, options?: CatalogRequestOptions): Promise<void>;
    getLocationById(id: string, options?: CatalogRequestOptions): Promise<Location | undefined>;
    getOriginLocationByEntity(entity: Entity, options?: CatalogRequestOptions): Promise<Location | undefined>;
    getLocationByEntity(entity: Entity, options?: CatalogRequestOptions): Promise<Location | undefined>;
    addLocation(location: AddLocationRequest, options?: CatalogRequestOptions): Promise<AddLocationResponse>;
    removeLocationById(id: string, options?: CatalogRequestOptions): Promise<void>;
}
declare type AddLocationRequest = {
    type?: string;
    target: string;
    dryRun?: boolean;
    presence?: 'optional' | 'required';
};
declare type AddLocationResponse = {
    location: Location;
    entities: Entity[];
};

/**
 * This is a copy of the core DiscoveryApi, to avoid importing core.
 */
declare type DiscoveryApi = {
    getBaseUrl(pluginId: string): Promise<string>;
};

declare class CatalogClient implements CatalogApi {
    private readonly discoveryApi;
    constructor(options: {
        discoveryApi: DiscoveryApi;
    });
    getLocationById(id: string, options?: CatalogRequestOptions): Promise<Location | undefined>;
    getEntities(request?: CatalogEntitiesRequest, options?: CatalogRequestOptions): Promise<CatalogListResponse<Entity>>;
    getEntityByName(compoundName: EntityName, options?: CatalogRequestOptions): Promise<Entity | undefined>;
    addLocation({ type, target, dryRun, presence }: AddLocationRequest, options?: CatalogRequestOptions): Promise<AddLocationResponse>;
    getOriginLocationByEntity(entity: Entity, options?: CatalogRequestOptions): Promise<Location | undefined>;
    getLocationByEntity(entity: Entity, options?: CatalogRequestOptions): Promise<Location | undefined>;
    removeLocationById(id: string, options?: CatalogRequestOptions): Promise<void>;
    removeEntityByUid(uid: string, options?: CatalogRequestOptions): Promise<void>;
    private requestIgnored;
    private requestRequired;
    private requestOptional;
}

/**
 * The entity `status.items[].type` for the status of the processing engine in
 * regards to an entity.
 */
declare const ENTITY_STATUS_CATALOG_PROCESSING_TYPE = "backstage.io/catalog-processing";

export { AddLocationRequest, AddLocationResponse, CatalogApi, CatalogClient, CatalogEntitiesRequest, CatalogListResponse, ENTITY_STATUS_CATALOG_PROCESSING_TYPE };
