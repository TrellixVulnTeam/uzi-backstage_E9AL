import { createRouteRef, createPlugin, createRoutableExtension, SidebarItem, EmptyState, CodeSnippet, useApi, SessionState, googleAuthApiRef, microsoftAuthApiRef, githubAuthApiRef, gitlabAuthApiRef, auth0AuthApiRef, oktaAuthApiRef, oauth2ApiRef, configApiRef, InfoCard, featureFlagsApiRef, FeatureFlagState, SidebarPinStateContext, identityApiRef, sidebarConfig, appThemeApiRef, Page, Header, TabbedLayout } from '@backstage/core';
import React, { useState, useEffect, useCallback, useContext, cloneElement } from 'react';
import SettingsIcon from '@material-ui/icons/Settings';
import { Typography, Button, ListItem, ListItemIcon, ListItemText, Tooltip, ListItemSecondaryAction, List, Switch, makeStyles, Avatar, IconButton, Menu, MenuItem, Grid } from '@material-ui/core';
import Star from '@material-ui/icons/Star';
import SignOutIcon from '@material-ui/icons/MeetingRoom';
import MoreVertIcon from '@material-ui/icons/MoreVert';
import { useObservable } from 'react-use';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import ToggleButton from '@material-ui/lab/ToggleButton';
import ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';

const settingsRouteRef = createRouteRef({
  path: "/settings",
  title: "Settings"
});
const userSettingsPlugin = createPlugin({
  id: "user-settings",
  routes: {
    settingsPage: settingsRouteRef
  }
});
const UserSettingsPage = userSettingsPlugin.provide(createRoutableExtension({
  component: () => Promise.resolve().then(function () { return SettingsPage$1; }).then((m) => m.SettingsPage),
  mountPoint: settingsRouteRef
}));

const Settings = () => {
  return /* @__PURE__ */ React.createElement(SidebarItem, {
    text: "Settings",
    to: settingsRouteRef.path,
    icon: SettingsIcon
  });
};

const EXAMPLE = `auth:
  providers:
    google:
      development:
        clientId: \${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: \${AUTH_GOOGLE_CLIENT_SECRET}
`;
const EmptyProviders = () => /* @__PURE__ */ React.createElement(EmptyState, {
  missing: "content",
  title: "No Authentication Providers",
  description: "You can add Authentication Providers to Backstage which allows you to use these providers to authenticate yourself.",
  action: /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "Open ", /* @__PURE__ */ React.createElement("code", null, "app-config.yaml"), " and make the changes as highlighted below:"), /* @__PURE__ */ React.createElement(CodeSnippet, {
    text: EXAMPLE,
    language: "yaml",
    showLineNumbers: true,
    highlightedNumbers: [3, 4, 5, 6, 7, 8],
    customStyle: {background: "inherit", fontSize: "115%"}
  }), /* @__PURE__ */ React.createElement(Button, {
    variant: "contained",
    color: "primary",
    href: "https://backstage.io/docs/auth/add-auth-provider"
  }, "Read More"))
});

const ProviderSettingsItem = ({
  title,
  description,
  icon: Icon,
  apiRef
}) => {
  const api = useApi(apiRef);
  const [signedIn, setSignedIn] = useState(false);
  useEffect(() => {
    let didCancel = false;
    const subscription = api.sessionState$().subscribe((sessionState) => {
      if (!didCancel) {
        setSignedIn(sessionState === SessionState.SignedIn);
      }
    });
    return () => {
      didCancel = true;
      subscription.unsubscribe();
    };
  }, [api]);
  return /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Icon, null)), /* @__PURE__ */ React.createElement(ListItemText, {
    primary: title,
    secondary: /* @__PURE__ */ React.createElement(Tooltip, {
      placement: "top",
      arrow: true,
      title: description
    }, /* @__PURE__ */ React.createElement("span", null, description)),
    secondaryTypographyProps: {noWrap: true, style: {width: "80%"}}
  }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(Tooltip, {
    placement: "top",
    arrow: true,
    title: signedIn ? `Sign out from ${title}` : `Sign in to ${title}`
  }, /* @__PURE__ */ React.createElement(Button, {
    variant: "outlined",
    color: "primary",
    onClick: () => signedIn ? api.signOut() : api.signIn()
  }, signedIn ? `Sign out` : `Sign in`))));
};

const DefaultProviderSettings = ({configuredProviders}) => /* @__PURE__ */ React.createElement(React.Fragment, null, configuredProviders.includes("google") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "Google",
  description: "Provides authentication towards Google APIs and identities",
  apiRef: googleAuthApiRef,
  icon: Star
}), configuredProviders.includes("microsoft") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "Microsoft",
  description: "Provides authentication towards Microsoft APIs and identities",
  apiRef: microsoftAuthApiRef,
  icon: Star
}), configuredProviders.includes("github") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "GitHub",
  description: "Provides authentication towards GitHub APIs",
  apiRef: githubAuthApiRef,
  icon: Star
}), configuredProviders.includes("gitlab") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "GitLab",
  description: "Provides authentication towards GitLab APIs",
  apiRef: gitlabAuthApiRef,
  icon: Star
}), configuredProviders.includes("auth0") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "Auth0",
  description: "Provides authentication towards Auth0 APIs",
  apiRef: auth0AuthApiRef,
  icon: Star
}), configuredProviders.includes("okta") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "Okta",
  description: "Provides authentication towards Okta APIs",
  apiRef: oktaAuthApiRef,
  icon: Star
}), configuredProviders.includes("oauth2") && /* @__PURE__ */ React.createElement(ProviderSettingsItem, {
  title: "YourOrg",
  description: "Example of how to use oauth2 custom provider",
  apiRef: oauth2ApiRef,
  icon: Star
}));

const AuthProviders = ({providerSettings}) => {
  const configApi = useApi(configApiRef);
  const providersConfig = configApi.getOptionalConfig("auth.providers");
  const configuredProviders = (providersConfig == null ? void 0 : providersConfig.keys()) || [];
  const providers = providerSettings != null ? providerSettings : /* @__PURE__ */ React.createElement(DefaultProviderSettings, {
    configuredProviders
  });
  if (!providerSettings && !(configuredProviders == null ? void 0 : configuredProviders.length)) {
    return /* @__PURE__ */ React.createElement(EmptyProviders, null);
  }
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Available Providers"
  }, /* @__PURE__ */ React.createElement(List, {
    dense: true
  }, providers));
};

const EXAMPLE$1 = `import { createPlugin } from '@backstage/core';

export default createPlugin({
  id: 'plugin-name',
  register({ router, featureFlags }) {
    featureFlags.register('enable-example-feature');
  },
});
`;
const EmptyFlags = () => /* @__PURE__ */ React.createElement(EmptyState, {
  missing: "content",
  title: "No Feature Flags",
  description: "Feature Flags make it possible for plugins to register features in Backstage for users to opt into. You can use this to split out logic in your code for manual A/B testing, etc.",
  action: /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, {
    variant: "body1"
  }, "An example for how to add a feature flag is highlighted below:"), /* @__PURE__ */ React.createElement(CodeSnippet, {
    text: EXAMPLE$1,
    language: "typescript",
    showLineNumbers: true,
    highlightedNumbers: [6],
    customStyle: {background: "inherit", fontSize: "115%"}
  }), /* @__PURE__ */ React.createElement(Button, {
    variant: "contained",
    color: "primary",
    href: "https://backstage.io/docs/api/utility-apis"
  }, "Read More"))
});

const FlagItem = ({flag, enabled, toggleHandler}) => /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, {
  primary: flag.name,
  secondary: `Registered in ${flag.pluginId} plugin`
}), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(Tooltip, {
  placement: "top",
  arrow: true,
  title: enabled ? "Disable" : "Enable"
}, /* @__PURE__ */ React.createElement(Switch, {
  color: "primary",
  checked: enabled,
  onChange: () => toggleHandler(flag.name),
  name: flag.name
}))));

const FeatureFlags = () => {
  const featureFlagsApi = useApi(featureFlagsApiRef);
  const featureFlags = featureFlagsApi.getRegisteredFlags();
  const initialFlagState = Object.fromEntries(featureFlags.map(({name}) => [name, featureFlagsApi.isActive(name)]));
  const [state, setState] = useState(initialFlagState);
  const toggleFlag = useCallback((flagName) => {
    const newState = featureFlagsApi.isActive(flagName) ? FeatureFlagState.None : FeatureFlagState.Active;
    featureFlagsApi.save({
      states: {[flagName]: newState},
      merge: true
    });
    setState((prevState) => ({
      ...prevState,
      [flagName]: newState === FeatureFlagState.Active
    }));
  }, [featureFlagsApi]);
  if (!featureFlags.length) {
    return /* @__PURE__ */ React.createElement(EmptyFlags, null);
  }
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Feature Flags"
  }, /* @__PURE__ */ React.createElement(List, {
    dense: true
  }, featureFlags.map((featureFlag) => {
    const enabled = Boolean(state[featureFlag.name]);
    return /* @__PURE__ */ React.createElement(FlagItem, {
      key: featureFlag.name,
      flag: featureFlag,
      enabled,
      toggleHandler: toggleFlag
    });
  })));
};

const PinButton = () => {
  const {isPinned, toggleSidebarPinState} = useContext(SidebarPinStateContext);
  return /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, {
    primary: "Pin Sidebar",
    secondary: "Prevent the sidebar from collapsing"
  }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(Tooltip, {
    placement: "top",
    arrow: true,
    title: `${isPinned ? "Unpin" : "Pin"} Sidebar`
  }, /* @__PURE__ */ React.createElement(Switch, {
    color: "primary",
    checked: isPinned,
    onChange: () => toggleSidebarPinState(),
    name: "pin",
    inputProps: {"aria-label": "Pin Sidebar Switch"}
  }))));
};

const useUserProfile = () => {
  var _a;
  const identityApi = useApi(identityApiRef);
  const userId = identityApi.getUserId();
  const profile = identityApi.getProfile();
  const displayName = (_a = profile.displayName) != null ? _a : userId;
  return {profile, displayName};
};

const useStyles = makeStyles((theme) => ({
  avatar: {
    width: ({size}) => size,
    height: ({size}) => size,
    fontSize: ({size}) => size * 0.7,
    border: `1px solid ${theme.palette.textSubtle}`
  }
}));
const SignInAvatar = ({size}) => {
  const {iconSize} = sidebarConfig;
  const classes = useStyles(size ? {size} : {size: iconSize});
  const {profile} = useUserProfile();
  return /* @__PURE__ */ React.createElement(Avatar, {
    src: profile.picture,
    className: classes.avatar
  });
};

const UserSettingsMenu = () => {
  const identityApi = useApi(identityApiRef);
  const [open, setOpen] = React.useState(false);
  const [anchorEl, setAnchorEl] = React.useState(void 0);
  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
    setOpen(true);
  };
  const handleClose = () => {
    setAnchorEl(void 0);
    setOpen(false);
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(IconButton, {
    "aria-label": "more",
    onClick: handleOpen
  }, /* @__PURE__ */ React.createElement(MoreVertIcon, null)), /* @__PURE__ */ React.createElement(Menu, {
    anchorEl,
    open,
    onClose: handleClose
  }, /* @__PURE__ */ React.createElement(MenuItem, {
    onClick: () => identityApi.signOut()
  }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(SignOutIcon, null)), "Sign Out")));
};

const Profile = () => {
  const {profile, displayName} = useUserProfile();
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Profile"
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    spacing: 6
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(SignInAvatar, {
    size: 96
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12,
    sm: true,
    container: true
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: true,
    container: true,
    direction: "column",
    spacing: 2
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: true
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "subtitle1",
    gutterBottom: true
  }, displayName), /* @__PURE__ */ React.createElement(Typography, {
    variant: "body2",
    color: "textSecondary"
  }, profile.email))), /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(UserSettingsMenu, null)))));
};

const ThemeIcon = ({id, activeId, icon}) => icon ? cloneElement(icon, {
  color: activeId === id ? "primary" : void 0
}) : /* @__PURE__ */ React.createElement(AutoIcon, {
  color: activeId === id ? "primary" : void 0
});
const useStyles$1 = makeStyles((theme) => ({
  list: {
    [theme.breakpoints.down("xs")]: {
      padding: `0 0 12px`
    }
  },
  listItemText: {
    [theme.breakpoints.down("xs")]: {
      paddingRight: 0,
      paddingLeft: 0
    }
  },
  listItemSecondaryAction: {
    [theme.breakpoints.down("xs")]: {
      width: "100%",
      top: "auto",
      right: "auto",
      position: "relative",
      transform: "unset"
    }
  }
}));
const TooltipToggleButton = ({
  children,
  title,
  value,
  ...props
}) => /* @__PURE__ */ React.createElement(Tooltip, {
  placement: "top",
  arrow: true,
  title
}, /* @__PURE__ */ React.createElement(ToggleButton, {
  value,
  ...props
}, children));
const ThemeToggle = () => {
  const classes = useStyles$1();
  const appThemeApi = useApi(appThemeApiRef);
  const themeId = useObservable(appThemeApi.activeThemeId$(), appThemeApi.getActiveThemeId());
  const themeIds = appThemeApi.getInstalledThemes();
  const handleSetTheme = (_event, newThemeId) => {
    if (themeIds.some((t) => t.id === newThemeId)) {
      appThemeApi.setActiveThemeId(newThemeId);
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
  };
  return /* @__PURE__ */ React.createElement(ListItem, {
    className: classes.list
  }, /* @__PURE__ */ React.createElement(ListItemText, {
    className: classes.listItemText,
    primary: "Theme",
    secondary: "Change the theme mode"
  }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, {
    className: classes.listItemSecondaryAction
  }, /* @__PURE__ */ React.createElement(ToggleButtonGroup, {
    exclusive: true,
    size: "small",
    value: themeId != null ? themeId : "auto",
    onChange: handleSetTheme
  }, themeIds.map((theme) => {
    var _a;
    const themeIcon = (_a = themeIds.find((t) => t.id === theme.id)) == null ? void 0 : _a.icon;
    return /* @__PURE__ */ React.createElement(TooltipToggleButton, {
      key: theme.id,
      title: `Select ${theme.title}`,
      value: theme.variant
    }, /* @__PURE__ */ React.createElement(React.Fragment, null, theme.variant, "\xA0", /* @__PURE__ */ React.createElement(ThemeIcon, {
      id: theme.id,
      icon: themeIcon,
      activeId: themeId
    })));
  }), /* @__PURE__ */ React.createElement(Tooltip, {
    placement: "top",
    arrow: true,
    title: "Select auto theme"
  }, /* @__PURE__ */ React.createElement(ToggleButton, {
    value: "auto",
    selected: themeId === void 0
  }, "Auto\xA0", /* @__PURE__ */ React.createElement(AutoIcon, {
    color: themeId === void 0 ? "primary" : void 0
  }))))));
};

const General = () => {
  return /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row",
    spacing: 3
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    sm: 12,
    md: 6
  }, /* @__PURE__ */ React.createElement(Profile, null)), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    sm: 12,
    md: 6
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Appearance"
  }, /* @__PURE__ */ React.createElement(List, {
    dense: true
  }, /* @__PURE__ */ React.createElement(ThemeToggle, null), /* @__PURE__ */ React.createElement(PinButton, null)))));
};

const SettingsPage = ({providerSettings}) => {
  return /* @__PURE__ */ React.createElement(Page, {
    themeId: "home"
  }, /* @__PURE__ */ React.createElement(Header, {
    title: "Settings"
  }), /* @__PURE__ */ React.createElement(TabbedLayout, null, /* @__PURE__ */ React.createElement(TabbedLayout.Route, {
    path: "general",
    title: "General"
  }, /* @__PURE__ */ React.createElement(General, null)), /* @__PURE__ */ React.createElement(TabbedLayout.Route, {
    path: "auth-providers",
    title: "Authentication Providers"
  }, /* @__PURE__ */ React.createElement(AuthProviders, {
    providerSettings
  })), /* @__PURE__ */ React.createElement(TabbedLayout.Route, {
    path: "feature-flags",
    title: "Feature Flags"
  }, /* @__PURE__ */ React.createElement(FeatureFlags, null))));
};

var SettingsPage$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SettingsPage: SettingsPage
});

export { AuthProviders, DefaultProviderSettings, ProviderSettingsItem, SettingsPage as Router, Settings, UserSettingsPage, userSettingsPlugin as plugin, userSettingsPlugin };
//# sourceMappingURL=index.esm.js.map
