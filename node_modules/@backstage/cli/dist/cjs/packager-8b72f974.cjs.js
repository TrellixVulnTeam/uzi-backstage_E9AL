'use strict';

var chalk = require('chalk');
var index = require('./index-ce78e402.cjs.js');
var fs = require('fs-extra');
var path = require('path');
var svgrTemplate = require('./svgrTemplate-2d0d15cf.cjs.js');
var rollup = require('rollup');
var peerDepsExternal = require('rollup-plugin-peer-deps-external');
var commonjs = require('@rollup/plugin-commonjs');
var resolve = require('@rollup/plugin-node-resolve');
var postcss = require('rollup-plugin-postcss');
var esbuild = require('rollup-plugin-esbuild');
var svgr = require('@svgr/rollup');
var dts = require('rollup-plugin-dts');
var json = require('@rollup/plugin-json');
var yaml = require('@rollup/plugin-yaml');
var rollupPluginutils = require('rollup-pluginutils');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var peerDepsExternal__default = /*#__PURE__*/_interopDefaultLegacy(peerDepsExternal);
var commonjs__default = /*#__PURE__*/_interopDefaultLegacy(commonjs);
var resolve__default = /*#__PURE__*/_interopDefaultLegacy(resolve);
var postcss__default = /*#__PURE__*/_interopDefaultLegacy(postcss);
var esbuild__default = /*#__PURE__*/_interopDefaultLegacy(esbuild);
var svgr__default = /*#__PURE__*/_interopDefaultLegacy(svgr);
var dts__default = /*#__PURE__*/_interopDefaultLegacy(dts);
var json__default = /*#__PURE__*/_interopDefaultLegacy(json);
var yaml__default = /*#__PURE__*/_interopDefaultLegacy(yaml);

function forwardFileImports(options) {
  const filter = rollupPluginutils.createFilter(options.include, options.exclude);
  const exportedFiles = new Set();
  const generatedFor = new Set();
  return {
    name: "forward-file-imports",
    async generateBundle(outputOptions, bundle, isWrite) {
      if (!isWrite) {
        return;
      }
      const dir = outputOptions.dir || path.dirname(outputOptions.file);
      if (generatedFor.has(dir)) {
        return;
      }
      for (const output of Object.values(bundle)) {
        if (output.type !== "chunk") {
          continue;
        }
        const chunk = output;
        if (!chunk.facadeModuleId) {
          continue;
        }
        generatedFor.add(dir);
        const srcRoot = path.dirname(chunk.facadeModuleId);
        await Promise.all(Array.from(exportedFiles).map(async (exportedFile) => {
          const outputPath = path.relative(srcRoot, exportedFile);
          const targetFile = path.resolve(dir, outputPath);
          await fs__default['default'].ensureDir(path.dirname(targetFile));
          await fs__default['default'].copyFile(exportedFile, targetFile);
        }));
        return;
      }
    },
    options(inputOptions) {
      const origExternal = inputOptions.external;
      const external = (id, importer, isResolved) => {
        if (typeof origExternal === "function" && origExternal(id, importer, isResolved)) {
          return true;
        }
        if (Array.isArray(origExternal) && origExternal.includes(id)) {
          return true;
        }
        if (!filter(id)) {
          return false;
        }
        if (!importer) {
          throw new Error(`Unknown importer of file module ${id}`);
        }
        const fullId = isResolved ? id : path.resolve(path.dirname(importer), id);
        exportedFiles.add(fullId);
        return true;
      };
      return {...inputOptions, external};
    }
  };
}

(function(Output2) {
  Output2[Output2["esm"] = 0] = "esm";
  Output2[Output2["cjs"] = 1] = "cjs";
  Output2[Output2["types"] = 2] = "types";
})(exports.Output || (exports.Output = {}));

const makeConfigs = async (options) => {
  const configs = new Array();
  if (options.outputs.has(exports.Output.cjs) || options.outputs.has(exports.Output.esm)) {
    const output = new Array();
    const mainFields = ["module", "main"];
    if (options.outputs.has(exports.Output.cjs)) {
      output.push({
        dir: "dist",
        entryFileNames: "index.cjs.js",
        chunkFileNames: "cjs/[name]-[hash].cjs.js",
        format: "commonjs",
        sourcemap: true
      });
    }
    if (options.outputs.has(exports.Output.esm)) {
      output.push({
        dir: "dist",
        entryFileNames: "index.esm.js",
        chunkFileNames: "esm/[name]-[hash].esm.js",
        format: "module",
        sourcemap: true
      });
      mainFields.unshift("browser");
    }
    configs.push({
      input: "src/index.ts",
      output,
      preserveEntrySignatures: "strict",
      external: require("module").builtinModules,
      plugins: [
        peerDepsExternal__default['default']({
          includeDependencies: true
        }),
        resolve__default['default']({mainFields}),
        commonjs__default['default']({
          include: /node_modules/,
          exclude: [/\/[^/]+\.(?:stories|test)\.[^/]+$/]
        }),
        postcss__default['default'](),
        forwardFileImports({
          exclude: /\.icon\.svg$/,
          include: [/\.svg$/, /\.png$/, /\.gif$/, /\.jpg$/, /\.jpeg$/]
        }),
        json__default['default'](),
        yaml__default['default'](),
        svgr__default['default']({
          include: /\.icon\.svg$/,
          template: svgrTemplate.svgrTemplate
        }),
        esbuild__default['default']({
          target: "es2019"
        })
      ]
    });
  }
  if (options.outputs.has(exports.Output.types)) {
    const typesInput = index.paths.resolveTargetRoot("dist-types", path.relative(index.paths.targetRoot, index.paths.targetDir), "src/index.d.ts");
    const declarationsExist = await fs__default['default'].pathExists(typesInput);
    if (!declarationsExist) {
      const path$1 = path.relative(index.paths.targetDir, typesInput);
      throw new Error(`No declaration files found at ${path$1}, be sure to run ${chalk__default['default'].bgRed.white("yarn tsc")} to generate .d.ts files before packaging`);
    }
    configs.push({
      input: typesInput,
      output: {
        file: "dist/index.d.ts",
        format: "es"
      },
      plugins: [dts__default['default']()]
    });
  }
  return configs;
};

function formatErrorMessage(error) {
  let msg = "";
  if (error.code === "PLUGIN_ERROR") {
    if (error.plugin === "esbuild") {
      msg += `${error.message}

`;
      for (const {text, location} of error.errors) {
        const {line, column} = location;
        const path$1 = path.relative(index.paths.targetDir, error.id);
        const loc = chalk__default['default'].cyan(`${path$1}:${line}:${column}`);
        if (text === 'Unexpected "<"' && error.id.endsWith(".js")) {
          msg += `${loc}: ${text}, JavaScript files with JSX should use a .jsx extension`;
        } else {
          msg += `${loc}: ${text}`;
        }
      }
    } else {
      msg += `(plugin ${error.plugin}) ${error}
`;
    }
  } else {
    if (error.loc) {
      const file = `${index.paths.resolveTarget(error.loc.file || error.id)}`;
      const pos = `${error.loc.line}:${error.loc.column}`;
      msg += `${file} [${pos}]
`;
    } else if (error.id) {
      msg += `${index.paths.resolveTarget(error.id)}
`;
    }
    msg += `${error}
`;
    if (error.url) {
      msg += `${chalk__default['default'].cyan(error.url)}
`;
    }
    if (error.frame) {
      msg += `${chalk__default['default'].dim(error.frame)}
`;
    }
  }
  return msg;
}
async function build(config) {
  try {
    const bundle = await rollup.rollup(config);
    if (config.output) {
      for (const output of [config.output].flat()) {
        await bundle.generate(output);
        await bundle.write(output);
      }
    }
  } catch (error) {
    throw new Error(formatErrorMessage(error));
  }
}
const buildPackage = async (options) => {
  try {
    const {resolutions} = await fs__default['default'].readJson(index.paths.resolveTargetRoot("package.json"));
    if (resolutions == null ? void 0 : resolutions.esbuild) {
      console.warn(chalk__default['default'].red('Your root package.json contains a "resolutions" entry for "esbuild". This was included in older @backstage/create-app templates in order to work around build issues that have since been fixed. Please remove the entry and run `yarn install`'));
    }
  } catch {
  }
  const configs = await makeConfigs(options);
  await fs__default['default'].remove(index.paths.resolveTarget("dist"));
  await Promise.all(configs.map(build));
};

exports.buildPackage = buildPackage;
//# sourceMappingURL=packager-8b72f974.cjs.js.map
