{"version":3,"file":"index.esm.js","sources":["../src/testUtils/apis/ErrorApi/MockErrorApi.ts","../src/testUtils/apis/StorageApi/MockStorageApi.ts","../src/testUtils/mockBreakpoint.ts","../src/testUtils/mockApis.ts","../src/testUtils/appWrappers.tsx","../src/testUtils/msw/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorApi, ErrorContext, Observable } from '@backstage/core-api';\n\ntype Options = {\n  collect?: boolean;\n};\n\ntype ErrorWithContext = {\n  error: Error;\n  context?: ErrorContext;\n};\n\ntype Waiter = {\n  pattern: RegExp;\n  resolve: (err: ErrorWithContext) => void;\n};\n\nconst nullObservable = {\n  subscribe: () => ({ unsubscribe: () => {}, closed: true }),\n\n  [Symbol.observable]() {\n    return this;\n  },\n};\n\nexport class MockErrorApi implements ErrorApi {\n  private readonly errors = new Array<ErrorWithContext>();\n  private readonly waiters = new Set<Waiter>();\n\n  constructor(private readonly options: Options = {}) {}\n\n  post(error: Error, context?: ErrorContext) {\n    if (this.options.collect) {\n      this.errors.push({ error, context });\n\n      for (const waiter of this.waiters) {\n        if (waiter.pattern.test(error.message)) {\n          this.waiters.delete(waiter);\n          waiter.resolve({ error, context });\n        }\n      }\n\n      return;\n    }\n\n    throw new Error(`MockErrorApi received unexpected error, ${error}`);\n  }\n\n  error$(): Observable<{ error: Error; context?: ErrorContext }> {\n    return nullObservable;\n  }\n\n  getErrors(): ErrorWithContext[] {\n    return this.errors;\n  }\n\n  waitForError(\n    pattern: RegExp,\n    timeoutMs: number = 2000,\n  ): Promise<ErrorWithContext> {\n    return new Promise<ErrorWithContext>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('Timed out waiting for error'));\n      }, timeoutMs);\n\n      this.waiters.add({ resolve, pattern });\n    });\n  }\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Observable,\n  StorageApi,\n  StorageValueChange,\n} from '@backstage/core-api';\nimport ObservableImpl from 'zen-observable';\n\nexport type MockStorageBucket = { [key: string]: any };\n\nexport class MockStorageApi implements StorageApi {\n  private readonly namespace: string;\n  private readonly data: MockStorageBucket;\n\n  private constructor(namespace: string, data?: MockStorageBucket) {\n    this.namespace = namespace;\n    this.data = { ...data };\n  }\n\n  static create(data?: MockStorageBucket) {\n    return new MockStorageApi('', data);\n  }\n\n  forBucket(name: string): StorageApi {\n    return new MockStorageApi(`${this.namespace}/${name}`, this.data);\n  }\n\n  get<T>(key: string): T | undefined {\n    return this.data[this.getKeyName(key)];\n  }\n\n  async set<T>(key: string, data: T): Promise<void> {\n    this.data[this.getKeyName(key)] = data;\n    this.notifyChanges({ key, newValue: data });\n  }\n\n  async remove(key: string): Promise<void> {\n    delete this.data[this.getKeyName(key)];\n    this.notifyChanges({ key, newValue: undefined });\n  }\n\n  observe$<T>(key: string): Observable<StorageValueChange<T>> {\n    return this.observable.filter(({ key: messageKey }) => messageKey === key);\n  }\n\n  private getKeyName(key: string) {\n    return `${this.namespace}/${encodeURIComponent(key)}`;\n  }\n\n  private notifyChanges<T>(message: StorageValueChange<T>) {\n    for (const subscription of this.subscribers) {\n      subscription.next(message);\n    }\n  }\n\n  private subscribers = new Set<\n    ZenObservable.SubscriptionObserver<StorageValueChange>\n  >();\n\n  private readonly observable = new ObservableImpl<StorageValueChange>(\n    subscriber => {\n      this.subscribers.add(subscriber);\n      return () => {\n        this.subscribers.delete(subscriber);\n      };\n    },\n  );\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { act } from '@testing-library/react';\n\ntype Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nconst queryToBreakpoint = {\n  '(min-width:1920px)': 'xl',\n  '(min-width:1280px)': 'lg',\n  '(min-width:960px)': 'md',\n  '(min-width:600px)': 'sm',\n  '(min-width:0px)': 'xs',\n} as Record<string, Breakpoint>;\n\nfunction toBreakpoint(query: string) {\n  const breakpoint = queryToBreakpoint[query];\n  if (!breakpoint) {\n    throw new Error(\n      `received unknown media query in breakpoint mock: '${query}'`,\n    );\n  }\n  return breakpoint;\n}\n\ntype Listener = (event: { matches: boolean }) => void;\n\ninterface QueryList {\n  addListener(listener: Listener): void;\n  removeListener(listener: Listener): void;\n  matches: boolean;\n}\n\ninterface Query {\n  query: string;\n  queryList: QueryList;\n  listeners: Set<Listener>;\n}\n\nexport default function mockBreakpoint(initialBreakpoint: Breakpoint = 'xl') {\n  let currentBreakpoint = initialBreakpoint;\n  const queries = Array<Query>();\n\n  const previousMatchMedia: any = (window as any).matchMedia;\n\n  (window as any).matchMedia = (query: string): QueryList => {\n    const listeners = new Set<Listener>();\n\n    const queryList: QueryList = {\n      addListener(listener) {\n        listeners.add(listener);\n      },\n      removeListener(listener) {\n        listeners.delete(listener);\n      },\n      matches: toBreakpoint(query) === currentBreakpoint,\n    };\n\n    queries.push({ query, queryList, listeners });\n\n    return queryList;\n  };\n\n  return {\n    set(breakpoint: Breakpoint) {\n      currentBreakpoint = breakpoint;\n\n      act(() => {\n        queries.forEach(({ query, queryList, listeners }) => {\n          const matches = toBreakpoint(query) === breakpoint;\n          queryList.matches = matches;\n          listeners.forEach(listener => listener({ matches }));\n        });\n      });\n    },\n    remove() {\n      (window as any).matchMedia = previousMatchMedia;\n    },\n  };\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  storageApiRef,\n  errorApiRef,\n  createApiFactory,\n  AlertApiForwarder,\n  alertApiRef,\n} from '@backstage/core-api';\nimport { MockErrorApi, MockStorageApi } from './apis';\n\nexport const mockApis = [\n  createApiFactory(errorApiRef, new MockErrorApi()),\n  createApiFactory(storageApiRef, MockStorageApi.create()),\n  createApiFactory(alertApiRef, new AlertApiForwarder()),\n];\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactNode, ReactElement } from 'react';\nimport { MemoryRouter } from 'react-router';\nimport { Route } from 'react-router-dom';\nimport { lightTheme } from '@backstage/theme';\nimport privateExports, {\n  defaultSystemIcons,\n  BootErrorPageProps,\n  RouteRef,\n  ExternalRouteRef,\n  attachComponentData,\n  createRouteRef,\n} from '@backstage/core-api';\nimport { RenderResult } from '@testing-library/react';\nimport { renderWithEffects } from '@backstage/test-utils-core';\nimport { mockApis } from './mockApis';\n\nconst { PrivateAppImpl } = privateExports;\n\nconst NotFoundErrorPage = () => {\n  throw new Error('Reached NotFound Page');\n};\nconst BootErrorPage = ({ step, error }: BootErrorPageProps) => {\n  throw new Error(`Reached BootError Page at step ${step} with error ${error}`);\n};\nconst Progress = () => <div data-testid=\"progress\" />;\n\n/**\n * Options to customize the behavior of the test app wrapper.\n */\ntype TestAppOptions = {\n  /**\n   * Initial route entries to pass along as `initialEntries` to the router.\n   */\n  routeEntries?: string[];\n\n  /**\n   * An object of paths to mount route ref on, with the key being the path and the value\n   * being the RouteRef that the path will be bound to. This allows the route refs to be\n   * used by `useRouteRef` in the rendered elements.\n   *\n   * @example\n   * wrapInTestApp(<MyComponent />, {\n   *   mountedRoutes: {\n   *     '/my-path': myRouteRef,\n   *   }\n   * })\n   * // ...\n   * const link = useRouteRef(myRouteRef)\n   */\n  mountedRoutes?: { [path: string]: RouteRef | ExternalRouteRef };\n};\n\nfunction isExternalRouteRef(\n  routeRef: RouteRef | ExternalRouteRef,\n): routeRef is ExternalRouteRef {\n  // TODO(Rugvip): Least ugly workaround for now, but replace :D\n  return String(routeRef).includes('{type=external,');\n}\n\n/**\n * Wraps a component inside a Backstage test app, providing a mocked theme\n * and app context, along with mocked APIs.\n *\n * @param Component - A component or react node to render inside the test app.\n * @param options - Additional options for the rendering.\n */\nexport function wrapInTestApp(\n  Component: ComponentType | ReactNode,\n  options: TestAppOptions = {},\n): ReactElement {\n  const { routeEntries = ['/'] } = options;\n  const boundRoutes = new Map<ExternalRouteRef, RouteRef>();\n\n  const app = new PrivateAppImpl({\n    apis: [],\n    components: {\n      NotFoundErrorPage,\n      BootErrorPage,\n      Progress,\n      Router: ({ children }) => (\n        <MemoryRouter initialEntries={routeEntries} children={children} />\n      ),\n    },\n    icons: defaultSystemIcons,\n    plugins: [],\n    themes: [\n      {\n        id: 'light',\n        theme: lightTheme,\n        title: 'Test App Theme',\n        variant: 'light',\n      },\n    ],\n    defaultApis: mockApis,\n    bindRoutes: ({ bind }) => {\n      for (const [externalRef, absoluteRef] of boundRoutes) {\n        bind(\n          { ref: externalRef },\n          {\n            ref: absoluteRef,\n          },\n        );\n      }\n    },\n  });\n\n  let wrappedElement: React.ReactElement;\n  if (Component instanceof Function) {\n    wrappedElement = <Component />;\n  } else {\n    wrappedElement = Component as React.ReactElement;\n  }\n\n  const routeElements = Object.entries(options.mountedRoutes ?? {}).map(\n    ([path, routeRef]) => {\n      const Page = () => <div>Mounted at {path}</div>;\n\n      // Allow external route refs to be bound to paths as well, for convenience.\n      // We work around it by creating and binding an absolute ref to the external one.\n      if (isExternalRouteRef(routeRef)) {\n        const absoluteRef = createRouteRef({ id: 'id' });\n        boundRoutes.set(routeRef, absoluteRef);\n        attachComponentData(Page, 'core.mountPoint', absoluteRef);\n      } else {\n        attachComponentData(Page, 'core.mountPoint', routeRef);\n      }\n      return <Route key={path} path={path} element={<Page />} />;\n    },\n  );\n\n  const AppProvider = app.getProvider();\n  const AppRouter = app.getRouter();\n\n  return (\n    <AppProvider>\n      <AppRouter>\n        {routeElements}\n        {/* The path of * here is needed to be set as a catch all, so it will render the wrapper element\n         *  and work with nested routes if they exist too */}\n        <Route path=\"*\" element={wrappedElement} />\n      </AppRouter>\n    </AppProvider>\n  );\n}\n\n/**\n * Renders a component inside a Backstage test app, providing a mocked theme\n * and app context, along with mocked APIs.\n *\n * The render executes async effects similar to `renderWithEffects`. To avoid this\n * behavior, use a regular `render()` + `wrapInTestApp()` instead.\n *\n * @param Component - A component or react node to render inside the test app.\n * @param options - Additional options for the rendering.\n */\nexport async function renderInTestApp(\n  Component: ComponentType | ReactNode,\n  options: TestAppOptions = {},\n): Promise<RenderResult> {\n  return renderWithEffects(wrapInTestApp(Component, options));\n}\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const msw = {\n  setupDefaultHandlers: (worker: {\n    listen: (t: any) => void;\n    close: () => void;\n    resetHandlers: () => void;\n  }) => {\n    beforeAll(() => worker.listen({ onUnhandledRequest: 'error' }));\n    afterAll(() => worker.close());\n    afterEach(() => worker.resetHandlers());\n  },\n};\n"],"names":[],"mappings":"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"}