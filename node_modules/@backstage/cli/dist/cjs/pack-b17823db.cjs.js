'use strict';

require('commander');
require('chalk');
var index = require('./index-ce78e402.cjs.js');
var fs = require('fs-extra');
require('@backstage/cli-common');
require('@backstage/config/package.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

const SKIPPED_KEYS = ["access", "registry", "tag"];
const PKG_PATH = "package.json";
const PKG_BACKUP_PATH = "package.json-prepack";
const pre = async () => {
  var _a;
  const pkgPath = index.paths.resolveTarget(PKG_PATH);
  const pkgContent = await fs__default['default'].readFile(pkgPath, "utf8");
  const pkg = JSON.parse(pkgContent);
  await fs__default['default'].writeFile(PKG_BACKUP_PATH, pkgContent);
  for (const key of Object.keys((_a = pkg.publishConfig) != null ? _a : {})) {
    if (!SKIPPED_KEYS.includes(key)) {
      pkg[key] = pkg.publishConfig[key];
    }
  }
  await fs__default['default'].writeJson(pkgPath, pkg, {encoding: "utf8", spaces: 2});
};
const post = async () => {
  try {
    await fs__default['default'].move(PKG_BACKUP_PATH, PKG_PATH, {overwrite: true});
  } catch (error) {
    console.warn(`Failed to restore package.json during postpack, ${error}. Your package will be fine but you may have ended up with some garbage in the repo.`);
  }
};

exports.post = post;
exports.pre = pre;
//# sourceMappingURL=pack-b17823db.cjs.js.map
