import { createPlugin, createComponentExtension, useApi, Progress, ResponseErrorPanel, InfoCard, Avatar } from '@backstage/core';
import { RELATION_MEMBER_OF, ENTITY_DEFAULT_NAMESPACE, RELATION_PARENT_OF, RELATION_CHILD_OF } from '@backstage/catalog-model';
import { useEntity, catalogApiRef, entityRouteParams, getEntityRelations, EntityRefLinks, isOwnerOf } from '@backstage/plugin-catalog-react';
import { makeStyles, createStyles, Grid, Box, Typography, Link, List, ListItem, ListItemIcon, Tooltip, ListItemText } from '@material-ui/core';
import Pagination from '@material-ui/lab/Pagination';
import React from 'react';
import { Link as Link$1, generatePath } from 'react-router-dom';
import { useAsync } from 'react-use';
import AccountTreeIcon from '@material-ui/icons/AccountTree';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import Alert from '@material-ui/lab/Alert';
import PersonIcon from '@material-ui/icons/Person';
import { genPageTheme } from '@backstage/theme';

const orgPlugin = createPlugin({
  id: "org"
});
const EntityGroupProfileCard = orgPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./esm/index-60886877.esm.js').then((m) => m.GroupProfileCard)
  }
}));
const EntityMembersListCard = orgPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./esm/index-60886877.esm.js').then((m) => m.MembersListCard)
  }
}));
const EntityOwnershipCard = orgPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./esm/index-60886877.esm.js').then((m) => m.OwnershipCard)
  }
}));
const EntityUserProfileCard = orgPlugin.provide(createComponentExtension({
  component: {
    lazy: () => import('./esm/index-60886877.esm.js').then((m) => m.UserProfileCard)
  }
}));

const useStyles = makeStyles((theme) => createStyles({
  card: {
    border: `1px solid ${theme.palette.divider}`,
    boxShadow: theme.shadows[2],
    borderRadius: "4px",
    overflow: "visible",
    position: "relative",
    margin: theme.spacing(4, 1, 1),
    flex: "1",
    minWidth: "0px"
  }
}));
const MemberComponent = ({member}) => {
  var _a;
  const classes = useStyles();
  const {
    metadata: {name: metaName},
    spec: {profile}
  } = member;
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : metaName;
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    container: true,
    xs: 12,
    sm: 6,
    md: 4,
    xl: 2
  }, /* @__PURE__ */ React.createElement(Box, {
    className: classes.card
  }, /* @__PURE__ */ React.createElement(Box, {
    display: "flex",
    flexDirection: "column",
    m: 3,
    alignItems: "center",
    justifyContent: "center"
  }, /* @__PURE__ */ React.createElement(Avatar, {
    displayName,
    picture: profile == null ? void 0 : profile.picture,
    customStyles: {
      position: "absolute",
      top: "-2rem"
    }
  }), /* @__PURE__ */ React.createElement(Box, {
    pt: 2,
    textAlign: "center"
  }, /* @__PURE__ */ React.createElement(Typography, {
    variant: "h5"
  }, /* @__PURE__ */ React.createElement(Link, {
    component: Link$1,
    to: generatePath(`/catalog/:namespace/user/${metaName}`, entityRouteParams(member))
  }, displayName)), /* @__PURE__ */ React.createElement(Typography, {
    variant: "caption"
  }, profile == null ? void 0 : profile.email)))));
};
const MembersListCard = (_props) => {
  var _a;
  const {entity: groupEntity} = useEntity();
  const {
    metadata: {name: groupName, namespace: grpNamespace},
    spec: {profile}
  } = groupEntity;
  const catalogApi = useApi(catalogApiRef);
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : groupName;
  const groupNamespace = grpNamespace || ENTITY_DEFAULT_NAMESPACE;
  const [page, setPage] = React.useState(1);
  const pageChange = (_, pageIndex) => {
    setPage(pageIndex);
  };
  const pageSize = 50;
  const {loading, error, value: members} = useAsync(async () => {
    const membersList = await catalogApi.getEntities({
      filter: {kind: "User"}
    });
    const groupMembersList = membersList.items.filter((member) => {
      var _a2;
      return (_a2 = member == null ? void 0 : member.relations) == null ? void 0 : _a2.some((r) => r.type === RELATION_MEMBER_OF && r.target.name.toLocaleLowerCase("en-US") === groupName.toLocaleLowerCase("en-US") && r.target.namespace.toLocaleLowerCase("en-US") === groupNamespace.toLocaleLowerCase("en-US"));
    });
    return groupMembersList;
  }, [catalogApi, groupEntity]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, {
      error
    });
  }
  const nbPages = Math.ceil(((members == null ? void 0 : members.length) || 0) / pageSize);
  const paginationLabel = nbPages < 2 ? "" : `, page ${page} of ${nbPages}`;
  const pagination = /* @__PURE__ */ React.createElement(Pagination, {
    count: nbPages,
    page,
    onChange: pageChange,
    showFirstButton: true,
    showLastButton: true
  });
  return /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(InfoCard, {
    title: `Members (${(members == null ? void 0 : members.length) || 0}${paginationLabel})`,
    subheader: `of ${displayName}`,
    actions: pagination
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    spacing: 3
  }, members && members.length > 0 ? members.slice(pageSize * (page - 1), pageSize * page).map((member) => /* @__PURE__ */ React.createElement(MemberComponent, {
    member,
    key: member.metadata.uid
  })) : /* @__PURE__ */ React.createElement(Box, {
    p: 2
  }, /* @__PURE__ */ React.createElement(Typography, null, "This group has no members.")))));
};

const CardTitle = ({title}) => /* @__PURE__ */ React.createElement(Box, {
  display: "flex",
  alignItems: "center"
}, /* @__PURE__ */ React.createElement(GroupIcon, {
  fontSize: "inherit"
}), /* @__PURE__ */ React.createElement(Box, {
  ml: 1
}, title));
const GroupProfileCard = ({
  variant
}) => {
  var _a;
  const {entity: group} = useEntity();
  if (!group) {
    return /* @__PURE__ */ React.createElement(Alert, {
      severity: "error"
    }, "Group not found");
  }
  const {
    metadata: {name, description},
    spec: {profile}
  } = group;
  const childRelations = getEntityRelations(group, RELATION_PARENT_OF, {
    kind: "Group"
  });
  const parentRelations = getEntityRelations(group, RELATION_CHILD_OF, {
    kind: "group"
  });
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : name;
  const emailHref = (profile == null ? void 0 : profile.email) ? `mailto:${profile.email}` : void 0;
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: /* @__PURE__ */ React.createElement(CardTitle, {
      title: displayName
    }),
    subheader: description,
    variant
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    spacing: 3
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12,
    sm: 2,
    xl: 1
  }, /* @__PURE__ */ React.createElement(Avatar, {
    displayName,
    picture: profile == null ? void 0 : profile.picture
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    md: 10,
    xl: 11
  }, /* @__PURE__ */ React.createElement(List, null, (profile == null ? void 0 : profile.email) && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, {
    title: "Email"
  }, /* @__PURE__ */ React.createElement(EmailIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(Link, {
    href: emailHref
  }, profile.email))), parentRelations.length ? /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, {
    title: "Parent Group"
  }, /* @__PURE__ */ React.createElement(AccountTreeIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(EntityRefLinks, {
    entityRefs: parentRelations,
    defaultKind: "Group"
  }))) : null, childRelations.length ? /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, {
    title: "Child Groups"
  }, /* @__PURE__ */ React.createElement(GroupIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(EntityRefLinks, {
    entityRefs: childRelations,
    defaultKind: "Group"
  }))) : null))));
};

const CardTitle$1 = ({title}) => title ? /* @__PURE__ */ React.createElement(Box, {
  display: "flex",
  alignItems: "center"
}, /* @__PURE__ */ React.createElement(PersonIcon, {
  fontSize: "inherit"
}), /* @__PURE__ */ React.createElement(Box, {
  ml: 1
}, title)) : null;
const UserProfileCard = ({
  variant
}) => {
  var _a;
  const {entity: user} = useEntity();
  if (!user) {
    return /* @__PURE__ */ React.createElement(Alert, {
      severity: "error"
    }, "User not found");
  }
  const {
    metadata: {name: metaName},
    spec: {profile}
  } = user;
  const displayName = (_a = profile == null ? void 0 : profile.displayName) != null ? _a : metaName;
  const emailHref = (profile == null ? void 0 : profile.email) ? `mailto:${profile.email}` : void 0;
  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {
    kind: "Group"
  });
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: /* @__PURE__ */ React.createElement(CardTitle$1, {
      title: displayName
    }),
    variant
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    spacing: 3,
    alignItems: "flex-start"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12,
    sm: 2,
    xl: 1
  }, /* @__PURE__ */ React.createElement(Avatar, {
    displayName,
    picture: profile == null ? void 0 : profile.picture
  })), /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    md: 10,
    xl: 11
  }, /* @__PURE__ */ React.createElement(List, null, (profile == null ? void 0 : profile.email) && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, {
    title: "Email"
  }, /* @__PURE__ */ React.createElement(EmailIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(Link, {
    href: emailHref
  }, profile.email))), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, {
    title: "Member of"
  }, /* @__PURE__ */ React.createElement(GroupIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(EntityRefLinks, {
    entityRefs: memberOfRelations,
    defaultKind: "Group"
  })))))));
};

const createPageTheme = (theme, shapeKey, colorsKey) => {
  const {colors} = theme.getPageTheme({themeId: colorsKey});
  const {shape} = theme.getPageTheme({themeId: shapeKey});
  return genPageTheme(colors, shape).backgroundImage;
};
const useStyles$1 = makeStyles((theme) => createStyles({
  card: {
    border: `1px solid ${theme.palette.divider}`,
    boxShadow: theme.shadows[2],
    borderRadius: "4px",
    padding: theme.spacing(2),
    color: "#fff",
    transition: `${theme.transitions.duration.standard}ms`,
    "&:hover": {
      boxShadow: theme.shadows[4]
    }
  },
  bold: {
    fontWeight: theme.typography.fontWeightBold
  },
  service: {
    background: createPageTheme(theme, "home", "service")
  },
  website: {
    background: createPageTheme(theme, "home", "website")
  },
  library: {
    background: createPageTheme(theme, "home", "library")
  },
  documentation: {
    background: createPageTheme(theme, "home", "documentation")
  },
  api: {
    background: createPageTheme(theme, "home", "home")
  },
  tool: {
    background: createPageTheme(theme, "home", "tool")
  }
}));
const countEntitiesBy = (entities, kind, type) => entities.filter((e) => {
  var _a;
  return e.kind === kind && (type ? ((_a = e == null ? void 0 : e.spec) == null ? void 0 : _a.type) === type : true);
}).length;
const EntityCountTile = ({
  counter,
  className,
  name
}) => {
  const classes = useStyles$1();
  return /* @__PURE__ */ React.createElement(Box, {
    className: `${classes.card} ${classes[className]}`,
    display: "flex",
    flexDirection: "column",
    alignItems: "center"
  }, /* @__PURE__ */ React.createElement(Typography, {
    className: classes.bold,
    variant: "h6"
  }, counter), /* @__PURE__ */ React.createElement(Typography, {
    className: classes.bold,
    variant: "h6"
  }, name));
};
const OwnershipCard = ({
  variant
}) => {
  const {entity} = useEntity();
  const catalogApi = useApi(catalogApiRef);
  const {
    loading,
    error,
    value: componentsWithCounters
  } = useAsync(async () => {
    const kinds = ["Component", "API"];
    const entitiesList = await catalogApi.getEntities({
      filter: {
        kind: kinds
      },
      fields: [
        "kind",
        "metadata.name",
        "metadata.namespace",
        "spec.type",
        "relations"
      ]
    });
    const ownedEntitiesList = entitiesList.items.filter((component) => isOwnerOf(entity, component));
    return [
      {
        counter: countEntitiesBy(ownedEntitiesList, "Component", "service"),
        className: "service",
        name: "Services"
      },
      {
        counter: countEntitiesBy(ownedEntitiesList, "Component", "documentation"),
        className: "documentation",
        name: "Documentation"
      },
      {
        counter: countEntitiesBy(ownedEntitiesList, "API"),
        className: "api",
        name: "APIs"
      },
      {
        counter: countEntitiesBy(ownedEntitiesList, "Component", "library"),
        className: "library",
        name: "Libraries"
      },
      {
        counter: countEntitiesBy(ownedEntitiesList, "Component", "website"),
        className: "website",
        name: "Websites"
      },
      {
        counter: countEntitiesBy(ownedEntitiesList, "Component", "tool"),
        className: "tool",
        name: "Tools"
      }
    ];
  }, [catalogApi, entity]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, {
      error
    });
  }
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Ownership",
    variant
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true
  }, componentsWithCounters == null ? void 0 : componentsWithCounters.map((c) => /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 6,
    md: 6,
    lg: 4,
    key: c.name
  }, /* @__PURE__ */ React.createElement(EntityCountTile, {
    counter: c.counter,
    className: c.className,
    name: c.name
  })))));
};

export { EntityGroupProfileCard, EntityMembersListCard, EntityOwnershipCard, EntityUserProfileCard, GroupProfileCard, MembersListCard, OwnershipCard, UserProfileCard, orgPlugin, orgPlugin as plugin };
//# sourceMappingURL=index.esm.js.map
